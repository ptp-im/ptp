// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PTP.File.proto

#include "PTP.File.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace PTP {
namespace File {
class FileImgUploadReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileImgUploadReq>
      _instance;
} _FileImgUploadReq_default_instance_;
class FileImgUploadResDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileImgUploadRes>
      _instance;
} _FileImgUploadRes_default_instance_;
class FileImgDownloadReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileImgDownloadReq>
      _instance;
} _FileImgDownloadReq_default_instance_;
class FileImgDownloadResDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileImgDownloadRes>
      _instance;
} _FileImgDownloadRes_default_instance_;
}  // namespace File
}  // namespace PTP
namespace protobuf_PTP_2eFile_2eproto {
static void InitDefaultsFileImgUploadReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PTP::File::_FileImgUploadReq_default_instance_;
    new (ptr) ::PTP::File::FileImgUploadReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PTP::File::FileImgUploadReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileImgUploadReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileImgUploadReq}, {}};

static void InitDefaultsFileImgUploadRes() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PTP::File::_FileImgUploadRes_default_instance_;
    new (ptr) ::PTP::File::FileImgUploadRes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PTP::File::FileImgUploadRes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileImgUploadRes =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileImgUploadRes}, {}};

static void InitDefaultsFileImgDownloadReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PTP::File::_FileImgDownloadReq_default_instance_;
    new (ptr) ::PTP::File::FileImgDownloadReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PTP::File::FileImgDownloadReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileImgDownloadReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileImgDownloadReq}, {}};

static void InitDefaultsFileImgDownloadRes() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PTP::File::_FileImgDownloadRes_default_instance_;
    new (ptr) ::PTP::File::FileImgDownloadRes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PTP::File::FileImgDownloadRes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileImgDownloadRes =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileImgDownloadRes}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_FileImgUploadReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileImgUploadRes.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileImgDownloadReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileImgDownloadRes.base);
}

}  // namespace protobuf_PTP_2eFile_2eproto
namespace PTP {
namespace File {

// ===================================================================

void FileImgUploadReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileImgUploadReq::kFileIdFieldNumber;
const int FileImgUploadReq::kFilePartFieldNumber;
const int FileImgUploadReq::kFileTotalPartsFieldNumber;
const int FileImgUploadReq::kFileDataFieldNumber;
const int FileImgUploadReq::kAttachDataFieldNumber;
const int FileImgUploadReq::kAuthUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileImgUploadReq::FileImgUploadReq()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PTP_2eFile_2eproto::scc_info_FileImgUploadReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PTP.File.FileImgUploadReq)
}
FileImgUploadReq::FileImgUploadReq(const FileImgUploadReq& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_id()) {
    file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
  }
  file_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_data()) {
    file_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_data_);
  }
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_attach_data()) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&file_part_, &from.file_part_,
    static_cast<size_t>(reinterpret_cast<char*>(&auth_uid_) -
    reinterpret_cast<char*>(&file_part_)) + sizeof(auth_uid_));
  // @@protoc_insertion_point(copy_constructor:PTP.File.FileImgUploadReq)
}

void FileImgUploadReq::SharedCtor() {
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_part_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auth_uid_) -
      reinterpret_cast<char*>(&file_part_)) + sizeof(auth_uid_));
}

FileImgUploadReq::~FileImgUploadReq() {
  // @@protoc_insertion_point(destructor:PTP.File.FileImgUploadReq)
  SharedDtor();
}

void FileImgUploadReq::SharedDtor() {
  file_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileImgUploadReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileImgUploadReq& FileImgUploadReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PTP_2eFile_2eproto::scc_info_FileImgUploadReq.base);
  return *internal_default_instance();
}


void FileImgUploadReq::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.File.FileImgUploadReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      file_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      file_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      attach_data_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&file_part_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&auth_uid_) -
        reinterpret_cast<char*>(&file_part_)) + sizeof(auth_uid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FileImgUploadReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PTP.File.FileImgUploadReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 file_part = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_file_part();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_part_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 file_total_parts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_file_total_parts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_total_parts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes file_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 auth_uid = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_auth_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auth_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PTP.File.FileImgUploadReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PTP.File.FileImgUploadReq)
  return false;
#undef DO_
}

void FileImgUploadReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PTP.File.FileImgUploadReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string file_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_id(), output);
  }

  // required uint32 file_part = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->file_part(), output);
  }

  // required uint32 file_total_parts = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->file_total_parts(), output);
  }

  // required bytes file_data = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->file_data(), output);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // optional uint32 auth_uid = 21;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->auth_uid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PTP.File.FileImgUploadReq)
}

size_t FileImgUploadReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PTP.File.FileImgUploadReq)
  size_t total_size = 0;

  if (has_file_id()) {
    // required string file_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_id());
  }

  if (has_file_data()) {
    // required bytes file_data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->file_data());
  }

  if (has_file_part()) {
    // required uint32 file_part = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->file_part());
  }

  if (has_file_total_parts()) {
    // required uint32 file_total_parts = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->file_total_parts());
  }

  return total_size;
}
size_t FileImgUploadReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.File.FileImgUploadReq)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x0000001b) ^ 0x0000001b) == 0) {  // All required fields are present.
    // required string file_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_id());

    // required bytes file_data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->file_data());

    // required uint32 file_part = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->file_part());

    // required uint32 file_total_parts = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->file_total_parts());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // optional uint32 auth_uid = 21;
  if (has_auth_uid()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->auth_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileImgUploadReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileImgUploadReq*>(&from));
}

void FileImgUploadReq::MergeFrom(const FileImgUploadReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PTP.File.FileImgUploadReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_id();
      file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_file_data();
      file_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_data_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_attach_data();
      attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
    }
    if (cached_has_bits & 0x00000008u) {
      file_part_ = from.file_part_;
    }
    if (cached_has_bits & 0x00000010u) {
      file_total_parts_ = from.file_total_parts_;
    }
    if (cached_has_bits & 0x00000020u) {
      auth_uid_ = from.auth_uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FileImgUploadReq::CopyFrom(const FileImgUploadReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.File.FileImgUploadReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileImgUploadReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;
  return true;
}

void FileImgUploadReq::Swap(FileImgUploadReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileImgUploadReq::InternalSwap(FileImgUploadReq* other) {
  using std::swap;
  file_id_.Swap(&other->file_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_data_.Swap(&other->file_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  attach_data_.Swap(&other->attach_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_part_, other->file_part_);
  swap(file_total_parts_, other->file_total_parts_);
  swap(auth_uid_, other->auth_uid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string FileImgUploadReq::GetTypeName() const {
  return "PTP.File.FileImgUploadReq";
}


// ===================================================================

void FileImgUploadRes::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileImgUploadRes::kErrorFieldNumber;
const int FileImgUploadRes::kFilePathFieldNumber;
const int FileImgUploadRes::kAttachDataFieldNumber;
const int FileImgUploadRes::kAuthUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileImgUploadRes::FileImgUploadRes()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PTP_2eFile_2eproto::scc_info_FileImgUploadRes.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PTP.File.FileImgUploadRes)
}
FileImgUploadRes::FileImgUploadRes(const FileImgUploadRes& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_path()) {
    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_attach_data()) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&error_, &from.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&auth_uid_) -
    reinterpret_cast<char*>(&error_)) + sizeof(auth_uid_));
  // @@protoc_insertion_point(copy_constructor:PTP.File.FileImgUploadRes)
}

void FileImgUploadRes::SharedCtor() {
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auth_uid_) -
      reinterpret_cast<char*>(&error_)) + sizeof(auth_uid_));
}

FileImgUploadRes::~FileImgUploadRes() {
  // @@protoc_insertion_point(destructor:PTP.File.FileImgUploadRes)
  SharedDtor();
}

void FileImgUploadRes::SharedDtor() {
  file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileImgUploadRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileImgUploadRes& FileImgUploadRes::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PTP_2eFile_2eproto::scc_info_FileImgUploadRes.base);
  return *internal_default_instance();
}


void FileImgUploadRes::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.File.FileImgUploadRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      file_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      attach_data_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&auth_uid_) -
        reinterpret_cast<char*>(&error_)) + sizeof(auth_uid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FileImgUploadRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PTP.File.FileImgUploadRes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PTP.Common.ERR error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PTP::Common::ERR_IsValid(value)) {
            set_error(static_cast< ::PTP::Common::ERR >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string file_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 auth_uid = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_auth_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auth_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PTP.File.FileImgUploadRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PTP.File.FileImgUploadRes)
  return false;
#undef DO_
}

void FileImgUploadRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PTP.File.FileImgUploadRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PTP.Common.ERR error = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error(), output);
  }

  // required string file_path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_path(), output);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // optional uint32 auth_uid = 21;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->auth_uid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PTP.File.FileImgUploadRes)
}

size_t FileImgUploadRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.File.FileImgUploadRes)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required string file_path = 2;
  if (has_file_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

    // optional .PTP.Common.ERR error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // optional uint32 auth_uid = 21;
    if (has_auth_uid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auth_uid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileImgUploadRes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileImgUploadRes*>(&from));
}

void FileImgUploadRes::MergeFrom(const FileImgUploadRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PTP.File.FileImgUploadRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_path();
      file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_attach_data();
      attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
    }
    if (cached_has_bits & 0x00000004u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00000008u) {
      auth_uid_ = from.auth_uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FileImgUploadRes::CopyFrom(const FileImgUploadRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.File.FileImgUploadRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileImgUploadRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FileImgUploadRes::Swap(FileImgUploadRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileImgUploadRes::InternalSwap(FileImgUploadRes* other) {
  using std::swap;
  file_path_.Swap(&other->file_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  attach_data_.Swap(&other->attach_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_, other->error_);
  swap(auth_uid_, other->auth_uid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string FileImgUploadRes::GetTypeName() const {
  return "PTP.File.FileImgUploadRes";
}


// ===================================================================

void FileImgDownloadReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileImgDownloadReq::kFilePathFieldNumber;
const int FileImgDownloadReq::kAttachDataFieldNumber;
const int FileImgDownloadReq::kAuthUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileImgDownloadReq::FileImgDownloadReq()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PTP_2eFile_2eproto::scc_info_FileImgDownloadReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PTP.File.FileImgDownloadReq)
}
FileImgDownloadReq::FileImgDownloadReq(const FileImgDownloadReq& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_path()) {
    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_attach_data()) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  auth_uid_ = from.auth_uid_;
  // @@protoc_insertion_point(copy_constructor:PTP.File.FileImgDownloadReq)
}

void FileImgDownloadReq::SharedCtor() {
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_uid_ = 0u;
}

FileImgDownloadReq::~FileImgDownloadReq() {
  // @@protoc_insertion_point(destructor:PTP.File.FileImgDownloadReq)
  SharedDtor();
}

void FileImgDownloadReq::SharedDtor() {
  file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileImgDownloadReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileImgDownloadReq& FileImgDownloadReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PTP_2eFile_2eproto::scc_info_FileImgDownloadReq.base);
  return *internal_default_instance();
}


void FileImgDownloadReq::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.File.FileImgDownloadReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      file_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      attach_data_.ClearNonDefaultToEmptyNoArena();
    }
  }
  auth_uid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FileImgDownloadReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PTP.File.FileImgDownloadReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 auth_uid = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_auth_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auth_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PTP.File.FileImgDownloadReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PTP.File.FileImgDownloadReq)
  return false;
#undef DO_
}

void FileImgDownloadReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PTP.File.FileImgDownloadReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string file_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_path(), output);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // optional uint32 auth_uid = 21;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->auth_uid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PTP.File.FileImgDownloadReq)
}

size_t FileImgDownloadReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.File.FileImgDownloadReq)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required string file_path = 1;
  if (has_file_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

    // optional uint32 auth_uid = 21;
    if (has_auth_uid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auth_uid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileImgDownloadReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileImgDownloadReq*>(&from));
}

void FileImgDownloadReq::MergeFrom(const FileImgDownloadReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PTP.File.FileImgDownloadReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_path();
      file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_attach_data();
      attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
    }
    if (cached_has_bits & 0x00000004u) {
      auth_uid_ = from.auth_uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FileImgDownloadReq::CopyFrom(const FileImgDownloadReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.File.FileImgDownloadReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileImgDownloadReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FileImgDownloadReq::Swap(FileImgDownloadReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileImgDownloadReq::InternalSwap(FileImgDownloadReq* other) {
  using std::swap;
  file_path_.Swap(&other->file_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  attach_data_.Swap(&other->attach_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(auth_uid_, other->auth_uid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string FileImgDownloadReq::GetTypeName() const {
  return "PTP.File.FileImgDownloadReq";
}


// ===================================================================

void FileImgDownloadRes::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileImgDownloadRes::kErrorFieldNumber;
const int FileImgDownloadRes::kFileDataFieldNumber;
const int FileImgDownloadRes::kAttachDataFieldNumber;
const int FileImgDownloadRes::kAuthUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileImgDownloadRes::FileImgDownloadRes()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PTP_2eFile_2eproto::scc_info_FileImgDownloadRes.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PTP.File.FileImgDownloadRes)
}
FileImgDownloadRes::FileImgDownloadRes(const FileImgDownloadRes& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_data()) {
    file_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_data_);
  }
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_attach_data()) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&error_, &from.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&auth_uid_) -
    reinterpret_cast<char*>(&error_)) + sizeof(auth_uid_));
  // @@protoc_insertion_point(copy_constructor:PTP.File.FileImgDownloadRes)
}

void FileImgDownloadRes::SharedCtor() {
  file_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auth_uid_) -
      reinterpret_cast<char*>(&error_)) + sizeof(auth_uid_));
}

FileImgDownloadRes::~FileImgDownloadRes() {
  // @@protoc_insertion_point(destructor:PTP.File.FileImgDownloadRes)
  SharedDtor();
}

void FileImgDownloadRes::SharedDtor() {
  file_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileImgDownloadRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileImgDownloadRes& FileImgDownloadRes::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PTP_2eFile_2eproto::scc_info_FileImgDownloadRes.base);
  return *internal_default_instance();
}


void FileImgDownloadRes::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.File.FileImgDownloadRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      file_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      attach_data_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&auth_uid_) -
        reinterpret_cast<char*>(&error_)) + sizeof(auth_uid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FileImgDownloadRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PTP.File.FileImgDownloadRes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PTP.Common.ERR error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PTP::Common::ERR_IsValid(value)) {
            set_error(static_cast< ::PTP::Common::ERR >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes file_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 auth_uid = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_auth_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auth_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PTP.File.FileImgDownloadRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PTP.File.FileImgDownloadRes)
  return false;
#undef DO_
}

void FileImgDownloadRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PTP.File.FileImgDownloadRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PTP.Common.ERR error = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error(), output);
  }

  // optional bytes file_data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->file_data(), output);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // optional uint32 auth_uid = 21;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->auth_uid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PTP.File.FileImgDownloadRes)
}

size_t FileImgDownloadRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.File.FileImgDownloadRes)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes file_data = 2;
    if (has_file_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_data());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

    // optional .PTP.Common.ERR error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // optional uint32 auth_uid = 21;
    if (has_auth_uid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auth_uid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileImgDownloadRes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileImgDownloadRes*>(&from));
}

void FileImgDownloadRes::MergeFrom(const FileImgDownloadRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PTP.File.FileImgDownloadRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_data();
      file_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_attach_data();
      attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
    }
    if (cached_has_bits & 0x00000004u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00000008u) {
      auth_uid_ = from.auth_uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FileImgDownloadRes::CopyFrom(const FileImgDownloadRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.File.FileImgDownloadRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileImgDownloadRes::IsInitialized() const {
  return true;
}

void FileImgDownloadRes::Swap(FileImgDownloadRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileImgDownloadRes::InternalSwap(FileImgDownloadRes* other) {
  using std::swap;
  file_data_.Swap(&other->file_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  attach_data_.Swap(&other->attach_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_, other->error_);
  swap(auth_uid_, other->auth_uid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string FileImgDownloadRes::GetTypeName() const {
  return "PTP.File.FileImgDownloadRes";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace File
}  // namespace PTP
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PTP::File::FileImgUploadReq* Arena::CreateMaybeMessage< ::PTP::File::FileImgUploadReq >(Arena* arena) {
  return Arena::CreateInternal< ::PTP::File::FileImgUploadReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PTP::File::FileImgUploadRes* Arena::CreateMaybeMessage< ::PTP::File::FileImgUploadRes >(Arena* arena) {
  return Arena::CreateInternal< ::PTP::File::FileImgUploadRes >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PTP::File::FileImgDownloadReq* Arena::CreateMaybeMessage< ::PTP::File::FileImgDownloadReq >(Arena* arena) {
  return Arena::CreateInternal< ::PTP::File::FileImgDownloadReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PTP::File::FileImgDownloadRes* Arena::CreateMaybeMessage< ::PTP::File::FileImgDownloadRes >(Arena* arena) {
  return Arena::CreateInternal< ::PTP::File::FileImgDownloadRes >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
