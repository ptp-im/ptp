// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PTP.Switch.proto

#include "PTP.Switch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_PTP_2eCommon_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PTP_2eCommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DevicesInfo;
}  // namespace protobuf_PTP_2eCommon_2eproto
namespace PTP {
namespace Switch {
class SwitchPtpReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SwitchPtpReq>
      _instance;
} _SwitchPtpReq_default_instance_;
class SwitchPtpResDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SwitchPtpRes>
      _instance;
} _SwitchPtpRes_default_instance_;
class SwitchPtpNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SwitchPtpNotify>
      _instance;
} _SwitchPtpNotify_default_instance_;
class SwitchDevicesReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SwitchDevicesReq>
      _instance;
} _SwitchDevicesReq_default_instance_;
class SwitchDevicesNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SwitchDevicesNotify>
      _instance;
} _SwitchDevicesNotify_default_instance_;
}  // namespace Switch
}  // namespace PTP
namespace protobuf_PTP_2eSwitch_2eproto {
static void InitDefaultsSwitchPtpReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PTP::Switch::_SwitchPtpReq_default_instance_;
    new (ptr) ::PTP::Switch::SwitchPtpReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PTP::Switch::SwitchPtpReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SwitchPtpReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSwitchPtpReq}, {}};

static void InitDefaultsSwitchPtpRes() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PTP::Switch::_SwitchPtpRes_default_instance_;
    new (ptr) ::PTP::Switch::SwitchPtpRes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PTP::Switch::SwitchPtpRes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SwitchPtpRes =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSwitchPtpRes}, {}};

static void InitDefaultsSwitchPtpNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PTP::Switch::_SwitchPtpNotify_default_instance_;
    new (ptr) ::PTP::Switch::SwitchPtpNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PTP::Switch::SwitchPtpNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SwitchPtpNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSwitchPtpNotify}, {}};

static void InitDefaultsSwitchDevicesReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PTP::Switch::_SwitchDevicesReq_default_instance_;
    new (ptr) ::PTP::Switch::SwitchDevicesReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PTP::Switch::SwitchDevicesReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SwitchDevicesReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSwitchDevicesReq}, {}};

static void InitDefaultsSwitchDevicesNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PTP::Switch::_SwitchDevicesNotify_default_instance_;
    new (ptr) ::PTP::Switch::SwitchDevicesNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PTP::Switch::SwitchDevicesNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SwitchDevicesNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSwitchDevicesNotify}, {
      &protobuf_PTP_2eCommon_2eproto::scc_info_DevicesInfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SwitchPtpReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SwitchPtpRes.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SwitchPtpNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SwitchDevicesReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SwitchDevicesNotify.base);
}

}  // namespace protobuf_PTP_2eSwitch_2eproto
namespace PTP {
namespace Switch {

// ===================================================================

void SwitchPtpReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SwitchPtpReq::kToAdrFieldNumber;
const int SwitchPtpReq::kDataFieldNumber;
const int SwitchPtpReq::kSwitchTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SwitchPtpReq::SwitchPtpReq()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PTP_2eSwitch_2eproto::scc_info_SwitchPtpReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PTP.Switch.SwitchPtpReq)
}
SwitchPtpReq::SwitchPtpReq(const SwitchPtpReq& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  to_adr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_to_adr()) {
    to_adr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_adr_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  switch_type_ = from.switch_type_;
  // @@protoc_insertion_point(copy_constructor:PTP.Switch.SwitchPtpReq)
}

void SwitchPtpReq::SharedCtor() {
  to_adr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  switch_type_ = 1;
}

SwitchPtpReq::~SwitchPtpReq() {
  // @@protoc_insertion_point(destructor:PTP.Switch.SwitchPtpReq)
  SharedDtor();
}

void SwitchPtpReq::SharedDtor() {
  to_adr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SwitchPtpReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwitchPtpReq& SwitchPtpReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PTP_2eSwitch_2eproto::scc_info_SwitchPtpReq.base);
  return *internal_default_instance();
}


void SwitchPtpReq::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.Switch.SwitchPtpReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      to_adr_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    switch_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SwitchPtpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PTP.Switch.SwitchPtpReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string to_adr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_adr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .PTP.Common.SwitchType switch_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PTP::Common::SwitchType_IsValid(value)) {
            set_switch_type(static_cast< ::PTP::Common::SwitchType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PTP.Switch.SwitchPtpReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PTP.Switch.SwitchPtpReq)
  return false;
#undef DO_
}

void SwitchPtpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PTP.Switch.SwitchPtpReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string to_adr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->to_adr(), output);
  }

  // required string data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  // required .PTP.Common.SwitchType switch_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->switch_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PTP.Switch.SwitchPtpReq)
}

size_t SwitchPtpReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PTP.Switch.SwitchPtpReq)
  size_t total_size = 0;

  if (has_to_adr()) {
    // required string to_adr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to_adr());
  }

  if (has_data()) {
    // required string data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  if (has_switch_type()) {
    // required .PTP.Common.SwitchType switch_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->switch_type());
  }

  return total_size;
}
size_t SwitchPtpReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.Switch.SwitchPtpReq)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string to_adr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to_adr());

    // required string data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());

    // required .PTP.Common.SwitchType switch_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->switch_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwitchPtpReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SwitchPtpReq*>(&from));
}

void SwitchPtpReq::MergeFrom(const SwitchPtpReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PTP.Switch.SwitchPtpReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_to_adr();
      to_adr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_adr_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000004u) {
      switch_type_ = from.switch_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SwitchPtpReq::CopyFrom(const SwitchPtpReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.Switch.SwitchPtpReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchPtpReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void SwitchPtpReq::Swap(SwitchPtpReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SwitchPtpReq::InternalSwap(SwitchPtpReq* other) {
  using std::swap;
  to_adr_.Swap(&other->to_adr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(switch_type_, other->switch_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SwitchPtpReq::GetTypeName() const {
  return "PTP.Switch.SwitchPtpReq";
}


// ===================================================================

void SwitchPtpRes::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SwitchPtpRes::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SwitchPtpRes::SwitchPtpRes()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PTP_2eSwitch_2eproto::scc_info_SwitchPtpRes.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PTP.Switch.SwitchPtpRes)
}
SwitchPtpRes::SwitchPtpRes(const SwitchPtpRes& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:PTP.Switch.SwitchPtpRes)
}

void SwitchPtpRes::SharedCtor() {
  error_ = 0;
}

SwitchPtpRes::~SwitchPtpRes() {
  // @@protoc_insertion_point(destructor:PTP.Switch.SwitchPtpRes)
  SharedDtor();
}

void SwitchPtpRes::SharedDtor() {
}

void SwitchPtpRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwitchPtpRes& SwitchPtpRes::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PTP_2eSwitch_2eproto::scc_info_SwitchPtpRes.base);
  return *internal_default_instance();
}


void SwitchPtpRes::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.Switch.SwitchPtpRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SwitchPtpRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PTP.Switch.SwitchPtpRes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PTP.Common.ERR error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PTP::Common::ERR_IsValid(value)) {
            set_error(static_cast< ::PTP::Common::ERR >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PTP.Switch.SwitchPtpRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PTP.Switch.SwitchPtpRes)
  return false;
#undef DO_
}

void SwitchPtpRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PTP.Switch.SwitchPtpRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .PTP.Common.ERR error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PTP.Switch.SwitchPtpRes)
}

size_t SwitchPtpRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.Switch.SwitchPtpRes)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required .PTP.Common.ERR error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwitchPtpRes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SwitchPtpRes*>(&from));
}

void SwitchPtpRes::MergeFrom(const SwitchPtpRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PTP.Switch.SwitchPtpRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error()) {
    set_error(from.error());
  }
}

void SwitchPtpRes::CopyFrom(const SwitchPtpRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.Switch.SwitchPtpRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchPtpRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SwitchPtpRes::Swap(SwitchPtpRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SwitchPtpRes::InternalSwap(SwitchPtpRes* other) {
  using std::swap;
  swap(error_, other->error_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SwitchPtpRes::GetTypeName() const {
  return "PTP.Switch.SwitchPtpRes";
}


// ===================================================================

void SwitchPtpNotify::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SwitchPtpNotify::kFromAdrFieldNumber;
const int SwitchPtpNotify::kDataFieldNumber;
const int SwitchPtpNotify::kSwitchTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SwitchPtpNotify::SwitchPtpNotify()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PTP_2eSwitch_2eproto::scc_info_SwitchPtpNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PTP.Switch.SwitchPtpNotify)
}
SwitchPtpNotify::SwitchPtpNotify(const SwitchPtpNotify& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_adr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from_adr()) {
    from_adr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_adr_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  switch_type_ = from.switch_type_;
  // @@protoc_insertion_point(copy_constructor:PTP.Switch.SwitchPtpNotify)
}

void SwitchPtpNotify::SharedCtor() {
  from_adr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  switch_type_ = 1;
}

SwitchPtpNotify::~SwitchPtpNotify() {
  // @@protoc_insertion_point(destructor:PTP.Switch.SwitchPtpNotify)
  SharedDtor();
}

void SwitchPtpNotify::SharedDtor() {
  from_adr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SwitchPtpNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwitchPtpNotify& SwitchPtpNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PTP_2eSwitch_2eproto::scc_info_SwitchPtpNotify.base);
  return *internal_default_instance();
}


void SwitchPtpNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.Switch.SwitchPtpNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      from_adr_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    switch_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SwitchPtpNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PTP.Switch.SwitchPtpNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string from_adr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_adr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .PTP.Common.SwitchType switch_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PTP::Common::SwitchType_IsValid(value)) {
            set_switch_type(static_cast< ::PTP::Common::SwitchType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PTP.Switch.SwitchPtpNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PTP.Switch.SwitchPtpNotify)
  return false;
#undef DO_
}

void SwitchPtpNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PTP.Switch.SwitchPtpNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string from_adr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_adr(), output);
  }

  // required string data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  // required .PTP.Common.SwitchType switch_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->switch_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PTP.Switch.SwitchPtpNotify)
}

size_t SwitchPtpNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PTP.Switch.SwitchPtpNotify)
  size_t total_size = 0;

  if (has_from_adr()) {
    // required string from_adr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_adr());
  }

  if (has_data()) {
    // required string data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  if (has_switch_type()) {
    // required .PTP.Common.SwitchType switch_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->switch_type());
  }

  return total_size;
}
size_t SwitchPtpNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.Switch.SwitchPtpNotify)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string from_adr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_adr());

    // required string data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());

    // required .PTP.Common.SwitchType switch_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->switch_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwitchPtpNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SwitchPtpNotify*>(&from));
}

void SwitchPtpNotify::MergeFrom(const SwitchPtpNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PTP.Switch.SwitchPtpNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_from_adr();
      from_adr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_adr_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000004u) {
      switch_type_ = from.switch_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SwitchPtpNotify::CopyFrom(const SwitchPtpNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.Switch.SwitchPtpNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchPtpNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void SwitchPtpNotify::Swap(SwitchPtpNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SwitchPtpNotify::InternalSwap(SwitchPtpNotify* other) {
  using std::swap;
  from_adr_.Swap(&other->from_adr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(switch_type_, other->switch_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SwitchPtpNotify::GetTypeName() const {
  return "PTP.Switch.SwitchPtpNotify";
}


// ===================================================================

void SwitchDevicesReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SwitchDevicesReq::kBrowserNameFieldNumber;
const int SwitchDevicesReq::kBrowserVersionFieldNumber;
const int SwitchDevicesReq::kOsNameFieldNumber;
const int SwitchDevicesReq::kOsVersionFieldNumber;
const int SwitchDevicesReq::kIsIntelFieldNumber;
const int SwitchDevicesReq::kClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SwitchDevicesReq::SwitchDevicesReq()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PTP_2eSwitch_2eproto::scc_info_SwitchDevicesReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PTP.Switch.SwitchDevicesReq)
}
SwitchDevicesReq::SwitchDevicesReq(const SwitchDevicesReq& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_browser_name()) {
    browser_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.browser_name_);
  }
  browser_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_browser_version()) {
    browser_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.browser_version_);
  }
  os_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_os_name()) {
    os_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_name_);
  }
  os_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_os_version()) {
    os_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_version_);
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_id()) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  is_intel_ = from.is_intel_;
  // @@protoc_insertion_point(copy_constructor:PTP.Switch.SwitchDevicesReq)
}

void SwitchDevicesReq::SharedCtor() {
  browser_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_intel_ = false;
}

SwitchDevicesReq::~SwitchDevicesReq() {
  // @@protoc_insertion_point(destructor:PTP.Switch.SwitchDevicesReq)
  SharedDtor();
}

void SwitchDevicesReq::SharedDtor() {
  browser_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SwitchDevicesReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwitchDevicesReq& SwitchDevicesReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PTP_2eSwitch_2eproto::scc_info_SwitchDevicesReq.base);
  return *internal_default_instance();
}


void SwitchDevicesReq::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.Switch.SwitchDevicesReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      browser_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      browser_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      os_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      os_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      client_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  is_intel_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SwitchDevicesReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PTP.Switch.SwitchDevicesReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string browser_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_browser_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string browser_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_browser_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string os_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string os_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_intel = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_is_intel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_intel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string client_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PTP.Switch.SwitchDevicesReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PTP.Switch.SwitchDevicesReq)
  return false;
#undef DO_
}

void SwitchDevicesReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PTP.Switch.SwitchDevicesReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string browser_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->browser_name(), output);
  }

  // required string browser_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->browser_version(), output);
  }

  // required string os_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->os_name(), output);
  }

  // required string os_version = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->os_version(), output);
  }

  // required bool is_intel = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_intel(), output);
  }

  // required string client_id = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->client_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PTP.Switch.SwitchDevicesReq)
}

size_t SwitchDevicesReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PTP.Switch.SwitchDevicesReq)
  size_t total_size = 0;

  if (has_browser_name()) {
    // required string browser_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->browser_name());
  }

  if (has_browser_version()) {
    // required string browser_version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->browser_version());
  }

  if (has_os_name()) {
    // required string os_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->os_name());
  }

  if (has_os_version()) {
    // required string os_version = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->os_version());
  }

  if (has_client_id()) {
    // required string client_id = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  if (has_is_intel()) {
    // required bool is_intel = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t SwitchDevicesReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.Switch.SwitchDevicesReq)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string browser_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->browser_name());

    // required string browser_version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->browser_version());

    // required string os_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->os_name());

    // required string os_version = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->os_version());

    // required string client_id = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());

    // required bool is_intel = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwitchDevicesReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SwitchDevicesReq*>(&from));
}

void SwitchDevicesReq::MergeFrom(const SwitchDevicesReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PTP.Switch.SwitchDevicesReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_browser_name();
      browser_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.browser_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_browser_version();
      browser_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.browser_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_os_name();
      os_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_os_version();
      os_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_version_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_client_id();
      client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
    }
    if (cached_has_bits & 0x00000020u) {
      is_intel_ = from.is_intel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SwitchDevicesReq::CopyFrom(const SwitchDevicesReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.Switch.SwitchDevicesReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchDevicesReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void SwitchDevicesReq::Swap(SwitchDevicesReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SwitchDevicesReq::InternalSwap(SwitchDevicesReq* other) {
  using std::swap;
  browser_name_.Swap(&other->browser_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  browser_version_.Swap(&other->browser_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  os_name_.Swap(&other->os_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  os_version_.Swap(&other->os_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_id_.Swap(&other->client_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_intel_, other->is_intel_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SwitchDevicesReq::GetTypeName() const {
  return "PTP.Switch.SwitchDevicesReq";
}


// ===================================================================

void SwitchDevicesNotify::InitAsDefaultInstance() {
}
void SwitchDevicesNotify::clear_devices() {
  devices_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SwitchDevicesNotify::kDevicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SwitchDevicesNotify::SwitchDevicesNotify()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PTP_2eSwitch_2eproto::scc_info_SwitchDevicesNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PTP.Switch.SwitchDevicesNotify)
}
SwitchDevicesNotify::SwitchDevicesNotify(const SwitchDevicesNotify& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PTP.Switch.SwitchDevicesNotify)
}

void SwitchDevicesNotify::SharedCtor() {
}

SwitchDevicesNotify::~SwitchDevicesNotify() {
  // @@protoc_insertion_point(destructor:PTP.Switch.SwitchDevicesNotify)
  SharedDtor();
}

void SwitchDevicesNotify::SharedDtor() {
}

void SwitchDevicesNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwitchDevicesNotify& SwitchDevicesNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PTP_2eSwitch_2eproto::scc_info_SwitchDevicesNotify.base);
  return *internal_default_instance();
}


void SwitchDevicesNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.Switch.SwitchDevicesNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SwitchDevicesNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PTP.Switch.SwitchDevicesNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PTP.Common.DevicesInfo devices = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_devices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PTP.Switch.SwitchDevicesNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PTP.Switch.SwitchDevicesNotify)
  return false;
#undef DO_
}

void SwitchDevicesNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PTP.Switch.SwitchDevicesNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PTP.Common.DevicesInfo devices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->devices_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->devices(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PTP.Switch.SwitchDevicesNotify)
}

size_t SwitchDevicesNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.Switch.SwitchDevicesNotify)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .PTP.Common.DevicesInfo devices = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->devices_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->devices(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwitchDevicesNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SwitchDevicesNotify*>(&from));
}

void SwitchDevicesNotify::MergeFrom(const SwitchDevicesNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PTP.Switch.SwitchDevicesNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
}

void SwitchDevicesNotify::CopyFrom(const SwitchDevicesNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.Switch.SwitchDevicesNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchDevicesNotify::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->devices())) return false;
  return true;
}

void SwitchDevicesNotify::Swap(SwitchDevicesNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SwitchDevicesNotify::InternalSwap(SwitchDevicesNotify* other) {
  using std::swap;
  CastToBase(&devices_)->InternalSwap(CastToBase(&other->devices_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SwitchDevicesNotify::GetTypeName() const {
  return "PTP.Switch.SwitchDevicesNotify";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Switch
}  // namespace PTP
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PTP::Switch::SwitchPtpReq* Arena::CreateMaybeMessage< ::PTP::Switch::SwitchPtpReq >(Arena* arena) {
  return Arena::CreateInternal< ::PTP::Switch::SwitchPtpReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PTP::Switch::SwitchPtpRes* Arena::CreateMaybeMessage< ::PTP::Switch::SwitchPtpRes >(Arena* arena) {
  return Arena::CreateInternal< ::PTP::Switch::SwitchPtpRes >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PTP::Switch::SwitchPtpNotify* Arena::CreateMaybeMessage< ::PTP::Switch::SwitchPtpNotify >(Arena* arena) {
  return Arena::CreateInternal< ::PTP::Switch::SwitchPtpNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PTP::Switch::SwitchDevicesReq* Arena::CreateMaybeMessage< ::PTP::Switch::SwitchDevicesReq >(Arena* arena) {
  return Arena::CreateInternal< ::PTP::Switch::SwitchDevicesReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PTP::Switch::SwitchDevicesNotify* Arena::CreateMaybeMessage< ::PTP::Switch::SwitchDevicesNotify >(Arena* arena) {
  return Arena::CreateInternal< ::PTP::Switch::SwitchDevicesNotify >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
