// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PTP.Switch.proto

#ifndef PROTOBUF_INCLUDED_PTP_2eSwitch_2eproto
#define PROTOBUF_INCLUDED_PTP_2eSwitch_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "PTP.Common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_PTP_2eSwitch_2eproto 

namespace protobuf_PTP_2eSwitch_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_PTP_2eSwitch_2eproto
namespace PTP {
namespace Switch {
class SwitchDevicesNotify;
class SwitchDevicesNotifyDefaultTypeInternal;
extern SwitchDevicesNotifyDefaultTypeInternal _SwitchDevicesNotify_default_instance_;
class SwitchDevicesReq;
class SwitchDevicesReqDefaultTypeInternal;
extern SwitchDevicesReqDefaultTypeInternal _SwitchDevicesReq_default_instance_;
class SwitchPtpNotify;
class SwitchPtpNotifyDefaultTypeInternal;
extern SwitchPtpNotifyDefaultTypeInternal _SwitchPtpNotify_default_instance_;
class SwitchPtpReq;
class SwitchPtpReqDefaultTypeInternal;
extern SwitchPtpReqDefaultTypeInternal _SwitchPtpReq_default_instance_;
class SwitchPtpRes;
class SwitchPtpResDefaultTypeInternal;
extern SwitchPtpResDefaultTypeInternal _SwitchPtpRes_default_instance_;
}  // namespace Switch
}  // namespace PTP
namespace google {
namespace protobuf {
template<> ::PTP::Switch::SwitchDevicesNotify* Arena::CreateMaybeMessage<::PTP::Switch::SwitchDevicesNotify>(Arena*);
template<> ::PTP::Switch::SwitchDevicesReq* Arena::CreateMaybeMessage<::PTP::Switch::SwitchDevicesReq>(Arena*);
template<> ::PTP::Switch::SwitchPtpNotify* Arena::CreateMaybeMessage<::PTP::Switch::SwitchPtpNotify>(Arena*);
template<> ::PTP::Switch::SwitchPtpReq* Arena::CreateMaybeMessage<::PTP::Switch::SwitchPtpReq>(Arena*);
template<> ::PTP::Switch::SwitchPtpRes* Arena::CreateMaybeMessage<::PTP::Switch::SwitchPtpRes>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace PTP {
namespace Switch {

// ===================================================================

class SwitchPtpReq : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Switch.SwitchPtpReq) */ {
 public:
  SwitchPtpReq();
  virtual ~SwitchPtpReq();

  SwitchPtpReq(const SwitchPtpReq& from);

  inline SwitchPtpReq& operator=(const SwitchPtpReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SwitchPtpReq(SwitchPtpReq&& from) noexcept
    : SwitchPtpReq() {
    *this = ::std::move(from);
  }

  inline SwitchPtpReq& operator=(SwitchPtpReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SwitchPtpReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SwitchPtpReq* internal_default_instance() {
    return reinterpret_cast<const SwitchPtpReq*>(
               &_SwitchPtpReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SwitchPtpReq* other);
  friend void swap(SwitchPtpReq& a, SwitchPtpReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SwitchPtpReq* New() const final {
    return CreateMaybeMessage<SwitchPtpReq>(NULL);
  }

  SwitchPtpReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SwitchPtpReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SwitchPtpReq& from);
  void MergeFrom(const SwitchPtpReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SwitchPtpReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string to_adr = 1;
  bool has_to_adr() const;
  void clear_to_adr();
  static const int kToAdrFieldNumber = 1;
  const ::std::string& to_adr() const;
  void set_to_adr(const ::std::string& value);
  #if LANG_CXX11
  void set_to_adr(::std::string&& value);
  #endif
  void set_to_adr(const char* value);
  void set_to_adr(const char* value, size_t size);
  ::std::string* mutable_to_adr();
  ::std::string* release_to_adr();
  void set_allocated_to_adr(::std::string* to_adr);

  // required string data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // required .PTP.Common.SwitchType switch_type = 3;
  bool has_switch_type() const;
  void clear_switch_type();
  static const int kSwitchTypeFieldNumber = 3;
  ::PTP::Common::SwitchType switch_type() const;
  void set_switch_type(::PTP::Common::SwitchType value);

  // @@protoc_insertion_point(class_scope:PTP.Switch.SwitchPtpReq)
 private:
  void set_has_to_adr();
  void clear_has_to_adr();
  void set_has_data();
  void clear_has_data();
  void set_has_switch_type();
  void clear_has_switch_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr to_adr_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int switch_type_;
  friend struct ::protobuf_PTP_2eSwitch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SwitchPtpRes : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Switch.SwitchPtpRes) */ {
 public:
  SwitchPtpRes();
  virtual ~SwitchPtpRes();

  SwitchPtpRes(const SwitchPtpRes& from);

  inline SwitchPtpRes& operator=(const SwitchPtpRes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SwitchPtpRes(SwitchPtpRes&& from) noexcept
    : SwitchPtpRes() {
    *this = ::std::move(from);
  }

  inline SwitchPtpRes& operator=(SwitchPtpRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SwitchPtpRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SwitchPtpRes* internal_default_instance() {
    return reinterpret_cast<const SwitchPtpRes*>(
               &_SwitchPtpRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SwitchPtpRes* other);
  friend void swap(SwitchPtpRes& a, SwitchPtpRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SwitchPtpRes* New() const final {
    return CreateMaybeMessage<SwitchPtpRes>(NULL);
  }

  SwitchPtpRes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SwitchPtpRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SwitchPtpRes& from);
  void MergeFrom(const SwitchPtpRes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SwitchPtpRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .PTP.Common.ERR error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);

  // @@protoc_insertion_point(class_scope:PTP.Switch.SwitchPtpRes)
 private:
  void set_has_error();
  void clear_has_error();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int error_;
  friend struct ::protobuf_PTP_2eSwitch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SwitchPtpNotify : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Switch.SwitchPtpNotify) */ {
 public:
  SwitchPtpNotify();
  virtual ~SwitchPtpNotify();

  SwitchPtpNotify(const SwitchPtpNotify& from);

  inline SwitchPtpNotify& operator=(const SwitchPtpNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SwitchPtpNotify(SwitchPtpNotify&& from) noexcept
    : SwitchPtpNotify() {
    *this = ::std::move(from);
  }

  inline SwitchPtpNotify& operator=(SwitchPtpNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SwitchPtpNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SwitchPtpNotify* internal_default_instance() {
    return reinterpret_cast<const SwitchPtpNotify*>(
               &_SwitchPtpNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SwitchPtpNotify* other);
  friend void swap(SwitchPtpNotify& a, SwitchPtpNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SwitchPtpNotify* New() const final {
    return CreateMaybeMessage<SwitchPtpNotify>(NULL);
  }

  SwitchPtpNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SwitchPtpNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SwitchPtpNotify& from);
  void MergeFrom(const SwitchPtpNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SwitchPtpNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string from_adr = 1;
  bool has_from_adr() const;
  void clear_from_adr();
  static const int kFromAdrFieldNumber = 1;
  const ::std::string& from_adr() const;
  void set_from_adr(const ::std::string& value);
  #if LANG_CXX11
  void set_from_adr(::std::string&& value);
  #endif
  void set_from_adr(const char* value);
  void set_from_adr(const char* value, size_t size);
  ::std::string* mutable_from_adr();
  ::std::string* release_from_adr();
  void set_allocated_from_adr(::std::string* from_adr);

  // required string data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // required .PTP.Common.SwitchType switch_type = 3;
  bool has_switch_type() const;
  void clear_switch_type();
  static const int kSwitchTypeFieldNumber = 3;
  ::PTP::Common::SwitchType switch_type() const;
  void set_switch_type(::PTP::Common::SwitchType value);

  // @@protoc_insertion_point(class_scope:PTP.Switch.SwitchPtpNotify)
 private:
  void set_has_from_adr();
  void clear_has_from_adr();
  void set_has_data();
  void clear_has_data();
  void set_has_switch_type();
  void clear_has_switch_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr from_adr_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int switch_type_;
  friend struct ::protobuf_PTP_2eSwitch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SwitchDevicesReq : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Switch.SwitchDevicesReq) */ {
 public:
  SwitchDevicesReq();
  virtual ~SwitchDevicesReq();

  SwitchDevicesReq(const SwitchDevicesReq& from);

  inline SwitchDevicesReq& operator=(const SwitchDevicesReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SwitchDevicesReq(SwitchDevicesReq&& from) noexcept
    : SwitchDevicesReq() {
    *this = ::std::move(from);
  }

  inline SwitchDevicesReq& operator=(SwitchDevicesReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SwitchDevicesReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SwitchDevicesReq* internal_default_instance() {
    return reinterpret_cast<const SwitchDevicesReq*>(
               &_SwitchDevicesReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SwitchDevicesReq* other);
  friend void swap(SwitchDevicesReq& a, SwitchDevicesReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SwitchDevicesReq* New() const final {
    return CreateMaybeMessage<SwitchDevicesReq>(NULL);
  }

  SwitchDevicesReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SwitchDevicesReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SwitchDevicesReq& from);
  void MergeFrom(const SwitchDevicesReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SwitchDevicesReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string browser_name = 1;
  bool has_browser_name() const;
  void clear_browser_name();
  static const int kBrowserNameFieldNumber = 1;
  const ::std::string& browser_name() const;
  void set_browser_name(const ::std::string& value);
  #if LANG_CXX11
  void set_browser_name(::std::string&& value);
  #endif
  void set_browser_name(const char* value);
  void set_browser_name(const char* value, size_t size);
  ::std::string* mutable_browser_name();
  ::std::string* release_browser_name();
  void set_allocated_browser_name(::std::string* browser_name);

  // required string browser_version = 2;
  bool has_browser_version() const;
  void clear_browser_version();
  static const int kBrowserVersionFieldNumber = 2;
  const ::std::string& browser_version() const;
  void set_browser_version(const ::std::string& value);
  #if LANG_CXX11
  void set_browser_version(::std::string&& value);
  #endif
  void set_browser_version(const char* value);
  void set_browser_version(const char* value, size_t size);
  ::std::string* mutable_browser_version();
  ::std::string* release_browser_version();
  void set_allocated_browser_version(::std::string* browser_version);

  // required string os_name = 3;
  bool has_os_name() const;
  void clear_os_name();
  static const int kOsNameFieldNumber = 3;
  const ::std::string& os_name() const;
  void set_os_name(const ::std::string& value);
  #if LANG_CXX11
  void set_os_name(::std::string&& value);
  #endif
  void set_os_name(const char* value);
  void set_os_name(const char* value, size_t size);
  ::std::string* mutable_os_name();
  ::std::string* release_os_name();
  void set_allocated_os_name(::std::string* os_name);

  // required string os_version = 4;
  bool has_os_version() const;
  void clear_os_version();
  static const int kOsVersionFieldNumber = 4;
  const ::std::string& os_version() const;
  void set_os_version(const ::std::string& value);
  #if LANG_CXX11
  void set_os_version(::std::string&& value);
  #endif
  void set_os_version(const char* value);
  void set_os_version(const char* value, size_t size);
  ::std::string* mutable_os_version();
  ::std::string* release_os_version();
  void set_allocated_os_version(::std::string* os_version);

  // required string client_id = 9;
  bool has_client_id() const;
  void clear_client_id();
  static const int kClientIdFieldNumber = 9;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // required bool is_intel = 5;
  bool has_is_intel() const;
  void clear_is_intel();
  static const int kIsIntelFieldNumber = 5;
  bool is_intel() const;
  void set_is_intel(bool value);

  // @@protoc_insertion_point(class_scope:PTP.Switch.SwitchDevicesReq)
 private:
  void set_has_browser_name();
  void clear_has_browser_name();
  void set_has_browser_version();
  void clear_has_browser_version();
  void set_has_os_name();
  void clear_has_os_name();
  void set_has_os_version();
  void clear_has_os_version();
  void set_has_is_intel();
  void clear_has_is_intel();
  void set_has_client_id();
  void clear_has_client_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr browser_name_;
  ::google::protobuf::internal::ArenaStringPtr browser_version_;
  ::google::protobuf::internal::ArenaStringPtr os_name_;
  ::google::protobuf::internal::ArenaStringPtr os_version_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  bool is_intel_;
  friend struct ::protobuf_PTP_2eSwitch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SwitchDevicesNotify : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Switch.SwitchDevicesNotify) */ {
 public:
  SwitchDevicesNotify();
  virtual ~SwitchDevicesNotify();

  SwitchDevicesNotify(const SwitchDevicesNotify& from);

  inline SwitchDevicesNotify& operator=(const SwitchDevicesNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SwitchDevicesNotify(SwitchDevicesNotify&& from) noexcept
    : SwitchDevicesNotify() {
    *this = ::std::move(from);
  }

  inline SwitchDevicesNotify& operator=(SwitchDevicesNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SwitchDevicesNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SwitchDevicesNotify* internal_default_instance() {
    return reinterpret_cast<const SwitchDevicesNotify*>(
               &_SwitchDevicesNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SwitchDevicesNotify* other);
  friend void swap(SwitchDevicesNotify& a, SwitchDevicesNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SwitchDevicesNotify* New() const final {
    return CreateMaybeMessage<SwitchDevicesNotify>(NULL);
  }

  SwitchDevicesNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SwitchDevicesNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SwitchDevicesNotify& from);
  void MergeFrom(const SwitchDevicesNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SwitchDevicesNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PTP.Common.DevicesInfo devices = 1;
  int devices_size() const;
  void clear_devices();
  static const int kDevicesFieldNumber = 1;
  ::PTP::Common::DevicesInfo* mutable_devices(int index);
  ::google::protobuf::RepeatedPtrField< ::PTP::Common::DevicesInfo >*
      mutable_devices();
  const ::PTP::Common::DevicesInfo& devices(int index) const;
  ::PTP::Common::DevicesInfo* add_devices();
  const ::google::protobuf::RepeatedPtrField< ::PTP::Common::DevicesInfo >&
      devices() const;

  // @@protoc_insertion_point(class_scope:PTP.Switch.SwitchDevicesNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::PTP::Common::DevicesInfo > devices_;
  friend struct ::protobuf_PTP_2eSwitch_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SwitchPtpReq

// required string to_adr = 1;
inline bool SwitchPtpReq::has_to_adr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SwitchPtpReq::set_has_to_adr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SwitchPtpReq::clear_has_to_adr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SwitchPtpReq::clear_to_adr() {
  to_adr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_adr();
}
inline const ::std::string& SwitchPtpReq::to_adr() const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchPtpReq.to_adr)
  return to_adr_.GetNoArena();
}
inline void SwitchPtpReq::set_to_adr(const ::std::string& value) {
  set_has_to_adr();
  to_adr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.Switch.SwitchPtpReq.to_adr)
}
#if LANG_CXX11
inline void SwitchPtpReq::set_to_adr(::std::string&& value) {
  set_has_to_adr();
  to_adr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.Switch.SwitchPtpReq.to_adr)
}
#endif
inline void SwitchPtpReq::set_to_adr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to_adr();
  to_adr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.Switch.SwitchPtpReq.to_adr)
}
inline void SwitchPtpReq::set_to_adr(const char* value, size_t size) {
  set_has_to_adr();
  to_adr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.Switch.SwitchPtpReq.to_adr)
}
inline ::std::string* SwitchPtpReq::mutable_to_adr() {
  set_has_to_adr();
  // @@protoc_insertion_point(field_mutable:PTP.Switch.SwitchPtpReq.to_adr)
  return to_adr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SwitchPtpReq::release_to_adr() {
  // @@protoc_insertion_point(field_release:PTP.Switch.SwitchPtpReq.to_adr)
  if (!has_to_adr()) {
    return NULL;
  }
  clear_has_to_adr();
  return to_adr_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SwitchPtpReq::set_allocated_to_adr(::std::string* to_adr) {
  if (to_adr != NULL) {
    set_has_to_adr();
  } else {
    clear_has_to_adr();
  }
  to_adr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_adr);
  // @@protoc_insertion_point(field_set_allocated:PTP.Switch.SwitchPtpReq.to_adr)
}

// required string data = 2;
inline bool SwitchPtpReq::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SwitchPtpReq::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SwitchPtpReq::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SwitchPtpReq::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& SwitchPtpReq::data() const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchPtpReq.data)
  return data_.GetNoArena();
}
inline void SwitchPtpReq::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.Switch.SwitchPtpReq.data)
}
#if LANG_CXX11
inline void SwitchPtpReq::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.Switch.SwitchPtpReq.data)
}
#endif
inline void SwitchPtpReq::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.Switch.SwitchPtpReq.data)
}
inline void SwitchPtpReq::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.Switch.SwitchPtpReq.data)
}
inline ::std::string* SwitchPtpReq::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:PTP.Switch.SwitchPtpReq.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SwitchPtpReq::release_data() {
  // @@protoc_insertion_point(field_release:PTP.Switch.SwitchPtpReq.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SwitchPtpReq::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:PTP.Switch.SwitchPtpReq.data)
}

// required .PTP.Common.SwitchType switch_type = 3;
inline bool SwitchPtpReq::has_switch_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SwitchPtpReq::set_has_switch_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SwitchPtpReq::clear_has_switch_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SwitchPtpReq::clear_switch_type() {
  switch_type_ = 1;
  clear_has_switch_type();
}
inline ::PTP::Common::SwitchType SwitchPtpReq::switch_type() const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchPtpReq.switch_type)
  return static_cast< ::PTP::Common::SwitchType >(switch_type_);
}
inline void SwitchPtpReq::set_switch_type(::PTP::Common::SwitchType value) {
  assert(::PTP::Common::SwitchType_IsValid(value));
  set_has_switch_type();
  switch_type_ = value;
  // @@protoc_insertion_point(field_set:PTP.Switch.SwitchPtpReq.switch_type)
}

// -------------------------------------------------------------------

// SwitchPtpRes

// required .PTP.Common.ERR error = 1;
inline bool SwitchPtpRes::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SwitchPtpRes::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SwitchPtpRes::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SwitchPtpRes::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::PTP::Common::ERR SwitchPtpRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchPtpRes.error)
  return static_cast< ::PTP::Common::ERR >(error_);
}
inline void SwitchPtpRes::set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:PTP.Switch.SwitchPtpRes.error)
}

// -------------------------------------------------------------------

// SwitchPtpNotify

// required string from_adr = 1;
inline bool SwitchPtpNotify::has_from_adr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SwitchPtpNotify::set_has_from_adr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SwitchPtpNotify::clear_has_from_adr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SwitchPtpNotify::clear_from_adr() {
  from_adr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_adr();
}
inline const ::std::string& SwitchPtpNotify::from_adr() const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchPtpNotify.from_adr)
  return from_adr_.GetNoArena();
}
inline void SwitchPtpNotify::set_from_adr(const ::std::string& value) {
  set_has_from_adr();
  from_adr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.Switch.SwitchPtpNotify.from_adr)
}
#if LANG_CXX11
inline void SwitchPtpNotify::set_from_adr(::std::string&& value) {
  set_has_from_adr();
  from_adr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.Switch.SwitchPtpNotify.from_adr)
}
#endif
inline void SwitchPtpNotify::set_from_adr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from_adr();
  from_adr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.Switch.SwitchPtpNotify.from_adr)
}
inline void SwitchPtpNotify::set_from_adr(const char* value, size_t size) {
  set_has_from_adr();
  from_adr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.Switch.SwitchPtpNotify.from_adr)
}
inline ::std::string* SwitchPtpNotify::mutable_from_adr() {
  set_has_from_adr();
  // @@protoc_insertion_point(field_mutable:PTP.Switch.SwitchPtpNotify.from_adr)
  return from_adr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SwitchPtpNotify::release_from_adr() {
  // @@protoc_insertion_point(field_release:PTP.Switch.SwitchPtpNotify.from_adr)
  if (!has_from_adr()) {
    return NULL;
  }
  clear_has_from_adr();
  return from_adr_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SwitchPtpNotify::set_allocated_from_adr(::std::string* from_adr) {
  if (from_adr != NULL) {
    set_has_from_adr();
  } else {
    clear_has_from_adr();
  }
  from_adr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_adr);
  // @@protoc_insertion_point(field_set_allocated:PTP.Switch.SwitchPtpNotify.from_adr)
}

// required string data = 2;
inline bool SwitchPtpNotify::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SwitchPtpNotify::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SwitchPtpNotify::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SwitchPtpNotify::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& SwitchPtpNotify::data() const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchPtpNotify.data)
  return data_.GetNoArena();
}
inline void SwitchPtpNotify::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.Switch.SwitchPtpNotify.data)
}
#if LANG_CXX11
inline void SwitchPtpNotify::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.Switch.SwitchPtpNotify.data)
}
#endif
inline void SwitchPtpNotify::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.Switch.SwitchPtpNotify.data)
}
inline void SwitchPtpNotify::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.Switch.SwitchPtpNotify.data)
}
inline ::std::string* SwitchPtpNotify::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:PTP.Switch.SwitchPtpNotify.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SwitchPtpNotify::release_data() {
  // @@protoc_insertion_point(field_release:PTP.Switch.SwitchPtpNotify.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SwitchPtpNotify::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:PTP.Switch.SwitchPtpNotify.data)
}

// required .PTP.Common.SwitchType switch_type = 3;
inline bool SwitchPtpNotify::has_switch_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SwitchPtpNotify::set_has_switch_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SwitchPtpNotify::clear_has_switch_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SwitchPtpNotify::clear_switch_type() {
  switch_type_ = 1;
  clear_has_switch_type();
}
inline ::PTP::Common::SwitchType SwitchPtpNotify::switch_type() const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchPtpNotify.switch_type)
  return static_cast< ::PTP::Common::SwitchType >(switch_type_);
}
inline void SwitchPtpNotify::set_switch_type(::PTP::Common::SwitchType value) {
  assert(::PTP::Common::SwitchType_IsValid(value));
  set_has_switch_type();
  switch_type_ = value;
  // @@protoc_insertion_point(field_set:PTP.Switch.SwitchPtpNotify.switch_type)
}

// -------------------------------------------------------------------

// SwitchDevicesReq

// required string browser_name = 1;
inline bool SwitchDevicesReq::has_browser_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SwitchDevicesReq::set_has_browser_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SwitchDevicesReq::clear_has_browser_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SwitchDevicesReq::clear_browser_name() {
  browser_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_browser_name();
}
inline const ::std::string& SwitchDevicesReq::browser_name() const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchDevicesReq.browser_name)
  return browser_name_.GetNoArena();
}
inline void SwitchDevicesReq::set_browser_name(const ::std::string& value) {
  set_has_browser_name();
  browser_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.Switch.SwitchDevicesReq.browser_name)
}
#if LANG_CXX11
inline void SwitchDevicesReq::set_browser_name(::std::string&& value) {
  set_has_browser_name();
  browser_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.Switch.SwitchDevicesReq.browser_name)
}
#endif
inline void SwitchDevicesReq::set_browser_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_browser_name();
  browser_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.Switch.SwitchDevicesReq.browser_name)
}
inline void SwitchDevicesReq::set_browser_name(const char* value, size_t size) {
  set_has_browser_name();
  browser_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.Switch.SwitchDevicesReq.browser_name)
}
inline ::std::string* SwitchDevicesReq::mutable_browser_name() {
  set_has_browser_name();
  // @@protoc_insertion_point(field_mutable:PTP.Switch.SwitchDevicesReq.browser_name)
  return browser_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SwitchDevicesReq::release_browser_name() {
  // @@protoc_insertion_point(field_release:PTP.Switch.SwitchDevicesReq.browser_name)
  if (!has_browser_name()) {
    return NULL;
  }
  clear_has_browser_name();
  return browser_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SwitchDevicesReq::set_allocated_browser_name(::std::string* browser_name) {
  if (browser_name != NULL) {
    set_has_browser_name();
  } else {
    clear_has_browser_name();
  }
  browser_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), browser_name);
  // @@protoc_insertion_point(field_set_allocated:PTP.Switch.SwitchDevicesReq.browser_name)
}

// required string browser_version = 2;
inline bool SwitchDevicesReq::has_browser_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SwitchDevicesReq::set_has_browser_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SwitchDevicesReq::clear_has_browser_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SwitchDevicesReq::clear_browser_version() {
  browser_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_browser_version();
}
inline const ::std::string& SwitchDevicesReq::browser_version() const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchDevicesReq.browser_version)
  return browser_version_.GetNoArena();
}
inline void SwitchDevicesReq::set_browser_version(const ::std::string& value) {
  set_has_browser_version();
  browser_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.Switch.SwitchDevicesReq.browser_version)
}
#if LANG_CXX11
inline void SwitchDevicesReq::set_browser_version(::std::string&& value) {
  set_has_browser_version();
  browser_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.Switch.SwitchDevicesReq.browser_version)
}
#endif
inline void SwitchDevicesReq::set_browser_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_browser_version();
  browser_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.Switch.SwitchDevicesReq.browser_version)
}
inline void SwitchDevicesReq::set_browser_version(const char* value, size_t size) {
  set_has_browser_version();
  browser_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.Switch.SwitchDevicesReq.browser_version)
}
inline ::std::string* SwitchDevicesReq::mutable_browser_version() {
  set_has_browser_version();
  // @@protoc_insertion_point(field_mutable:PTP.Switch.SwitchDevicesReq.browser_version)
  return browser_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SwitchDevicesReq::release_browser_version() {
  // @@protoc_insertion_point(field_release:PTP.Switch.SwitchDevicesReq.browser_version)
  if (!has_browser_version()) {
    return NULL;
  }
  clear_has_browser_version();
  return browser_version_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SwitchDevicesReq::set_allocated_browser_version(::std::string* browser_version) {
  if (browser_version != NULL) {
    set_has_browser_version();
  } else {
    clear_has_browser_version();
  }
  browser_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), browser_version);
  // @@protoc_insertion_point(field_set_allocated:PTP.Switch.SwitchDevicesReq.browser_version)
}

// required string os_name = 3;
inline bool SwitchDevicesReq::has_os_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SwitchDevicesReq::set_has_os_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SwitchDevicesReq::clear_has_os_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SwitchDevicesReq::clear_os_name() {
  os_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_os_name();
}
inline const ::std::string& SwitchDevicesReq::os_name() const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchDevicesReq.os_name)
  return os_name_.GetNoArena();
}
inline void SwitchDevicesReq::set_os_name(const ::std::string& value) {
  set_has_os_name();
  os_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.Switch.SwitchDevicesReq.os_name)
}
#if LANG_CXX11
inline void SwitchDevicesReq::set_os_name(::std::string&& value) {
  set_has_os_name();
  os_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.Switch.SwitchDevicesReq.os_name)
}
#endif
inline void SwitchDevicesReq::set_os_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_os_name();
  os_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.Switch.SwitchDevicesReq.os_name)
}
inline void SwitchDevicesReq::set_os_name(const char* value, size_t size) {
  set_has_os_name();
  os_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.Switch.SwitchDevicesReq.os_name)
}
inline ::std::string* SwitchDevicesReq::mutable_os_name() {
  set_has_os_name();
  // @@protoc_insertion_point(field_mutable:PTP.Switch.SwitchDevicesReq.os_name)
  return os_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SwitchDevicesReq::release_os_name() {
  // @@protoc_insertion_point(field_release:PTP.Switch.SwitchDevicesReq.os_name)
  if (!has_os_name()) {
    return NULL;
  }
  clear_has_os_name();
  return os_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SwitchDevicesReq::set_allocated_os_name(::std::string* os_name) {
  if (os_name != NULL) {
    set_has_os_name();
  } else {
    clear_has_os_name();
  }
  os_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_name);
  // @@protoc_insertion_point(field_set_allocated:PTP.Switch.SwitchDevicesReq.os_name)
}

// required string os_version = 4;
inline bool SwitchDevicesReq::has_os_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SwitchDevicesReq::set_has_os_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SwitchDevicesReq::clear_has_os_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SwitchDevicesReq::clear_os_version() {
  os_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_os_version();
}
inline const ::std::string& SwitchDevicesReq::os_version() const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchDevicesReq.os_version)
  return os_version_.GetNoArena();
}
inline void SwitchDevicesReq::set_os_version(const ::std::string& value) {
  set_has_os_version();
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.Switch.SwitchDevicesReq.os_version)
}
#if LANG_CXX11
inline void SwitchDevicesReq::set_os_version(::std::string&& value) {
  set_has_os_version();
  os_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.Switch.SwitchDevicesReq.os_version)
}
#endif
inline void SwitchDevicesReq::set_os_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_os_version();
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.Switch.SwitchDevicesReq.os_version)
}
inline void SwitchDevicesReq::set_os_version(const char* value, size_t size) {
  set_has_os_version();
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.Switch.SwitchDevicesReq.os_version)
}
inline ::std::string* SwitchDevicesReq::mutable_os_version() {
  set_has_os_version();
  // @@protoc_insertion_point(field_mutable:PTP.Switch.SwitchDevicesReq.os_version)
  return os_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SwitchDevicesReq::release_os_version() {
  // @@protoc_insertion_point(field_release:PTP.Switch.SwitchDevicesReq.os_version)
  if (!has_os_version()) {
    return NULL;
  }
  clear_has_os_version();
  return os_version_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SwitchDevicesReq::set_allocated_os_version(::std::string* os_version) {
  if (os_version != NULL) {
    set_has_os_version();
  } else {
    clear_has_os_version();
  }
  os_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_version);
  // @@protoc_insertion_point(field_set_allocated:PTP.Switch.SwitchDevicesReq.os_version)
}

// required bool is_intel = 5;
inline bool SwitchDevicesReq::has_is_intel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SwitchDevicesReq::set_has_is_intel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SwitchDevicesReq::clear_has_is_intel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SwitchDevicesReq::clear_is_intel() {
  is_intel_ = false;
  clear_has_is_intel();
}
inline bool SwitchDevicesReq::is_intel() const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchDevicesReq.is_intel)
  return is_intel_;
}
inline void SwitchDevicesReq::set_is_intel(bool value) {
  set_has_is_intel();
  is_intel_ = value;
  // @@protoc_insertion_point(field_set:PTP.Switch.SwitchDevicesReq.is_intel)
}

// required string client_id = 9;
inline bool SwitchDevicesReq::has_client_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SwitchDevicesReq::set_has_client_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SwitchDevicesReq::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SwitchDevicesReq::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_id();
}
inline const ::std::string& SwitchDevicesReq::client_id() const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchDevicesReq.client_id)
  return client_id_.GetNoArena();
}
inline void SwitchDevicesReq::set_client_id(const ::std::string& value) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.Switch.SwitchDevicesReq.client_id)
}
#if LANG_CXX11
inline void SwitchDevicesReq::set_client_id(::std::string&& value) {
  set_has_client_id();
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.Switch.SwitchDevicesReq.client_id)
}
#endif
inline void SwitchDevicesReq::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.Switch.SwitchDevicesReq.client_id)
}
inline void SwitchDevicesReq::set_client_id(const char* value, size_t size) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.Switch.SwitchDevicesReq.client_id)
}
inline ::std::string* SwitchDevicesReq::mutable_client_id() {
  set_has_client_id();
  // @@protoc_insertion_point(field_mutable:PTP.Switch.SwitchDevicesReq.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SwitchDevicesReq::release_client_id() {
  // @@protoc_insertion_point(field_release:PTP.Switch.SwitchDevicesReq.client_id)
  if (!has_client_id()) {
    return NULL;
  }
  clear_has_client_id();
  return client_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SwitchDevicesReq::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    set_has_client_id();
  } else {
    clear_has_client_id();
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:PTP.Switch.SwitchDevicesReq.client_id)
}

// -------------------------------------------------------------------

// SwitchDevicesNotify

// repeated .PTP.Common.DevicesInfo devices = 1;
inline int SwitchDevicesNotify::devices_size() const {
  return devices_.size();
}
inline ::PTP::Common::DevicesInfo* SwitchDevicesNotify::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:PTP.Switch.SwitchDevicesNotify.devices)
  return devices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PTP::Common::DevicesInfo >*
SwitchDevicesNotify::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:PTP.Switch.SwitchDevicesNotify.devices)
  return &devices_;
}
inline const ::PTP::Common::DevicesInfo& SwitchDevicesNotify::devices(int index) const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchDevicesNotify.devices)
  return devices_.Get(index);
}
inline ::PTP::Common::DevicesInfo* SwitchDevicesNotify::add_devices() {
  // @@protoc_insertion_point(field_add:PTP.Switch.SwitchDevicesNotify.devices)
  return devices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PTP::Common::DevicesInfo >&
SwitchDevicesNotify::devices() const {
  // @@protoc_insertion_point(field_list:PTP.Switch.SwitchDevicesNotify.devices)
  return devices_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Switch
}  // namespace PTP

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_PTP_2eSwitch_2eproto
