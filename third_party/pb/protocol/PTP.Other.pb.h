// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PTP.Other.proto

#ifndef PROTOBUF_INCLUDED_PTP_2eOther_2eproto
#define PROTOBUF_INCLUDED_PTP_2eOther_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "PTP.Common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_PTP_2eOther_2eproto 

namespace protobuf_PTP_2eOther_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_PTP_2eOther_2eproto
namespace PTP {
namespace Other {
class CaptchaReq;
class CaptchaReqDefaultTypeInternal;
extern CaptchaReqDefaultTypeInternal _CaptchaReq_default_instance_;
class CaptchaRes;
class CaptchaResDefaultTypeInternal;
extern CaptchaResDefaultTypeInternal _CaptchaRes_default_instance_;
class HeartBeatNotify;
class HeartBeatNotifyDefaultTypeInternal;
extern HeartBeatNotifyDefaultTypeInternal _HeartBeatNotify_default_instance_;
}  // namespace Other
}  // namespace PTP
namespace google {
namespace protobuf {
template<> ::PTP::Other::CaptchaReq* Arena::CreateMaybeMessage<::PTP::Other::CaptchaReq>(Arena*);
template<> ::PTP::Other::CaptchaRes* Arena::CreateMaybeMessage<::PTP::Other::CaptchaRes>(Arena*);
template<> ::PTP::Other::HeartBeatNotify* Arena::CreateMaybeMessage<::PTP::Other::HeartBeatNotify>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace PTP {
namespace Other {

// ===================================================================

class HeartBeatNotify : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Other.HeartBeatNotify) */ {
 public:
  HeartBeatNotify();
  virtual ~HeartBeatNotify();

  HeartBeatNotify(const HeartBeatNotify& from);

  inline HeartBeatNotify& operator=(const HeartBeatNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeartBeatNotify(HeartBeatNotify&& from) noexcept
    : HeartBeatNotify() {
    *this = ::std::move(from);
  }

  inline HeartBeatNotify& operator=(HeartBeatNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const HeartBeatNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeartBeatNotify* internal_default_instance() {
    return reinterpret_cast<const HeartBeatNotify*>(
               &_HeartBeatNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(HeartBeatNotify* other);
  friend void swap(HeartBeatNotify& a, HeartBeatNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeartBeatNotify* New() const final {
    return CreateMaybeMessage<HeartBeatNotify>(NULL);
  }

  HeartBeatNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HeartBeatNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const HeartBeatNotify& from);
  void MergeFrom(const HeartBeatNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeartBeatNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PTP.Other.HeartBeatNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_PTP_2eOther_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CaptchaReq : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Other.CaptchaReq) */ {
 public:
  CaptchaReq();
  virtual ~CaptchaReq();

  CaptchaReq(const CaptchaReq& from);

  inline CaptchaReq& operator=(const CaptchaReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CaptchaReq(CaptchaReq&& from) noexcept
    : CaptchaReq() {
    *this = ::std::move(from);
  }

  inline CaptchaReq& operator=(CaptchaReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CaptchaReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CaptchaReq* internal_default_instance() {
    return reinterpret_cast<const CaptchaReq*>(
               &_CaptchaReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CaptchaReq* other);
  friend void swap(CaptchaReq& a, CaptchaReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CaptchaReq* New() const final {
    return CreateMaybeMessage<CaptchaReq>(NULL);
  }

  CaptchaReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CaptchaReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CaptchaReq& from);
  void MergeFrom(const CaptchaReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CaptchaReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PTP.Other.CaptchaReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_PTP_2eOther_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CaptchaRes : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Other.CaptchaRes) */ {
 public:
  CaptchaRes();
  virtual ~CaptchaRes();

  CaptchaRes(const CaptchaRes& from);

  inline CaptchaRes& operator=(const CaptchaRes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CaptchaRes(CaptchaRes&& from) noexcept
    : CaptchaRes() {
    *this = ::std::move(from);
  }

  inline CaptchaRes& operator=(CaptchaRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CaptchaRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CaptchaRes* internal_default_instance() {
    return reinterpret_cast<const CaptchaRes*>(
               &_CaptchaRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CaptchaRes* other);
  friend void swap(CaptchaRes& a, CaptchaRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CaptchaRes* New() const final {
    return CreateMaybeMessage<CaptchaRes>(NULL);
  }

  CaptchaRes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CaptchaRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CaptchaRes& from);
  void MergeFrom(const CaptchaRes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CaptchaRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string captcha = 1;
  bool has_captcha() const;
  void clear_captcha();
  static const int kCaptchaFieldNumber = 1;
  const ::std::string& captcha() const;
  void set_captcha(const ::std::string& value);
  #if LANG_CXX11
  void set_captcha(::std::string&& value);
  #endif
  void set_captcha(const char* value);
  void set_captcha(const char* value, size_t size);
  ::std::string* mutable_captcha();
  ::std::string* release_captcha();
  void set_allocated_captcha(::std::string* captcha);

  // required .PTP.Common.ERR error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);

  // @@protoc_insertion_point(class_scope:PTP.Other.CaptchaRes)
 private:
  void set_has_captcha();
  void clear_has_captcha();
  void set_has_error();
  void clear_has_error();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr captcha_;
  int error_;
  friend struct ::protobuf_PTP_2eOther_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HeartBeatNotify

// -------------------------------------------------------------------

// CaptchaReq

// -------------------------------------------------------------------

// CaptchaRes

// required string captcha = 1;
inline bool CaptchaRes::has_captcha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CaptchaRes::set_has_captcha() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CaptchaRes::clear_has_captcha() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CaptchaRes::clear_captcha() {
  captcha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_captcha();
}
inline const ::std::string& CaptchaRes::captcha() const {
  // @@protoc_insertion_point(field_get:PTP.Other.CaptchaRes.captcha)
  return captcha_.GetNoArena();
}
inline void CaptchaRes::set_captcha(const ::std::string& value) {
  set_has_captcha();
  captcha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.Other.CaptchaRes.captcha)
}
#if LANG_CXX11
inline void CaptchaRes::set_captcha(::std::string&& value) {
  set_has_captcha();
  captcha_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.Other.CaptchaRes.captcha)
}
#endif
inline void CaptchaRes::set_captcha(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_captcha();
  captcha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.Other.CaptchaRes.captcha)
}
inline void CaptchaRes::set_captcha(const char* value, size_t size) {
  set_has_captcha();
  captcha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.Other.CaptchaRes.captcha)
}
inline ::std::string* CaptchaRes::mutable_captcha() {
  set_has_captcha();
  // @@protoc_insertion_point(field_mutable:PTP.Other.CaptchaRes.captcha)
  return captcha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CaptchaRes::release_captcha() {
  // @@protoc_insertion_point(field_release:PTP.Other.CaptchaRes.captcha)
  if (!has_captcha()) {
    return NULL;
  }
  clear_has_captcha();
  return captcha_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CaptchaRes::set_allocated_captcha(::std::string* captcha) {
  if (captcha != NULL) {
    set_has_captcha();
  } else {
    clear_has_captcha();
  }
  captcha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), captcha);
  // @@protoc_insertion_point(field_set_allocated:PTP.Other.CaptchaRes.captcha)
}

// required .PTP.Common.ERR error = 2;
inline bool CaptchaRes::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CaptchaRes::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CaptchaRes::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CaptchaRes::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::PTP::Common::ERR CaptchaRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.Other.CaptchaRes.error)
  return static_cast< ::PTP::Common::ERR >(error_);
}
inline void CaptchaRes::set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:PTP.Other.CaptchaRes.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Other
}  // namespace PTP

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_PTP_2eOther_2eproto
