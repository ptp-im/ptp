// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PTP.Server.proto

#include "PTP.Server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_PTP_2eCommon_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PTP_2eCommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserInfo;
}  // namespace protobuf_PTP_2eCommon_2eproto
namespace PTP {
namespace Server {
class ServerLoginReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerLoginReq>
      _instance;
} _ServerLoginReq_default_instance_;
class ServerLoginResDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerLoginRes>
      _instance;
} _ServerLoginRes_default_instance_;
}  // namespace Server
}  // namespace PTP
namespace protobuf_PTP_2eServer_2eproto {
static void InitDefaultsServerLoginReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PTP::Server::_ServerLoginReq_default_instance_;
    new (ptr) ::PTP::Server::ServerLoginReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PTP::Server::ServerLoginReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServerLoginReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServerLoginReq}, {}};

static void InitDefaultsServerLoginRes() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PTP::Server::_ServerLoginRes_default_instance_;
    new (ptr) ::PTP::Server::ServerLoginRes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PTP::Server::ServerLoginRes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ServerLoginRes =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsServerLoginRes}, {
      &protobuf_PTP_2eCommon_2eproto::scc_info_UserInfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ServerLoginReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerLoginRes.base);
}

}  // namespace protobuf_PTP_2eServer_2eproto
namespace PTP {
namespace Server {

// ===================================================================

void ServerLoginReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerLoginReq::kAddressFieldNumber;
const int ServerLoginReq::kCaptchaFieldNumber;
const int ServerLoginReq::kSignFieldNumber;
const int ServerLoginReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerLoginReq::ServerLoginReq()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PTP_2eServer_2eproto::scc_info_ServerLoginReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PTP.Server.ServerLoginReq)
}
ServerLoginReq::ServerLoginReq(const ServerLoginReq& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  captcha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_captcha()) {
    captcha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.captcha_);
  }
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sign()) {
    sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_attach_data()) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  // @@protoc_insertion_point(copy_constructor:PTP.Server.ServerLoginReq)
}

void ServerLoginReq::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  captcha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ServerLoginReq::~ServerLoginReq() {
  // @@protoc_insertion_point(destructor:PTP.Server.ServerLoginReq)
  SharedDtor();
}

void ServerLoginReq::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  captcha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerLoginReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerLoginReq& ServerLoginReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PTP_2eServer_2eproto::scc_info_ServerLoginReq.base);
  return *internal_default_instance();
}


void ServerLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.Server.ServerLoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      captcha_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      sign_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      attach_data_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServerLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PTP.Server.ServerLoginReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string captcha = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_captcha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes sign = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes attach_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PTP.Server.ServerLoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PTP.Server.ServerLoginReq)
  return false;
#undef DO_
}

void ServerLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PTP.Server.ServerLoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // required string captcha = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->captcha(), output);
  }

  // required bytes sign = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->sign(), output);
  }

  // optional bytes attach_data = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->attach_data(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PTP.Server.ServerLoginReq)
}

size_t ServerLoginReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PTP.Server.ServerLoginReq)
  size_t total_size = 0;

  if (has_address()) {
    // required string address = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  if (has_captcha()) {
    // required string captcha = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->captcha());
  }

  if (has_sign()) {
    // required bytes sign = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sign());
  }

  return total_size;
}
size_t ServerLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.Server.ServerLoginReq)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string address = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());

    // required string captcha = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->captcha());

    // required bytes sign = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sign());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes attach_data = 4;
  if (has_attach_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerLoginReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerLoginReq*>(&from));
}

void ServerLoginReq::MergeFrom(const ServerLoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PTP.Server.ServerLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_captcha();
      captcha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.captcha_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_sign();
      sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_attach_data();
      attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
    }
  }
}

void ServerLoginReq::CopyFrom(const ServerLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.Server.ServerLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerLoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ServerLoginReq::Swap(ServerLoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerLoginReq::InternalSwap(ServerLoginReq* other) {
  using std::swap;
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  captcha_.Swap(&other->captcha_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sign_.Swap(&other->sign_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  attach_data_.Swap(&other->attach_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ServerLoginReq::GetTypeName() const {
  return "PTP.Server.ServerLoginReq";
}


// ===================================================================

void ServerLoginRes::InitAsDefaultInstance() {
  ::PTP::Server::_ServerLoginRes_default_instance_._instance.get_mutable()->user_info_ = const_cast< ::PTP::Common::UserInfo*>(
      ::PTP::Common::UserInfo::internal_default_instance());
}
void ServerLoginRes::clear_user_info() {
  if (user_info_ != NULL) user_info_->Clear();
  clear_has_user_info();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerLoginRes::kErrorFieldNumber;
const int ServerLoginRes::kUserInfoFieldNumber;
const int ServerLoginRes::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerLoginRes::ServerLoginRes()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PTP_2eServer_2eproto::scc_info_ServerLoginRes.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PTP.Server.ServerLoginRes)
}
ServerLoginRes::ServerLoginRes(const ServerLoginRes& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_attach_data()) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.has_user_info()) {
    user_info_ = new ::PTP::Common::UserInfo(*from.user_info_);
  } else {
    user_info_ = NULL;
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:PTP.Server.ServerLoginRes)
}

void ServerLoginRes::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&user_info_)) + sizeof(error_));
}

ServerLoginRes::~ServerLoginRes() {
  // @@protoc_insertion_point(destructor:PTP.Server.ServerLoginRes)
  SharedDtor();
}

void ServerLoginRes::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_info_;
}

void ServerLoginRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerLoginRes& ServerLoginRes::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PTP_2eServer_2eproto::scc_info_ServerLoginRes.base);
  return *internal_default_instance();
}


void ServerLoginRes::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.Server.ServerLoginRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      attach_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(user_info_ != NULL);
      user_info_->Clear();
    }
  }
  error_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServerLoginRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PTP.Server.ServerLoginRes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PTP.Common.ERR error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PTP::Common::ERR_IsValid(value)) {
            set_error(static_cast< ::PTP::Common::ERR >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .PTP.Common.UserInfo user_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PTP.Server.ServerLoginRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PTP.Server.ServerLoginRes)
  return false;
#undef DO_
}

void ServerLoginRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PTP.Server.ServerLoginRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .PTP.Common.ERR error = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error(), output);
  }

  // optional .PTP.Common.UserInfo user_info = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_user_info(), output);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PTP.Server.ServerLoginRes)
}

size_t ServerLoginRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.Server.ServerLoginRes)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required .PTP.Common.ERR error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

    // optional .PTP.Common.UserInfo user_info = 2;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *user_info_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerLoginRes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerLoginRes*>(&from));
}

void ServerLoginRes::MergeFrom(const ServerLoginRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PTP.Server.ServerLoginRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_attach_data();
      attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_user_info()->::PTP::Common::UserInfo::MergeFrom(from.user_info());
    }
    if (cached_has_bits & 0x00000004u) {
      error_ = from.error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServerLoginRes::CopyFrom(const ServerLoginRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.Server.ServerLoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerLoginRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_user_info()) {
    if (!this->user_info_->IsInitialized()) return false;
  }
  return true;
}

void ServerLoginRes::Swap(ServerLoginRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerLoginRes::InternalSwap(ServerLoginRes* other) {
  using std::swap;
  attach_data_.Swap(&other->attach_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_info_, other->user_info_);
  swap(error_, other->error_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ServerLoginRes::GetTypeName() const {
  return "PTP.Server.ServerLoginRes";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Server
}  // namespace PTP
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PTP::Server::ServerLoginReq* Arena::CreateMaybeMessage< ::PTP::Server::ServerLoginReq >(Arena* arena) {
  return Arena::CreateInternal< ::PTP::Server::ServerLoginReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PTP::Server::ServerLoginRes* Arena::CreateMaybeMessage< ::PTP::Server::ServerLoginRes >(Arena* arena) {
  return Arena::CreateInternal< ::PTP::Server::ServerLoginRes >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
