// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PTP.File.proto

#ifndef PROTOBUF_INCLUDED_PTP_2eFile_2eproto
#define PROTOBUF_INCLUDED_PTP_2eFile_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "PTP.Common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_PTP_2eFile_2eproto 

namespace protobuf_PTP_2eFile_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_PTP_2eFile_2eproto
namespace PTP {
namespace File {
class FileImgDownloadReq;
class FileImgDownloadReqDefaultTypeInternal;
extern FileImgDownloadReqDefaultTypeInternal _FileImgDownloadReq_default_instance_;
class FileImgDownloadRes;
class FileImgDownloadResDefaultTypeInternal;
extern FileImgDownloadResDefaultTypeInternal _FileImgDownloadRes_default_instance_;
class FileImgUploadReq;
class FileImgUploadReqDefaultTypeInternal;
extern FileImgUploadReqDefaultTypeInternal _FileImgUploadReq_default_instance_;
class FileImgUploadRes;
class FileImgUploadResDefaultTypeInternal;
extern FileImgUploadResDefaultTypeInternal _FileImgUploadRes_default_instance_;
}  // namespace File
}  // namespace PTP
namespace google {
namespace protobuf {
template<> ::PTP::File::FileImgDownloadReq* Arena::CreateMaybeMessage<::PTP::File::FileImgDownloadReq>(Arena*);
template<> ::PTP::File::FileImgDownloadRes* Arena::CreateMaybeMessage<::PTP::File::FileImgDownloadRes>(Arena*);
template<> ::PTP::File::FileImgUploadReq* Arena::CreateMaybeMessage<::PTP::File::FileImgUploadReq>(Arena*);
template<> ::PTP::File::FileImgUploadRes* Arena::CreateMaybeMessage<::PTP::File::FileImgUploadRes>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace PTP {
namespace File {

// ===================================================================

class FileImgUploadReq : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PTP.File.FileImgUploadReq) */ {
 public:
  FileImgUploadReq();
  virtual ~FileImgUploadReq();

  FileImgUploadReq(const FileImgUploadReq& from);

  inline FileImgUploadReq& operator=(const FileImgUploadReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileImgUploadReq(FileImgUploadReq&& from) noexcept
    : FileImgUploadReq() {
    *this = ::std::move(from);
  }

  inline FileImgUploadReq& operator=(FileImgUploadReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FileImgUploadReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileImgUploadReq* internal_default_instance() {
    return reinterpret_cast<const FileImgUploadReq*>(
               &_FileImgUploadReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FileImgUploadReq* other);
  friend void swap(FileImgUploadReq& a, FileImgUploadReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileImgUploadReq* New() const final {
    return CreateMaybeMessage<FileImgUploadReq>(NULL);
  }

  FileImgUploadReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileImgUploadReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const FileImgUploadReq& from);
  void MergeFrom(const FileImgUploadReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileImgUploadReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string file_id = 1;
  bool has_file_id() const;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  const ::std::string& file_id() const;
  void set_file_id(const ::std::string& value);
  #if LANG_CXX11
  void set_file_id(::std::string&& value);
  #endif
  void set_file_id(const char* value);
  void set_file_id(const char* value, size_t size);
  ::std::string* mutable_file_id();
  ::std::string* release_file_id();
  void set_allocated_file_id(::std::string* file_id);

  // required bytes file_data = 4;
  bool has_file_data() const;
  void clear_file_data();
  static const int kFileDataFieldNumber = 4;
  const ::std::string& file_data() const;
  void set_file_data(const ::std::string& value);
  #if LANG_CXX11
  void set_file_data(::std::string&& value);
  #endif
  void set_file_data(const char* value);
  void set_file_data(const void* value, size_t size);
  ::std::string* mutable_file_data();
  ::std::string* release_file_data();
  void set_allocated_file_data(::std::string* file_data);

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  const ::std::string& attach_data() const;
  void set_attach_data(const ::std::string& value);
  #if LANG_CXX11
  void set_attach_data(::std::string&& value);
  #endif
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  ::std::string* mutable_attach_data();
  ::std::string* release_attach_data();
  void set_allocated_attach_data(::std::string* attach_data);

  // required uint32 file_part = 2;
  bool has_file_part() const;
  void clear_file_part();
  static const int kFilePartFieldNumber = 2;
  ::google::protobuf::uint32 file_part() const;
  void set_file_part(::google::protobuf::uint32 value);

  // required uint32 file_total_parts = 3;
  bool has_file_total_parts() const;
  void clear_file_total_parts();
  static const int kFileTotalPartsFieldNumber = 3;
  ::google::protobuf::uint32 file_total_parts() const;
  void set_file_total_parts(::google::protobuf::uint32 value);

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  void clear_auth_uid();
  static const int kAuthUidFieldNumber = 21;
  ::google::protobuf::uint32 auth_uid() const;
  void set_auth_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PTP.File.FileImgUploadReq)
 private:
  void set_has_file_id();
  void clear_has_file_id();
  void set_has_file_part();
  void clear_has_file_part();
  void set_has_file_total_parts();
  void clear_has_file_total_parts();
  void set_has_file_data();
  void clear_has_file_data();
  void set_has_attach_data();
  void clear_has_attach_data();
  void set_has_auth_uid();
  void clear_has_auth_uid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_id_;
  ::google::protobuf::internal::ArenaStringPtr file_data_;
  ::google::protobuf::internal::ArenaStringPtr attach_data_;
  ::google::protobuf::uint32 file_part_;
  ::google::protobuf::uint32 file_total_parts_;
  ::google::protobuf::uint32 auth_uid_;
  friend struct ::protobuf_PTP_2eFile_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileImgUploadRes : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PTP.File.FileImgUploadRes) */ {
 public:
  FileImgUploadRes();
  virtual ~FileImgUploadRes();

  FileImgUploadRes(const FileImgUploadRes& from);

  inline FileImgUploadRes& operator=(const FileImgUploadRes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileImgUploadRes(FileImgUploadRes&& from) noexcept
    : FileImgUploadRes() {
    *this = ::std::move(from);
  }

  inline FileImgUploadRes& operator=(FileImgUploadRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FileImgUploadRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileImgUploadRes* internal_default_instance() {
    return reinterpret_cast<const FileImgUploadRes*>(
               &_FileImgUploadRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FileImgUploadRes* other);
  friend void swap(FileImgUploadRes& a, FileImgUploadRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileImgUploadRes* New() const final {
    return CreateMaybeMessage<FileImgUploadRes>(NULL);
  }

  FileImgUploadRes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileImgUploadRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const FileImgUploadRes& from);
  void MergeFrom(const FileImgUploadRes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileImgUploadRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string file_path = 2;
  bool has_file_path() const;
  void clear_file_path();
  static const int kFilePathFieldNumber = 2;
  const ::std::string& file_path() const;
  void set_file_path(const ::std::string& value);
  #if LANG_CXX11
  void set_file_path(::std::string&& value);
  #endif
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  ::std::string* mutable_file_path();
  ::std::string* release_file_path();
  void set_allocated_file_path(::std::string* file_path);

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  const ::std::string& attach_data() const;
  void set_attach_data(const ::std::string& value);
  #if LANG_CXX11
  void set_attach_data(::std::string&& value);
  #endif
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  ::std::string* mutable_attach_data();
  ::std::string* release_attach_data();
  void set_allocated_attach_data(::std::string* attach_data);

  // optional .PTP.Common.ERR error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  void clear_auth_uid();
  static const int kAuthUidFieldNumber = 21;
  ::google::protobuf::uint32 auth_uid() const;
  void set_auth_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PTP.File.FileImgUploadRes)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_file_path();
  void clear_has_file_path();
  void set_has_attach_data();
  void clear_has_attach_data();
  void set_has_auth_uid();
  void clear_has_auth_uid();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_path_;
  ::google::protobuf::internal::ArenaStringPtr attach_data_;
  int error_;
  ::google::protobuf::uint32 auth_uid_;
  friend struct ::protobuf_PTP_2eFile_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileImgDownloadReq : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PTP.File.FileImgDownloadReq) */ {
 public:
  FileImgDownloadReq();
  virtual ~FileImgDownloadReq();

  FileImgDownloadReq(const FileImgDownloadReq& from);

  inline FileImgDownloadReq& operator=(const FileImgDownloadReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileImgDownloadReq(FileImgDownloadReq&& from) noexcept
    : FileImgDownloadReq() {
    *this = ::std::move(from);
  }

  inline FileImgDownloadReq& operator=(FileImgDownloadReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FileImgDownloadReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileImgDownloadReq* internal_default_instance() {
    return reinterpret_cast<const FileImgDownloadReq*>(
               &_FileImgDownloadReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FileImgDownloadReq* other);
  friend void swap(FileImgDownloadReq& a, FileImgDownloadReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileImgDownloadReq* New() const final {
    return CreateMaybeMessage<FileImgDownloadReq>(NULL);
  }

  FileImgDownloadReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileImgDownloadReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const FileImgDownloadReq& from);
  void MergeFrom(const FileImgDownloadReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileImgDownloadReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string file_path = 1;
  bool has_file_path() const;
  void clear_file_path();
  static const int kFilePathFieldNumber = 1;
  const ::std::string& file_path() const;
  void set_file_path(const ::std::string& value);
  #if LANG_CXX11
  void set_file_path(::std::string&& value);
  #endif
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  ::std::string* mutable_file_path();
  ::std::string* release_file_path();
  void set_allocated_file_path(::std::string* file_path);

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  const ::std::string& attach_data() const;
  void set_attach_data(const ::std::string& value);
  #if LANG_CXX11
  void set_attach_data(::std::string&& value);
  #endif
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  ::std::string* mutable_attach_data();
  ::std::string* release_attach_data();
  void set_allocated_attach_data(::std::string* attach_data);

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  void clear_auth_uid();
  static const int kAuthUidFieldNumber = 21;
  ::google::protobuf::uint32 auth_uid() const;
  void set_auth_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PTP.File.FileImgDownloadReq)
 private:
  void set_has_file_path();
  void clear_has_file_path();
  void set_has_attach_data();
  void clear_has_attach_data();
  void set_has_auth_uid();
  void clear_has_auth_uid();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_path_;
  ::google::protobuf::internal::ArenaStringPtr attach_data_;
  ::google::protobuf::uint32 auth_uid_;
  friend struct ::protobuf_PTP_2eFile_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileImgDownloadRes : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PTP.File.FileImgDownloadRes) */ {
 public:
  FileImgDownloadRes();
  virtual ~FileImgDownloadRes();

  FileImgDownloadRes(const FileImgDownloadRes& from);

  inline FileImgDownloadRes& operator=(const FileImgDownloadRes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileImgDownloadRes(FileImgDownloadRes&& from) noexcept
    : FileImgDownloadRes() {
    *this = ::std::move(from);
  }

  inline FileImgDownloadRes& operator=(FileImgDownloadRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FileImgDownloadRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileImgDownloadRes* internal_default_instance() {
    return reinterpret_cast<const FileImgDownloadRes*>(
               &_FileImgDownloadRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FileImgDownloadRes* other);
  friend void swap(FileImgDownloadRes& a, FileImgDownloadRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileImgDownloadRes* New() const final {
    return CreateMaybeMessage<FileImgDownloadRes>(NULL);
  }

  FileImgDownloadRes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileImgDownloadRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const FileImgDownloadRes& from);
  void MergeFrom(const FileImgDownloadRes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileImgDownloadRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes file_data = 2;
  bool has_file_data() const;
  void clear_file_data();
  static const int kFileDataFieldNumber = 2;
  const ::std::string& file_data() const;
  void set_file_data(const ::std::string& value);
  #if LANG_CXX11
  void set_file_data(::std::string&& value);
  #endif
  void set_file_data(const char* value);
  void set_file_data(const void* value, size_t size);
  ::std::string* mutable_file_data();
  ::std::string* release_file_data();
  void set_allocated_file_data(::std::string* file_data);

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  const ::std::string& attach_data() const;
  void set_attach_data(const ::std::string& value);
  #if LANG_CXX11
  void set_attach_data(::std::string&& value);
  #endif
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  ::std::string* mutable_attach_data();
  ::std::string* release_attach_data();
  void set_allocated_attach_data(::std::string* attach_data);

  // optional .PTP.Common.ERR error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  void clear_auth_uid();
  static const int kAuthUidFieldNumber = 21;
  ::google::protobuf::uint32 auth_uid() const;
  void set_auth_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PTP.File.FileImgDownloadRes)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_file_data();
  void clear_has_file_data();
  void set_has_attach_data();
  void clear_has_attach_data();
  void set_has_auth_uid();
  void clear_has_auth_uid();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_data_;
  ::google::protobuf::internal::ArenaStringPtr attach_data_;
  int error_;
  ::google::protobuf::uint32 auth_uid_;
  friend struct ::protobuf_PTP_2eFile_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileImgUploadReq

// required string file_id = 1;
inline bool FileImgUploadReq::has_file_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileImgUploadReq::set_has_file_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileImgUploadReq::clear_has_file_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileImgUploadReq::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_id();
}
inline const ::std::string& FileImgUploadReq::file_id() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgUploadReq.file_id)
  return file_id_.GetNoArena();
}
inline void FileImgUploadReq::set_file_id(const ::std::string& value) {
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.File.FileImgUploadReq.file_id)
}
#if LANG_CXX11
inline void FileImgUploadReq::set_file_id(::std::string&& value) {
  set_has_file_id();
  file_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.File.FileImgUploadReq.file_id)
}
#endif
inline void FileImgUploadReq::set_file_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.File.FileImgUploadReq.file_id)
}
inline void FileImgUploadReq::set_file_id(const char* value, size_t size) {
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.File.FileImgUploadReq.file_id)
}
inline ::std::string* FileImgUploadReq::mutable_file_id() {
  set_has_file_id();
  // @@protoc_insertion_point(field_mutable:PTP.File.FileImgUploadReq.file_id)
  return file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileImgUploadReq::release_file_id() {
  // @@protoc_insertion_point(field_release:PTP.File.FileImgUploadReq.file_id)
  if (!has_file_id()) {
    return NULL;
  }
  clear_has_file_id();
  return file_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileImgUploadReq::set_allocated_file_id(::std::string* file_id) {
  if (file_id != NULL) {
    set_has_file_id();
  } else {
    clear_has_file_id();
  }
  file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:PTP.File.FileImgUploadReq.file_id)
}

// required uint32 file_part = 2;
inline bool FileImgUploadReq::has_file_part() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileImgUploadReq::set_has_file_part() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FileImgUploadReq::clear_has_file_part() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FileImgUploadReq::clear_file_part() {
  file_part_ = 0u;
  clear_has_file_part();
}
inline ::google::protobuf::uint32 FileImgUploadReq::file_part() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgUploadReq.file_part)
  return file_part_;
}
inline void FileImgUploadReq::set_file_part(::google::protobuf::uint32 value) {
  set_has_file_part();
  file_part_ = value;
  // @@protoc_insertion_point(field_set:PTP.File.FileImgUploadReq.file_part)
}

// required uint32 file_total_parts = 3;
inline bool FileImgUploadReq::has_file_total_parts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FileImgUploadReq::set_has_file_total_parts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FileImgUploadReq::clear_has_file_total_parts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FileImgUploadReq::clear_file_total_parts() {
  file_total_parts_ = 0u;
  clear_has_file_total_parts();
}
inline ::google::protobuf::uint32 FileImgUploadReq::file_total_parts() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgUploadReq.file_total_parts)
  return file_total_parts_;
}
inline void FileImgUploadReq::set_file_total_parts(::google::protobuf::uint32 value) {
  set_has_file_total_parts();
  file_total_parts_ = value;
  // @@protoc_insertion_point(field_set:PTP.File.FileImgUploadReq.file_total_parts)
}

// required bytes file_data = 4;
inline bool FileImgUploadReq::has_file_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileImgUploadReq::set_has_file_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileImgUploadReq::clear_has_file_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileImgUploadReq::clear_file_data() {
  file_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_data();
}
inline const ::std::string& FileImgUploadReq::file_data() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgUploadReq.file_data)
  return file_data_.GetNoArena();
}
inline void FileImgUploadReq::set_file_data(const ::std::string& value) {
  set_has_file_data();
  file_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.File.FileImgUploadReq.file_data)
}
#if LANG_CXX11
inline void FileImgUploadReq::set_file_data(::std::string&& value) {
  set_has_file_data();
  file_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.File.FileImgUploadReq.file_data)
}
#endif
inline void FileImgUploadReq::set_file_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_data();
  file_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.File.FileImgUploadReq.file_data)
}
inline void FileImgUploadReq::set_file_data(const void* value, size_t size) {
  set_has_file_data();
  file_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.File.FileImgUploadReq.file_data)
}
inline ::std::string* FileImgUploadReq::mutable_file_data() {
  set_has_file_data();
  // @@protoc_insertion_point(field_mutable:PTP.File.FileImgUploadReq.file_data)
  return file_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileImgUploadReq::release_file_data() {
  // @@protoc_insertion_point(field_release:PTP.File.FileImgUploadReq.file_data)
  if (!has_file_data()) {
    return NULL;
  }
  clear_has_file_data();
  return file_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileImgUploadReq::set_allocated_file_data(::std::string* file_data) {
  if (file_data != NULL) {
    set_has_file_data();
  } else {
    clear_has_file_data();
  }
  file_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_data);
  // @@protoc_insertion_point(field_set_allocated:PTP.File.FileImgUploadReq.file_data)
}

// optional bytes attach_data = 20;
inline bool FileImgUploadReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileImgUploadReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileImgUploadReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileImgUploadReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
inline const ::std::string& FileImgUploadReq::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgUploadReq.attach_data)
  return attach_data_.GetNoArena();
}
inline void FileImgUploadReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.File.FileImgUploadReq.attach_data)
}
#if LANG_CXX11
inline void FileImgUploadReq::set_attach_data(::std::string&& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.File.FileImgUploadReq.attach_data)
}
#endif
inline void FileImgUploadReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.File.FileImgUploadReq.attach_data)
}
inline void FileImgUploadReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.File.FileImgUploadReq.attach_data)
}
inline ::std::string* FileImgUploadReq::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.File.FileImgUploadReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileImgUploadReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.File.FileImgUploadReq.attach_data)
  if (!has_attach_data()) {
    return NULL;
  }
  clear_has_attach_data();
  return attach_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileImgUploadReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:PTP.File.FileImgUploadReq.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool FileImgUploadReq::has_auth_uid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FileImgUploadReq::set_has_auth_uid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FileImgUploadReq::clear_has_auth_uid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FileImgUploadReq::clear_auth_uid() {
  auth_uid_ = 0u;
  clear_has_auth_uid();
}
inline ::google::protobuf::uint32 FileImgUploadReq::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgUploadReq.auth_uid)
  return auth_uid_;
}
inline void FileImgUploadReq::set_auth_uid(::google::protobuf::uint32 value) {
  set_has_auth_uid();
  auth_uid_ = value;
  // @@protoc_insertion_point(field_set:PTP.File.FileImgUploadReq.auth_uid)
}

// -------------------------------------------------------------------

// FileImgUploadRes

// optional .PTP.Common.ERR error = 1;
inline bool FileImgUploadRes::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileImgUploadRes::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileImgUploadRes::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileImgUploadRes::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::PTP::Common::ERR FileImgUploadRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgUploadRes.error)
  return static_cast< ::PTP::Common::ERR >(error_);
}
inline void FileImgUploadRes::set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:PTP.File.FileImgUploadRes.error)
}

// required string file_path = 2;
inline bool FileImgUploadRes::has_file_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileImgUploadRes::set_has_file_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileImgUploadRes::clear_has_file_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileImgUploadRes::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_path();
}
inline const ::std::string& FileImgUploadRes::file_path() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgUploadRes.file_path)
  return file_path_.GetNoArena();
}
inline void FileImgUploadRes::set_file_path(const ::std::string& value) {
  set_has_file_path();
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.File.FileImgUploadRes.file_path)
}
#if LANG_CXX11
inline void FileImgUploadRes::set_file_path(::std::string&& value) {
  set_has_file_path();
  file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.File.FileImgUploadRes.file_path)
}
#endif
inline void FileImgUploadRes::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_path();
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.File.FileImgUploadRes.file_path)
}
inline void FileImgUploadRes::set_file_path(const char* value, size_t size) {
  set_has_file_path();
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.File.FileImgUploadRes.file_path)
}
inline ::std::string* FileImgUploadRes::mutable_file_path() {
  set_has_file_path();
  // @@protoc_insertion_point(field_mutable:PTP.File.FileImgUploadRes.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileImgUploadRes::release_file_path() {
  // @@protoc_insertion_point(field_release:PTP.File.FileImgUploadRes.file_path)
  if (!has_file_path()) {
    return NULL;
  }
  clear_has_file_path();
  return file_path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileImgUploadRes::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    set_has_file_path();
  } else {
    clear_has_file_path();
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:PTP.File.FileImgUploadRes.file_path)
}

// optional bytes attach_data = 20;
inline bool FileImgUploadRes::has_attach_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileImgUploadRes::set_has_attach_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileImgUploadRes::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileImgUploadRes::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
inline const ::std::string& FileImgUploadRes::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgUploadRes.attach_data)
  return attach_data_.GetNoArena();
}
inline void FileImgUploadRes::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.File.FileImgUploadRes.attach_data)
}
#if LANG_CXX11
inline void FileImgUploadRes::set_attach_data(::std::string&& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.File.FileImgUploadRes.attach_data)
}
#endif
inline void FileImgUploadRes::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.File.FileImgUploadRes.attach_data)
}
inline void FileImgUploadRes::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.File.FileImgUploadRes.attach_data)
}
inline ::std::string* FileImgUploadRes::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.File.FileImgUploadRes.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileImgUploadRes::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.File.FileImgUploadRes.attach_data)
  if (!has_attach_data()) {
    return NULL;
  }
  clear_has_attach_data();
  return attach_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileImgUploadRes::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:PTP.File.FileImgUploadRes.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool FileImgUploadRes::has_auth_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileImgUploadRes::set_has_auth_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FileImgUploadRes::clear_has_auth_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FileImgUploadRes::clear_auth_uid() {
  auth_uid_ = 0u;
  clear_has_auth_uid();
}
inline ::google::protobuf::uint32 FileImgUploadRes::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgUploadRes.auth_uid)
  return auth_uid_;
}
inline void FileImgUploadRes::set_auth_uid(::google::protobuf::uint32 value) {
  set_has_auth_uid();
  auth_uid_ = value;
  // @@protoc_insertion_point(field_set:PTP.File.FileImgUploadRes.auth_uid)
}

// -------------------------------------------------------------------

// FileImgDownloadReq

// required string file_path = 1;
inline bool FileImgDownloadReq::has_file_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileImgDownloadReq::set_has_file_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileImgDownloadReq::clear_has_file_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileImgDownloadReq::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_path();
}
inline const ::std::string& FileImgDownloadReq::file_path() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgDownloadReq.file_path)
  return file_path_.GetNoArena();
}
inline void FileImgDownloadReq::set_file_path(const ::std::string& value) {
  set_has_file_path();
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.File.FileImgDownloadReq.file_path)
}
#if LANG_CXX11
inline void FileImgDownloadReq::set_file_path(::std::string&& value) {
  set_has_file_path();
  file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.File.FileImgDownloadReq.file_path)
}
#endif
inline void FileImgDownloadReq::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_path();
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.File.FileImgDownloadReq.file_path)
}
inline void FileImgDownloadReq::set_file_path(const char* value, size_t size) {
  set_has_file_path();
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.File.FileImgDownloadReq.file_path)
}
inline ::std::string* FileImgDownloadReq::mutable_file_path() {
  set_has_file_path();
  // @@protoc_insertion_point(field_mutable:PTP.File.FileImgDownloadReq.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileImgDownloadReq::release_file_path() {
  // @@protoc_insertion_point(field_release:PTP.File.FileImgDownloadReq.file_path)
  if (!has_file_path()) {
    return NULL;
  }
  clear_has_file_path();
  return file_path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileImgDownloadReq::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    set_has_file_path();
  } else {
    clear_has_file_path();
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:PTP.File.FileImgDownloadReq.file_path)
}

// optional bytes attach_data = 20;
inline bool FileImgDownloadReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileImgDownloadReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileImgDownloadReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileImgDownloadReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
inline const ::std::string& FileImgDownloadReq::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgDownloadReq.attach_data)
  return attach_data_.GetNoArena();
}
inline void FileImgDownloadReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.File.FileImgDownloadReq.attach_data)
}
#if LANG_CXX11
inline void FileImgDownloadReq::set_attach_data(::std::string&& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.File.FileImgDownloadReq.attach_data)
}
#endif
inline void FileImgDownloadReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.File.FileImgDownloadReq.attach_data)
}
inline void FileImgDownloadReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.File.FileImgDownloadReq.attach_data)
}
inline ::std::string* FileImgDownloadReq::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.File.FileImgDownloadReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileImgDownloadReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.File.FileImgDownloadReq.attach_data)
  if (!has_attach_data()) {
    return NULL;
  }
  clear_has_attach_data();
  return attach_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileImgDownloadReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:PTP.File.FileImgDownloadReq.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool FileImgDownloadReq::has_auth_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileImgDownloadReq::set_has_auth_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileImgDownloadReq::clear_has_auth_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileImgDownloadReq::clear_auth_uid() {
  auth_uid_ = 0u;
  clear_has_auth_uid();
}
inline ::google::protobuf::uint32 FileImgDownloadReq::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgDownloadReq.auth_uid)
  return auth_uid_;
}
inline void FileImgDownloadReq::set_auth_uid(::google::protobuf::uint32 value) {
  set_has_auth_uid();
  auth_uid_ = value;
  // @@protoc_insertion_point(field_set:PTP.File.FileImgDownloadReq.auth_uid)
}

// -------------------------------------------------------------------

// FileImgDownloadRes

// optional .PTP.Common.ERR error = 1;
inline bool FileImgDownloadRes::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileImgDownloadRes::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileImgDownloadRes::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileImgDownloadRes::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::PTP::Common::ERR FileImgDownloadRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgDownloadRes.error)
  return static_cast< ::PTP::Common::ERR >(error_);
}
inline void FileImgDownloadRes::set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:PTP.File.FileImgDownloadRes.error)
}

// optional bytes file_data = 2;
inline bool FileImgDownloadRes::has_file_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileImgDownloadRes::set_has_file_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileImgDownloadRes::clear_has_file_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileImgDownloadRes::clear_file_data() {
  file_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_data();
}
inline const ::std::string& FileImgDownloadRes::file_data() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgDownloadRes.file_data)
  return file_data_.GetNoArena();
}
inline void FileImgDownloadRes::set_file_data(const ::std::string& value) {
  set_has_file_data();
  file_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.File.FileImgDownloadRes.file_data)
}
#if LANG_CXX11
inline void FileImgDownloadRes::set_file_data(::std::string&& value) {
  set_has_file_data();
  file_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.File.FileImgDownloadRes.file_data)
}
#endif
inline void FileImgDownloadRes::set_file_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_data();
  file_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.File.FileImgDownloadRes.file_data)
}
inline void FileImgDownloadRes::set_file_data(const void* value, size_t size) {
  set_has_file_data();
  file_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.File.FileImgDownloadRes.file_data)
}
inline ::std::string* FileImgDownloadRes::mutable_file_data() {
  set_has_file_data();
  // @@protoc_insertion_point(field_mutable:PTP.File.FileImgDownloadRes.file_data)
  return file_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileImgDownloadRes::release_file_data() {
  // @@protoc_insertion_point(field_release:PTP.File.FileImgDownloadRes.file_data)
  if (!has_file_data()) {
    return NULL;
  }
  clear_has_file_data();
  return file_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileImgDownloadRes::set_allocated_file_data(::std::string* file_data) {
  if (file_data != NULL) {
    set_has_file_data();
  } else {
    clear_has_file_data();
  }
  file_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_data);
  // @@protoc_insertion_point(field_set_allocated:PTP.File.FileImgDownloadRes.file_data)
}

// optional bytes attach_data = 20;
inline bool FileImgDownloadRes::has_attach_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileImgDownloadRes::set_has_attach_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileImgDownloadRes::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileImgDownloadRes::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
inline const ::std::string& FileImgDownloadRes::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgDownloadRes.attach_data)
  return attach_data_.GetNoArena();
}
inline void FileImgDownloadRes::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.File.FileImgDownloadRes.attach_data)
}
#if LANG_CXX11
inline void FileImgDownloadRes::set_attach_data(::std::string&& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.File.FileImgDownloadRes.attach_data)
}
#endif
inline void FileImgDownloadRes::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.File.FileImgDownloadRes.attach_data)
}
inline void FileImgDownloadRes::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.File.FileImgDownloadRes.attach_data)
}
inline ::std::string* FileImgDownloadRes::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.File.FileImgDownloadRes.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileImgDownloadRes::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.File.FileImgDownloadRes.attach_data)
  if (!has_attach_data()) {
    return NULL;
  }
  clear_has_attach_data();
  return attach_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileImgDownloadRes::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:PTP.File.FileImgDownloadRes.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool FileImgDownloadRes::has_auth_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileImgDownloadRes::set_has_auth_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FileImgDownloadRes::clear_has_auth_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FileImgDownloadRes::clear_auth_uid() {
  auth_uid_ = 0u;
  clear_has_auth_uid();
}
inline ::google::protobuf::uint32 FileImgDownloadRes::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgDownloadRes.auth_uid)
  return auth_uid_;
}
inline void FileImgDownloadRes::set_auth_uid(::google::protobuf::uint32 value) {
  set_has_auth_uid();
  auth_uid_ = value;
  // @@protoc_insertion_point(field_set:PTP.File.FileImgDownloadRes.auth_uid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace File
}  // namespace PTP

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_PTP_2eFile_2eproto
