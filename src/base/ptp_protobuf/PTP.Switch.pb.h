// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PTP.Switch.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PTP_2eSwitch_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PTP_2eSwitch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "PTP.Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PTP_2eSwitch_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PTP_2eSwitch_2eproto {
  static const uint32_t offsets[];
};
namespace PTP {
namespace Switch {
class SwitchDevicesNotify;
struct SwitchDevicesNotifyDefaultTypeInternal;
extern SwitchDevicesNotifyDefaultTypeInternal _SwitchDevicesNotify_default_instance_;
class SwitchDevicesReq;
struct SwitchDevicesReqDefaultTypeInternal;
extern SwitchDevicesReqDefaultTypeInternal _SwitchDevicesReq_default_instance_;
class SwitchPtpNotify;
struct SwitchPtpNotifyDefaultTypeInternal;
extern SwitchPtpNotifyDefaultTypeInternal _SwitchPtpNotify_default_instance_;
class SwitchPtpReq;
struct SwitchPtpReqDefaultTypeInternal;
extern SwitchPtpReqDefaultTypeInternal _SwitchPtpReq_default_instance_;
class SwitchPtpRes;
struct SwitchPtpResDefaultTypeInternal;
extern SwitchPtpResDefaultTypeInternal _SwitchPtpRes_default_instance_;
}  // namespace Switch
}  // namespace PTP
PROTOBUF_NAMESPACE_OPEN
template<> ::PTP::Switch::SwitchDevicesNotify* Arena::CreateMaybeMessage<::PTP::Switch::SwitchDevicesNotify>(Arena*);
template<> ::PTP::Switch::SwitchDevicesReq* Arena::CreateMaybeMessage<::PTP::Switch::SwitchDevicesReq>(Arena*);
template<> ::PTP::Switch::SwitchPtpNotify* Arena::CreateMaybeMessage<::PTP::Switch::SwitchPtpNotify>(Arena*);
template<> ::PTP::Switch::SwitchPtpReq* Arena::CreateMaybeMessage<::PTP::Switch::SwitchPtpReq>(Arena*);
template<> ::PTP::Switch::SwitchPtpRes* Arena::CreateMaybeMessage<::PTP::Switch::SwitchPtpRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PTP {
namespace Switch {

// ===================================================================

class SwitchPtpReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Switch.SwitchPtpReq) */ {
 public:
  inline SwitchPtpReq() : SwitchPtpReq(nullptr) {}
  ~SwitchPtpReq() override;
  explicit PROTOBUF_CONSTEXPR SwitchPtpReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwitchPtpReq(const SwitchPtpReq& from);
  SwitchPtpReq(SwitchPtpReq&& from) noexcept
    : SwitchPtpReq() {
    *this = ::std::move(from);
  }

  inline SwitchPtpReq& operator=(const SwitchPtpReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwitchPtpReq& operator=(SwitchPtpReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SwitchPtpReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwitchPtpReq* internal_default_instance() {
    return reinterpret_cast<const SwitchPtpReq*>(
               &_SwitchPtpReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SwitchPtpReq& a, SwitchPtpReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SwitchPtpReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwitchPtpReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwitchPtpReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwitchPtpReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SwitchPtpReq& from);
  void MergeFrom(const SwitchPtpReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SwitchPtpReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Switch.SwitchPtpReq";
  }
  protected:
  explicit SwitchPtpReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToAdrFieldNumber = 1,
    kDataFieldNumber = 2,
    kSwitchTypeFieldNumber = 3,
  };
  // required string to_adr = 1;
  bool has_to_adr() const;
  private:
  bool _internal_has_to_adr() const;
  public:
  void clear_to_adr();
  const std::string& to_adr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_adr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_adr();
  PROTOBUF_NODISCARD std::string* release_to_adr();
  void set_allocated_to_adr(std::string* to_adr);
  private:
  const std::string& _internal_to_adr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_adr(const std::string& value);
  std::string* _internal_mutable_to_adr();
  public:

  // required string data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // required .PTP.Common.SwitchType switch_type = 3;
  bool has_switch_type() const;
  private:
  bool _internal_has_switch_type() const;
  public:
  void clear_switch_type();
  ::PTP::Common::SwitchType switch_type() const;
  void set_switch_type(::PTP::Common::SwitchType value);
  private:
  ::PTP::Common::SwitchType _internal_switch_type() const;
  void _internal_set_switch_type(::PTP::Common::SwitchType value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Switch.SwitchPtpReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_adr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int switch_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eSwitch_2eproto;
};
// -------------------------------------------------------------------

class SwitchPtpRes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Switch.SwitchPtpRes) */ {
 public:
  inline SwitchPtpRes() : SwitchPtpRes(nullptr) {}
  ~SwitchPtpRes() override;
  explicit PROTOBUF_CONSTEXPR SwitchPtpRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwitchPtpRes(const SwitchPtpRes& from);
  SwitchPtpRes(SwitchPtpRes&& from) noexcept
    : SwitchPtpRes() {
    *this = ::std::move(from);
  }

  inline SwitchPtpRes& operator=(const SwitchPtpRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwitchPtpRes& operator=(SwitchPtpRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SwitchPtpRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwitchPtpRes* internal_default_instance() {
    return reinterpret_cast<const SwitchPtpRes*>(
               &_SwitchPtpRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SwitchPtpRes& a, SwitchPtpRes& b) {
    a.Swap(&b);
  }
  inline void Swap(SwitchPtpRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwitchPtpRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwitchPtpRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwitchPtpRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SwitchPtpRes& from);
  void MergeFrom(const SwitchPtpRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SwitchPtpRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Switch.SwitchPtpRes";
  }
  protected:
  explicit SwitchPtpRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // required .PTP.Common.ERR error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);
  private:
  ::PTP::Common::ERR _internal_error() const;
  void _internal_set_error(::PTP::Common::ERR value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Switch.SwitchPtpRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int error_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eSwitch_2eproto;
};
// -------------------------------------------------------------------

class SwitchPtpNotify final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Switch.SwitchPtpNotify) */ {
 public:
  inline SwitchPtpNotify() : SwitchPtpNotify(nullptr) {}
  ~SwitchPtpNotify() override;
  explicit PROTOBUF_CONSTEXPR SwitchPtpNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwitchPtpNotify(const SwitchPtpNotify& from);
  SwitchPtpNotify(SwitchPtpNotify&& from) noexcept
    : SwitchPtpNotify() {
    *this = ::std::move(from);
  }

  inline SwitchPtpNotify& operator=(const SwitchPtpNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwitchPtpNotify& operator=(SwitchPtpNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SwitchPtpNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwitchPtpNotify* internal_default_instance() {
    return reinterpret_cast<const SwitchPtpNotify*>(
               &_SwitchPtpNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SwitchPtpNotify& a, SwitchPtpNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(SwitchPtpNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwitchPtpNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwitchPtpNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwitchPtpNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SwitchPtpNotify& from);
  void MergeFrom(const SwitchPtpNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SwitchPtpNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Switch.SwitchPtpNotify";
  }
  protected:
  explicit SwitchPtpNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromAdrFieldNumber = 1,
    kDataFieldNumber = 2,
    kSwitchTypeFieldNumber = 3,
  };
  // required string from_adr = 1;
  bool has_from_adr() const;
  private:
  bool _internal_has_from_adr() const;
  public:
  void clear_from_adr();
  const std::string& from_adr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from_adr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from_adr();
  PROTOBUF_NODISCARD std::string* release_from_adr();
  void set_allocated_from_adr(std::string* from_adr);
  private:
  const std::string& _internal_from_adr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_adr(const std::string& value);
  std::string* _internal_mutable_from_adr();
  public:

  // required string data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // required .PTP.Common.SwitchType switch_type = 3;
  bool has_switch_type() const;
  private:
  bool _internal_has_switch_type() const;
  public:
  void clear_switch_type();
  ::PTP::Common::SwitchType switch_type() const;
  void set_switch_type(::PTP::Common::SwitchType value);
  private:
  ::PTP::Common::SwitchType _internal_switch_type() const;
  void _internal_set_switch_type(::PTP::Common::SwitchType value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Switch.SwitchPtpNotify)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_adr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int switch_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eSwitch_2eproto;
};
// -------------------------------------------------------------------

class SwitchDevicesReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Switch.SwitchDevicesReq) */ {
 public:
  inline SwitchDevicesReq() : SwitchDevicesReq(nullptr) {}
  ~SwitchDevicesReq() override;
  explicit PROTOBUF_CONSTEXPR SwitchDevicesReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwitchDevicesReq(const SwitchDevicesReq& from);
  SwitchDevicesReq(SwitchDevicesReq&& from) noexcept
    : SwitchDevicesReq() {
    *this = ::std::move(from);
  }

  inline SwitchDevicesReq& operator=(const SwitchDevicesReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwitchDevicesReq& operator=(SwitchDevicesReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SwitchDevicesReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwitchDevicesReq* internal_default_instance() {
    return reinterpret_cast<const SwitchDevicesReq*>(
               &_SwitchDevicesReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SwitchDevicesReq& a, SwitchDevicesReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SwitchDevicesReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwitchDevicesReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwitchDevicesReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwitchDevicesReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SwitchDevicesReq& from);
  void MergeFrom(const SwitchDevicesReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SwitchDevicesReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Switch.SwitchDevicesReq";
  }
  protected:
  explicit SwitchDevicesReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserNameFieldNumber = 1,
    kBrowserVersionFieldNumber = 2,
    kOsNameFieldNumber = 3,
    kOsVersionFieldNumber = 4,
    kClientIdFieldNumber = 9,
    kIsIntelFieldNumber = 5,
  };
  // required string browser_name = 1;
  bool has_browser_name() const;
  private:
  bool _internal_has_browser_name() const;
  public:
  void clear_browser_name();
  const std::string& browser_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_browser_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_browser_name();
  PROTOBUF_NODISCARD std::string* release_browser_name();
  void set_allocated_browser_name(std::string* browser_name);
  private:
  const std::string& _internal_browser_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_browser_name(const std::string& value);
  std::string* _internal_mutable_browser_name();
  public:

  // required string browser_version = 2;
  bool has_browser_version() const;
  private:
  bool _internal_has_browser_version() const;
  public:
  void clear_browser_version();
  const std::string& browser_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_browser_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_browser_version();
  PROTOBUF_NODISCARD std::string* release_browser_version();
  void set_allocated_browser_version(std::string* browser_version);
  private:
  const std::string& _internal_browser_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_browser_version(const std::string& value);
  std::string* _internal_mutable_browser_version();
  public:

  // required string os_name = 3;
  bool has_os_name() const;
  private:
  bool _internal_has_os_name() const;
  public:
  void clear_os_name();
  const std::string& os_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_os_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_os_name();
  PROTOBUF_NODISCARD std::string* release_os_name();
  void set_allocated_os_name(std::string* os_name);
  private:
  const std::string& _internal_os_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_os_name(const std::string& value);
  std::string* _internal_mutable_os_name();
  public:

  // required string os_version = 4;
  bool has_os_version() const;
  private:
  bool _internal_has_os_version() const;
  public:
  void clear_os_version();
  const std::string& os_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_os_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_os_version();
  PROTOBUF_NODISCARD std::string* release_os_version();
  void set_allocated_os_version(std::string* os_version);
  private:
  const std::string& _internal_os_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_os_version(const std::string& value);
  std::string* _internal_mutable_os_version();
  public:

  // required string client_id = 9;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  const std::string& client_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // required bool is_intel = 5;
  bool has_is_intel() const;
  private:
  bool _internal_has_is_intel() const;
  public:
  void clear_is_intel();
  bool is_intel() const;
  void set_is_intel(bool value);
  private:
  bool _internal_is_intel() const;
  void _internal_set_is_intel(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Switch.SwitchDevicesReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr browser_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr browser_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr os_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr os_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    bool is_intel_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eSwitch_2eproto;
};
// -------------------------------------------------------------------

class SwitchDevicesNotify final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Switch.SwitchDevicesNotify) */ {
 public:
  inline SwitchDevicesNotify() : SwitchDevicesNotify(nullptr) {}
  ~SwitchDevicesNotify() override;
  explicit PROTOBUF_CONSTEXPR SwitchDevicesNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwitchDevicesNotify(const SwitchDevicesNotify& from);
  SwitchDevicesNotify(SwitchDevicesNotify&& from) noexcept
    : SwitchDevicesNotify() {
    *this = ::std::move(from);
  }

  inline SwitchDevicesNotify& operator=(const SwitchDevicesNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwitchDevicesNotify& operator=(SwitchDevicesNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SwitchDevicesNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwitchDevicesNotify* internal_default_instance() {
    return reinterpret_cast<const SwitchDevicesNotify*>(
               &_SwitchDevicesNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SwitchDevicesNotify& a, SwitchDevicesNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(SwitchDevicesNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwitchDevicesNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwitchDevicesNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwitchDevicesNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SwitchDevicesNotify& from);
  void MergeFrom(const SwitchDevicesNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SwitchDevicesNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Switch.SwitchDevicesNotify";
  }
  protected:
  explicit SwitchDevicesNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 1,
  };
  // repeated .PTP.Common.DevicesInfo devices = 1;
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::PTP::Common::DevicesInfo* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::DevicesInfo >*
      mutable_devices();
  private:
  const ::PTP::Common::DevicesInfo& _internal_devices(int index) const;
  ::PTP::Common::DevicesInfo* _internal_add_devices();
  public:
  const ::PTP::Common::DevicesInfo& devices(int index) const;
  ::PTP::Common::DevicesInfo* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::DevicesInfo >&
      devices() const;

  // @@protoc_insertion_point(class_scope:PTP.Switch.SwitchDevicesNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::DevicesInfo > devices_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eSwitch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SwitchPtpReq

// required string to_adr = 1;
inline bool SwitchPtpReq::_internal_has_to_adr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SwitchPtpReq::has_to_adr() const {
  return _internal_has_to_adr();
}
inline void SwitchPtpReq::clear_to_adr() {
  _impl_.to_adr_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SwitchPtpReq::to_adr() const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchPtpReq.to_adr)
  return _internal_to_adr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwitchPtpReq::set_to_adr(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.to_adr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Switch.SwitchPtpReq.to_adr)
}
inline std::string* SwitchPtpReq::mutable_to_adr() {
  std::string* _s = _internal_mutable_to_adr();
  // @@protoc_insertion_point(field_mutable:PTP.Switch.SwitchPtpReq.to_adr)
  return _s;
}
inline const std::string& SwitchPtpReq::_internal_to_adr() const {
  return _impl_.to_adr_.Get();
}
inline void SwitchPtpReq::_internal_set_to_adr(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.to_adr_.Set(value, GetArenaForAllocation());
}
inline std::string* SwitchPtpReq::_internal_mutable_to_adr() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.to_adr_.Mutable(GetArenaForAllocation());
}
inline std::string* SwitchPtpReq::release_to_adr() {
  // @@protoc_insertion_point(field_release:PTP.Switch.SwitchPtpReq.to_adr)
  if (!_internal_has_to_adr()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.to_adr_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.to_adr_.IsDefault()) {
    _impl_.to_adr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SwitchPtpReq::set_allocated_to_adr(std::string* to_adr) {
  if (to_adr != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.to_adr_.SetAllocated(to_adr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.to_adr_.IsDefault()) {
    _impl_.to_adr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Switch.SwitchPtpReq.to_adr)
}

// required string data = 2;
inline bool SwitchPtpReq::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SwitchPtpReq::has_data() const {
  return _internal_has_data();
}
inline void SwitchPtpReq::clear_data() {
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SwitchPtpReq::data() const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchPtpReq.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwitchPtpReq::set_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Switch.SwitchPtpReq.data)
}
inline std::string* SwitchPtpReq::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:PTP.Switch.SwitchPtpReq.data)
  return _s;
}
inline const std::string& SwitchPtpReq::_internal_data() const {
  return _impl_.data_.Get();
}
inline void SwitchPtpReq::_internal_set_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* SwitchPtpReq::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* SwitchPtpReq::release_data() {
  // @@protoc_insertion_point(field_release:PTP.Switch.SwitchPtpReq.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SwitchPtpReq::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Switch.SwitchPtpReq.data)
}

// required .PTP.Common.SwitchType switch_type = 3;
inline bool SwitchPtpReq::_internal_has_switch_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SwitchPtpReq::has_switch_type() const {
  return _internal_has_switch_type();
}
inline void SwitchPtpReq::clear_switch_type() {
  _impl_.switch_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::PTP::Common::SwitchType SwitchPtpReq::_internal_switch_type() const {
  return static_cast< ::PTP::Common::SwitchType >(_impl_.switch_type_);
}
inline ::PTP::Common::SwitchType SwitchPtpReq::switch_type() const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchPtpReq.switch_type)
  return _internal_switch_type();
}
inline void SwitchPtpReq::_internal_set_switch_type(::PTP::Common::SwitchType value) {
  assert(::PTP::Common::SwitchType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.switch_type_ = value;
}
inline void SwitchPtpReq::set_switch_type(::PTP::Common::SwitchType value) {
  _internal_set_switch_type(value);
  // @@protoc_insertion_point(field_set:PTP.Switch.SwitchPtpReq.switch_type)
}

// -------------------------------------------------------------------

// SwitchPtpRes

// required .PTP.Common.ERR error = 1;
inline bool SwitchPtpRes::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SwitchPtpRes::has_error() const {
  return _internal_has_error();
}
inline void SwitchPtpRes::clear_error() {
  _impl_.error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::PTP::Common::ERR SwitchPtpRes::_internal_error() const {
  return static_cast< ::PTP::Common::ERR >(_impl_.error_);
}
inline ::PTP::Common::ERR SwitchPtpRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchPtpRes.error)
  return _internal_error();
}
inline void SwitchPtpRes::_internal_set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_ = value;
}
inline void SwitchPtpRes::set_error(::PTP::Common::ERR value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:PTP.Switch.SwitchPtpRes.error)
}

// -------------------------------------------------------------------

// SwitchPtpNotify

// required string from_adr = 1;
inline bool SwitchPtpNotify::_internal_has_from_adr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SwitchPtpNotify::has_from_adr() const {
  return _internal_has_from_adr();
}
inline void SwitchPtpNotify::clear_from_adr() {
  _impl_.from_adr_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SwitchPtpNotify::from_adr() const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchPtpNotify.from_adr)
  return _internal_from_adr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwitchPtpNotify::set_from_adr(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.from_adr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Switch.SwitchPtpNotify.from_adr)
}
inline std::string* SwitchPtpNotify::mutable_from_adr() {
  std::string* _s = _internal_mutable_from_adr();
  // @@protoc_insertion_point(field_mutable:PTP.Switch.SwitchPtpNotify.from_adr)
  return _s;
}
inline const std::string& SwitchPtpNotify::_internal_from_adr() const {
  return _impl_.from_adr_.Get();
}
inline void SwitchPtpNotify::_internal_set_from_adr(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.from_adr_.Set(value, GetArenaForAllocation());
}
inline std::string* SwitchPtpNotify::_internal_mutable_from_adr() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.from_adr_.Mutable(GetArenaForAllocation());
}
inline std::string* SwitchPtpNotify::release_from_adr() {
  // @@protoc_insertion_point(field_release:PTP.Switch.SwitchPtpNotify.from_adr)
  if (!_internal_has_from_adr()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.from_adr_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.from_adr_.IsDefault()) {
    _impl_.from_adr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SwitchPtpNotify::set_allocated_from_adr(std::string* from_adr) {
  if (from_adr != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.from_adr_.SetAllocated(from_adr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.from_adr_.IsDefault()) {
    _impl_.from_adr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Switch.SwitchPtpNotify.from_adr)
}

// required string data = 2;
inline bool SwitchPtpNotify::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SwitchPtpNotify::has_data() const {
  return _internal_has_data();
}
inline void SwitchPtpNotify::clear_data() {
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SwitchPtpNotify::data() const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchPtpNotify.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwitchPtpNotify::set_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Switch.SwitchPtpNotify.data)
}
inline std::string* SwitchPtpNotify::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:PTP.Switch.SwitchPtpNotify.data)
  return _s;
}
inline const std::string& SwitchPtpNotify::_internal_data() const {
  return _impl_.data_.Get();
}
inline void SwitchPtpNotify::_internal_set_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* SwitchPtpNotify::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* SwitchPtpNotify::release_data() {
  // @@protoc_insertion_point(field_release:PTP.Switch.SwitchPtpNotify.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SwitchPtpNotify::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Switch.SwitchPtpNotify.data)
}

// required .PTP.Common.SwitchType switch_type = 3;
inline bool SwitchPtpNotify::_internal_has_switch_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SwitchPtpNotify::has_switch_type() const {
  return _internal_has_switch_type();
}
inline void SwitchPtpNotify::clear_switch_type() {
  _impl_.switch_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::PTP::Common::SwitchType SwitchPtpNotify::_internal_switch_type() const {
  return static_cast< ::PTP::Common::SwitchType >(_impl_.switch_type_);
}
inline ::PTP::Common::SwitchType SwitchPtpNotify::switch_type() const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchPtpNotify.switch_type)
  return _internal_switch_type();
}
inline void SwitchPtpNotify::_internal_set_switch_type(::PTP::Common::SwitchType value) {
  assert(::PTP::Common::SwitchType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.switch_type_ = value;
}
inline void SwitchPtpNotify::set_switch_type(::PTP::Common::SwitchType value) {
  _internal_set_switch_type(value);
  // @@protoc_insertion_point(field_set:PTP.Switch.SwitchPtpNotify.switch_type)
}

// -------------------------------------------------------------------

// SwitchDevicesReq

// required string browser_name = 1;
inline bool SwitchDevicesReq::_internal_has_browser_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SwitchDevicesReq::has_browser_name() const {
  return _internal_has_browser_name();
}
inline void SwitchDevicesReq::clear_browser_name() {
  _impl_.browser_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SwitchDevicesReq::browser_name() const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchDevicesReq.browser_name)
  return _internal_browser_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwitchDevicesReq::set_browser_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.browser_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Switch.SwitchDevicesReq.browser_name)
}
inline std::string* SwitchDevicesReq::mutable_browser_name() {
  std::string* _s = _internal_mutable_browser_name();
  // @@protoc_insertion_point(field_mutable:PTP.Switch.SwitchDevicesReq.browser_name)
  return _s;
}
inline const std::string& SwitchDevicesReq::_internal_browser_name() const {
  return _impl_.browser_name_.Get();
}
inline void SwitchDevicesReq::_internal_set_browser_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.browser_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SwitchDevicesReq::_internal_mutable_browser_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.browser_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SwitchDevicesReq::release_browser_name() {
  // @@protoc_insertion_point(field_release:PTP.Switch.SwitchDevicesReq.browser_name)
  if (!_internal_has_browser_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.browser_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.browser_name_.IsDefault()) {
    _impl_.browser_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SwitchDevicesReq::set_allocated_browser_name(std::string* browser_name) {
  if (browser_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.browser_name_.SetAllocated(browser_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.browser_name_.IsDefault()) {
    _impl_.browser_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Switch.SwitchDevicesReq.browser_name)
}

// required string browser_version = 2;
inline bool SwitchDevicesReq::_internal_has_browser_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SwitchDevicesReq::has_browser_version() const {
  return _internal_has_browser_version();
}
inline void SwitchDevicesReq::clear_browser_version() {
  _impl_.browser_version_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SwitchDevicesReq::browser_version() const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchDevicesReq.browser_version)
  return _internal_browser_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwitchDevicesReq::set_browser_version(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.browser_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Switch.SwitchDevicesReq.browser_version)
}
inline std::string* SwitchDevicesReq::mutable_browser_version() {
  std::string* _s = _internal_mutable_browser_version();
  // @@protoc_insertion_point(field_mutable:PTP.Switch.SwitchDevicesReq.browser_version)
  return _s;
}
inline const std::string& SwitchDevicesReq::_internal_browser_version() const {
  return _impl_.browser_version_.Get();
}
inline void SwitchDevicesReq::_internal_set_browser_version(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.browser_version_.Set(value, GetArenaForAllocation());
}
inline std::string* SwitchDevicesReq::_internal_mutable_browser_version() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.browser_version_.Mutable(GetArenaForAllocation());
}
inline std::string* SwitchDevicesReq::release_browser_version() {
  // @@protoc_insertion_point(field_release:PTP.Switch.SwitchDevicesReq.browser_version)
  if (!_internal_has_browser_version()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.browser_version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.browser_version_.IsDefault()) {
    _impl_.browser_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SwitchDevicesReq::set_allocated_browser_version(std::string* browser_version) {
  if (browser_version != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.browser_version_.SetAllocated(browser_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.browser_version_.IsDefault()) {
    _impl_.browser_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Switch.SwitchDevicesReq.browser_version)
}

// required string os_name = 3;
inline bool SwitchDevicesReq::_internal_has_os_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SwitchDevicesReq::has_os_name() const {
  return _internal_has_os_name();
}
inline void SwitchDevicesReq::clear_os_name() {
  _impl_.os_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SwitchDevicesReq::os_name() const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchDevicesReq.os_name)
  return _internal_os_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwitchDevicesReq::set_os_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.os_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Switch.SwitchDevicesReq.os_name)
}
inline std::string* SwitchDevicesReq::mutable_os_name() {
  std::string* _s = _internal_mutable_os_name();
  // @@protoc_insertion_point(field_mutable:PTP.Switch.SwitchDevicesReq.os_name)
  return _s;
}
inline const std::string& SwitchDevicesReq::_internal_os_name() const {
  return _impl_.os_name_.Get();
}
inline void SwitchDevicesReq::_internal_set_os_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.os_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SwitchDevicesReq::_internal_mutable_os_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.os_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SwitchDevicesReq::release_os_name() {
  // @@protoc_insertion_point(field_release:PTP.Switch.SwitchDevicesReq.os_name)
  if (!_internal_has_os_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.os_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.os_name_.IsDefault()) {
    _impl_.os_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SwitchDevicesReq::set_allocated_os_name(std::string* os_name) {
  if (os_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.os_name_.SetAllocated(os_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.os_name_.IsDefault()) {
    _impl_.os_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Switch.SwitchDevicesReq.os_name)
}

// required string os_version = 4;
inline bool SwitchDevicesReq::_internal_has_os_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SwitchDevicesReq::has_os_version() const {
  return _internal_has_os_version();
}
inline void SwitchDevicesReq::clear_os_version() {
  _impl_.os_version_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SwitchDevicesReq::os_version() const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchDevicesReq.os_version)
  return _internal_os_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwitchDevicesReq::set_os_version(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.os_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Switch.SwitchDevicesReq.os_version)
}
inline std::string* SwitchDevicesReq::mutable_os_version() {
  std::string* _s = _internal_mutable_os_version();
  // @@protoc_insertion_point(field_mutable:PTP.Switch.SwitchDevicesReq.os_version)
  return _s;
}
inline const std::string& SwitchDevicesReq::_internal_os_version() const {
  return _impl_.os_version_.Get();
}
inline void SwitchDevicesReq::_internal_set_os_version(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.os_version_.Set(value, GetArenaForAllocation());
}
inline std::string* SwitchDevicesReq::_internal_mutable_os_version() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.os_version_.Mutable(GetArenaForAllocation());
}
inline std::string* SwitchDevicesReq::release_os_version() {
  // @@protoc_insertion_point(field_release:PTP.Switch.SwitchDevicesReq.os_version)
  if (!_internal_has_os_version()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.os_version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.os_version_.IsDefault()) {
    _impl_.os_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SwitchDevicesReq::set_allocated_os_version(std::string* os_version) {
  if (os_version != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.os_version_.SetAllocated(os_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.os_version_.IsDefault()) {
    _impl_.os_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Switch.SwitchDevicesReq.os_version)
}

// required bool is_intel = 5;
inline bool SwitchDevicesReq::_internal_has_is_intel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SwitchDevicesReq::has_is_intel() const {
  return _internal_has_is_intel();
}
inline void SwitchDevicesReq::clear_is_intel() {
  _impl_.is_intel_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool SwitchDevicesReq::_internal_is_intel() const {
  return _impl_.is_intel_;
}
inline bool SwitchDevicesReq::is_intel() const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchDevicesReq.is_intel)
  return _internal_is_intel();
}
inline void SwitchDevicesReq::_internal_set_is_intel(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.is_intel_ = value;
}
inline void SwitchDevicesReq::set_is_intel(bool value) {
  _internal_set_is_intel(value);
  // @@protoc_insertion_point(field_set:PTP.Switch.SwitchDevicesReq.is_intel)
}

// required string client_id = 9;
inline bool SwitchDevicesReq::_internal_has_client_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SwitchDevicesReq::has_client_id() const {
  return _internal_has_client_id();
}
inline void SwitchDevicesReq::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SwitchDevicesReq::client_id() const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchDevicesReq.client_id)
  return _internal_client_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwitchDevicesReq::set_client_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.client_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Switch.SwitchDevicesReq.client_id)
}
inline std::string* SwitchDevicesReq::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:PTP.Switch.SwitchDevicesReq.client_id)
  return _s;
}
inline const std::string& SwitchDevicesReq::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void SwitchDevicesReq::_internal_set_client_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SwitchDevicesReq::_internal_mutable_client_id() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.client_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SwitchDevicesReq::release_client_id() {
  // @@protoc_insertion_point(field_release:PTP.Switch.SwitchDevicesReq.client_id)
  if (!_internal_has_client_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.client_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_id_.IsDefault()) {
    _impl_.client_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SwitchDevicesReq::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.client_id_.SetAllocated(client_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_id_.IsDefault()) {
    _impl_.client_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Switch.SwitchDevicesReq.client_id)
}

// -------------------------------------------------------------------

// SwitchDevicesNotify

// repeated .PTP.Common.DevicesInfo devices = 1;
inline int SwitchDevicesNotify::_internal_devices_size() const {
  return _impl_.devices_.size();
}
inline int SwitchDevicesNotify::devices_size() const {
  return _internal_devices_size();
}
inline ::PTP::Common::DevicesInfo* SwitchDevicesNotify::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:PTP.Switch.SwitchDevicesNotify.devices)
  return _impl_.devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::DevicesInfo >*
SwitchDevicesNotify::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:PTP.Switch.SwitchDevicesNotify.devices)
  return &_impl_.devices_;
}
inline const ::PTP::Common::DevicesInfo& SwitchDevicesNotify::_internal_devices(int index) const {
  return _impl_.devices_.Get(index);
}
inline const ::PTP::Common::DevicesInfo& SwitchDevicesNotify::devices(int index) const {
  // @@protoc_insertion_point(field_get:PTP.Switch.SwitchDevicesNotify.devices)
  return _internal_devices(index);
}
inline ::PTP::Common::DevicesInfo* SwitchDevicesNotify::_internal_add_devices() {
  return _impl_.devices_.Add();
}
inline ::PTP::Common::DevicesInfo* SwitchDevicesNotify::add_devices() {
  ::PTP::Common::DevicesInfo* _add = _internal_add_devices();
  // @@protoc_insertion_point(field_add:PTP.Switch.SwitchDevicesNotify.devices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::DevicesInfo >&
SwitchDevicesNotify::devices() const {
  // @@protoc_insertion_point(field_list:PTP.Switch.SwitchDevicesNotify.devices)
  return _impl_.devices_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Switch
}  // namespace PTP

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PTP_2eSwitch_2eproto
