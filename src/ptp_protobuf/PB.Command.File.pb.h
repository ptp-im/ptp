// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PB.Command.File.proto

#ifndef PROTOBUF_INCLUDED_PB_2eCommand_2eFile_2eproto
#define PROTOBUF_INCLUDED_PB_2eCommand_2eFile_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "PB.Global.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_PB_2eCommand_2eFile_2eproto 

namespace protobuf_PB_2eCommand_2eFile_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_PB_2eCommand_2eFile_2eproto
namespace PB {
namespace Command {
class FileDownloadRequest;
class FileDownloadRequestDefaultTypeInternal;
extern FileDownloadRequestDefaultTypeInternal _FileDownloadRequest_default_instance_;
class FileDownloadResponse;
class FileDownloadResponseDefaultTypeInternal;
extern FileDownloadResponseDefaultTypeInternal _FileDownloadResponse_default_instance_;
class FileUploadRequest;
class FileUploadRequestDefaultTypeInternal;
extern FileUploadRequestDefaultTypeInternal _FileUploadRequest_default_instance_;
class FileUploadResponse;
class FileUploadResponseDefaultTypeInternal;
extern FileUploadResponseDefaultTypeInternal _FileUploadResponse_default_instance_;
}  // namespace Command
}  // namespace PB
namespace google {
namespace protobuf {
template<> ::PB::Command::FileDownloadRequest* Arena::CreateMaybeMessage<::PB::Command::FileDownloadRequest>(Arena*);
template<> ::PB::Command::FileDownloadResponse* Arena::CreateMaybeMessage<::PB::Command::FileDownloadResponse>(Arena*);
template<> ::PB::Command::FileUploadRequest* Arena::CreateMaybeMessage<::PB::Command::FileUploadRequest>(Arena*);
template<> ::PB::Command::FileUploadResponse* Arena::CreateMaybeMessage<::PB::Command::FileUploadResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace PB {
namespace Command {

// ===================================================================

class FileUploadRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PB.Command.FileUploadRequest) */ {
 public:
  FileUploadRequest();
  virtual ~FileUploadRequest();

  FileUploadRequest(const FileUploadRequest& from);

  inline FileUploadRequest& operator=(const FileUploadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileUploadRequest(FileUploadRequest&& from) noexcept
    : FileUploadRequest() {
    *this = ::std::move(from);
  }

  inline FileUploadRequest& operator=(FileUploadRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FileUploadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileUploadRequest* internal_default_instance() {
    return reinterpret_cast<const FileUploadRequest*>(
               &_FileUploadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FileUploadRequest* other);
  friend void swap(FileUploadRequest& a, FileUploadRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileUploadRequest* New() const final {
    return CreateMaybeMessage<FileUploadRequest>(NULL);
  }

  FileUploadRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileUploadRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const FileUploadRequest& from);
  void MergeFrom(const FileUploadRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileUploadRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string file_id = 1;
  bool has_file_id() const;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  const ::std::string& file_id() const;
  void set_file_id(const ::std::string& value);
  #if LANG_CXX11
  void set_file_id(::std::string&& value);
  #endif
  void set_file_id(const char* value);
  void set_file_id(const char* value, size_t size);
  ::std::string* mutable_file_id();
  ::std::string* release_file_id();
  void set_allocated_file_id(::std::string* file_id);

  // required bytes file_data = 4;
  bool has_file_data() const;
  void clear_file_data();
  static const int kFileDataFieldNumber = 4;
  const ::std::string& file_data() const;
  void set_file_data(const ::std::string& value);
  #if LANG_CXX11
  void set_file_data(::std::string&& value);
  #endif
  void set_file_data(const char* value);
  void set_file_data(const void* value, size_t size);
  ::std::string* mutable_file_data();
  ::std::string* release_file_data();
  void set_allocated_file_data(::std::string* file_data);

  // required uint32 file_part = 2;
  bool has_file_part() const;
  void clear_file_part();
  static const int kFilePartFieldNumber = 2;
  ::google::protobuf::uint32 file_part() const;
  void set_file_part(::google::protobuf::uint32 value);

  // required uint32 file_total_parts = 3;
  bool has_file_total_parts() const;
  void clear_file_total_parts();
  static const int kFileTotalPartsFieldNumber = 3;
  ::google::protobuf::uint32 file_total_parts() const;
  void set_file_total_parts(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.Command.FileUploadRequest)
 private:
  void set_has_file_id();
  void clear_has_file_id();
  void set_has_file_part();
  void clear_has_file_part();
  void set_has_file_total_parts();
  void clear_has_file_total_parts();
  void set_has_file_data();
  void clear_has_file_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_id_;
  ::google::protobuf::internal::ArenaStringPtr file_data_;
  ::google::protobuf::uint32 file_part_;
  ::google::protobuf::uint32 file_total_parts_;
  friend struct ::protobuf_PB_2eCommand_2eFile_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileUploadResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PB.Command.FileUploadResponse) */ {
 public:
  FileUploadResponse();
  virtual ~FileUploadResponse();

  FileUploadResponse(const FileUploadResponse& from);

  inline FileUploadResponse& operator=(const FileUploadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileUploadResponse(FileUploadResponse&& from) noexcept
    : FileUploadResponse() {
    *this = ::std::move(from);
  }

  inline FileUploadResponse& operator=(FileUploadResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FileUploadResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileUploadResponse* internal_default_instance() {
    return reinterpret_cast<const FileUploadResponse*>(
               &_FileUploadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FileUploadResponse* other);
  friend void swap(FileUploadResponse& a, FileUploadResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileUploadResponse* New() const final {
    return CreateMaybeMessage<FileUploadResponse>(NULL);
  }

  FileUploadResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileUploadResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const FileUploadResponse& from);
  void MergeFrom(const FileUploadResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileUploadResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string file_path = 1;
  bool has_file_path() const;
  void clear_file_path();
  static const int kFilePathFieldNumber = 1;
  const ::std::string& file_path() const;
  void set_file_path(const ::std::string& value);
  #if LANG_CXX11
  void set_file_path(::std::string&& value);
  #endif
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  ::std::string* mutable_file_path();
  ::std::string* release_file_path();
  void set_allocated_file_path(::std::string* file_path);

  // required .PB.ERR error = 1280;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1280;
  ::PB::ERR error() const;
  void set_error(::PB::ERR value);

  // @@protoc_insertion_point(class_scope:PB.Command.FileUploadResponse)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_file_path();
  void clear_has_file_path();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_path_;
  int error_;
  friend struct ::protobuf_PB_2eCommand_2eFile_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileDownloadRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PB.Command.FileDownloadRequest) */ {
 public:
  FileDownloadRequest();
  virtual ~FileDownloadRequest();

  FileDownloadRequest(const FileDownloadRequest& from);

  inline FileDownloadRequest& operator=(const FileDownloadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileDownloadRequest(FileDownloadRequest&& from) noexcept
    : FileDownloadRequest() {
    *this = ::std::move(from);
  }

  inline FileDownloadRequest& operator=(FileDownloadRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FileDownloadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileDownloadRequest* internal_default_instance() {
    return reinterpret_cast<const FileDownloadRequest*>(
               &_FileDownloadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FileDownloadRequest* other);
  friend void swap(FileDownloadRequest& a, FileDownloadRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileDownloadRequest* New() const final {
    return CreateMaybeMessage<FileDownloadRequest>(NULL);
  }

  FileDownloadRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileDownloadRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const FileDownloadRequest& from);
  void MergeFrom(const FileDownloadRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileDownloadRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string file_path = 1;
  bool has_file_path() const;
  void clear_file_path();
  static const int kFilePathFieldNumber = 1;
  const ::std::string& file_path() const;
  void set_file_path(const ::std::string& value);
  #if LANG_CXX11
  void set_file_path(::std::string&& value);
  #endif
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  ::std::string* mutable_file_path();
  ::std::string* release_file_path();
  void set_allocated_file_path(::std::string* file_path);

  // @@protoc_insertion_point(class_scope:PB.Command.FileDownloadRequest)
 private:
  void set_has_file_path();
  void clear_has_file_path();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_path_;
  friend struct ::protobuf_PB_2eCommand_2eFile_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileDownloadResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PB.Command.FileDownloadResponse) */ {
 public:
  FileDownloadResponse();
  virtual ~FileDownloadResponse();

  FileDownloadResponse(const FileDownloadResponse& from);

  inline FileDownloadResponse& operator=(const FileDownloadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileDownloadResponse(FileDownloadResponse&& from) noexcept
    : FileDownloadResponse() {
    *this = ::std::move(from);
  }

  inline FileDownloadResponse& operator=(FileDownloadResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FileDownloadResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileDownloadResponse* internal_default_instance() {
    return reinterpret_cast<const FileDownloadResponse*>(
               &_FileDownloadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FileDownloadResponse* other);
  friend void swap(FileDownloadResponse& a, FileDownloadResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileDownloadResponse* New() const final {
    return CreateMaybeMessage<FileDownloadResponse>(NULL);
  }

  FileDownloadResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileDownloadResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const FileDownloadResponse& from);
  void MergeFrom(const FileDownloadResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileDownloadResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes file_data = 1;
  bool has_file_data() const;
  void clear_file_data();
  static const int kFileDataFieldNumber = 1;
  const ::std::string& file_data() const;
  void set_file_data(const ::std::string& value);
  #if LANG_CXX11
  void set_file_data(::std::string&& value);
  #endif
  void set_file_data(const char* value);
  void set_file_data(const void* value, size_t size);
  ::std::string* mutable_file_data();
  ::std::string* release_file_data();
  void set_allocated_file_data(::std::string* file_data);

  // required .PB.ERR error = 1280;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1280;
  ::PB::ERR error() const;
  void set_error(::PB::ERR value);

  // @@protoc_insertion_point(class_scope:PB.Command.FileDownloadResponse)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_file_data();
  void clear_has_file_data();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_data_;
  int error_;
  friend struct ::protobuf_PB_2eCommand_2eFile_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileUploadRequest

// required string file_id = 1;
inline bool FileUploadRequest::has_file_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileUploadRequest::set_has_file_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileUploadRequest::clear_has_file_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileUploadRequest::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_id();
}
inline const ::std::string& FileUploadRequest::file_id() const {
  // @@protoc_insertion_point(field_get:PB.Command.FileUploadRequest.file_id)
  return file_id_.GetNoArena();
}
inline void FileUploadRequest::set_file_id(const ::std::string& value) {
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.Command.FileUploadRequest.file_id)
}
#if LANG_CXX11
inline void FileUploadRequest::set_file_id(::std::string&& value) {
  set_has_file_id();
  file_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.Command.FileUploadRequest.file_id)
}
#endif
inline void FileUploadRequest::set_file_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.Command.FileUploadRequest.file_id)
}
inline void FileUploadRequest::set_file_id(const char* value, size_t size) {
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.Command.FileUploadRequest.file_id)
}
inline ::std::string* FileUploadRequest::mutable_file_id() {
  set_has_file_id();
  // @@protoc_insertion_point(field_mutable:PB.Command.FileUploadRequest.file_id)
  return file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileUploadRequest::release_file_id() {
  // @@protoc_insertion_point(field_release:PB.Command.FileUploadRequest.file_id)
  if (!has_file_id()) {
    return NULL;
  }
  clear_has_file_id();
  return file_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileUploadRequest::set_allocated_file_id(::std::string* file_id) {
  if (file_id != NULL) {
    set_has_file_id();
  } else {
    clear_has_file_id();
  }
  file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:PB.Command.FileUploadRequest.file_id)
}

// required uint32 file_part = 2;
inline bool FileUploadRequest::has_file_part() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileUploadRequest::set_has_file_part() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileUploadRequest::clear_has_file_part() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileUploadRequest::clear_file_part() {
  file_part_ = 0u;
  clear_has_file_part();
}
inline ::google::protobuf::uint32 FileUploadRequest::file_part() const {
  // @@protoc_insertion_point(field_get:PB.Command.FileUploadRequest.file_part)
  return file_part_;
}
inline void FileUploadRequest::set_file_part(::google::protobuf::uint32 value) {
  set_has_file_part();
  file_part_ = value;
  // @@protoc_insertion_point(field_set:PB.Command.FileUploadRequest.file_part)
}

// required uint32 file_total_parts = 3;
inline bool FileUploadRequest::has_file_total_parts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileUploadRequest::set_has_file_total_parts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FileUploadRequest::clear_has_file_total_parts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FileUploadRequest::clear_file_total_parts() {
  file_total_parts_ = 0u;
  clear_has_file_total_parts();
}
inline ::google::protobuf::uint32 FileUploadRequest::file_total_parts() const {
  // @@protoc_insertion_point(field_get:PB.Command.FileUploadRequest.file_total_parts)
  return file_total_parts_;
}
inline void FileUploadRequest::set_file_total_parts(::google::protobuf::uint32 value) {
  set_has_file_total_parts();
  file_total_parts_ = value;
  // @@protoc_insertion_point(field_set:PB.Command.FileUploadRequest.file_total_parts)
}

// required bytes file_data = 4;
inline bool FileUploadRequest::has_file_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileUploadRequest::set_has_file_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileUploadRequest::clear_has_file_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileUploadRequest::clear_file_data() {
  file_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_data();
}
inline const ::std::string& FileUploadRequest::file_data() const {
  // @@protoc_insertion_point(field_get:PB.Command.FileUploadRequest.file_data)
  return file_data_.GetNoArena();
}
inline void FileUploadRequest::set_file_data(const ::std::string& value) {
  set_has_file_data();
  file_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.Command.FileUploadRequest.file_data)
}
#if LANG_CXX11
inline void FileUploadRequest::set_file_data(::std::string&& value) {
  set_has_file_data();
  file_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.Command.FileUploadRequest.file_data)
}
#endif
inline void FileUploadRequest::set_file_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_data();
  file_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.Command.FileUploadRequest.file_data)
}
inline void FileUploadRequest::set_file_data(const void* value, size_t size) {
  set_has_file_data();
  file_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.Command.FileUploadRequest.file_data)
}
inline ::std::string* FileUploadRequest::mutable_file_data() {
  set_has_file_data();
  // @@protoc_insertion_point(field_mutable:PB.Command.FileUploadRequest.file_data)
  return file_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileUploadRequest::release_file_data() {
  // @@protoc_insertion_point(field_release:PB.Command.FileUploadRequest.file_data)
  if (!has_file_data()) {
    return NULL;
  }
  clear_has_file_data();
  return file_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileUploadRequest::set_allocated_file_data(::std::string* file_data) {
  if (file_data != NULL) {
    set_has_file_data();
  } else {
    clear_has_file_data();
  }
  file_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_data);
  // @@protoc_insertion_point(field_set_allocated:PB.Command.FileUploadRequest.file_data)
}

// -------------------------------------------------------------------

// FileUploadResponse

// required .PB.ERR error = 1280;
inline bool FileUploadResponse::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileUploadResponse::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileUploadResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileUploadResponse::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::PB::ERR FileUploadResponse::error() const {
  // @@protoc_insertion_point(field_get:PB.Command.FileUploadResponse.error)
  return static_cast< ::PB::ERR >(error_);
}
inline void FileUploadResponse::set_error(::PB::ERR value) {
  assert(::PB::ERR_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:PB.Command.FileUploadResponse.error)
}

// required string file_path = 1;
inline bool FileUploadResponse::has_file_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileUploadResponse::set_has_file_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileUploadResponse::clear_has_file_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileUploadResponse::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_path();
}
inline const ::std::string& FileUploadResponse::file_path() const {
  // @@protoc_insertion_point(field_get:PB.Command.FileUploadResponse.file_path)
  return file_path_.GetNoArena();
}
inline void FileUploadResponse::set_file_path(const ::std::string& value) {
  set_has_file_path();
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.Command.FileUploadResponse.file_path)
}
#if LANG_CXX11
inline void FileUploadResponse::set_file_path(::std::string&& value) {
  set_has_file_path();
  file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.Command.FileUploadResponse.file_path)
}
#endif
inline void FileUploadResponse::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_path();
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.Command.FileUploadResponse.file_path)
}
inline void FileUploadResponse::set_file_path(const char* value, size_t size) {
  set_has_file_path();
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.Command.FileUploadResponse.file_path)
}
inline ::std::string* FileUploadResponse::mutable_file_path() {
  set_has_file_path();
  // @@protoc_insertion_point(field_mutable:PB.Command.FileUploadResponse.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileUploadResponse::release_file_path() {
  // @@protoc_insertion_point(field_release:PB.Command.FileUploadResponse.file_path)
  if (!has_file_path()) {
    return NULL;
  }
  clear_has_file_path();
  return file_path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileUploadResponse::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    set_has_file_path();
  } else {
    clear_has_file_path();
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:PB.Command.FileUploadResponse.file_path)
}

// -------------------------------------------------------------------

// FileDownloadRequest

// required string file_path = 1;
inline bool FileDownloadRequest::has_file_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileDownloadRequest::set_has_file_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileDownloadRequest::clear_has_file_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileDownloadRequest::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_path();
}
inline const ::std::string& FileDownloadRequest::file_path() const {
  // @@protoc_insertion_point(field_get:PB.Command.FileDownloadRequest.file_path)
  return file_path_.GetNoArena();
}
inline void FileDownloadRequest::set_file_path(const ::std::string& value) {
  set_has_file_path();
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.Command.FileDownloadRequest.file_path)
}
#if LANG_CXX11
inline void FileDownloadRequest::set_file_path(::std::string&& value) {
  set_has_file_path();
  file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.Command.FileDownloadRequest.file_path)
}
#endif
inline void FileDownloadRequest::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_path();
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.Command.FileDownloadRequest.file_path)
}
inline void FileDownloadRequest::set_file_path(const char* value, size_t size) {
  set_has_file_path();
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.Command.FileDownloadRequest.file_path)
}
inline ::std::string* FileDownloadRequest::mutable_file_path() {
  set_has_file_path();
  // @@protoc_insertion_point(field_mutable:PB.Command.FileDownloadRequest.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileDownloadRequest::release_file_path() {
  // @@protoc_insertion_point(field_release:PB.Command.FileDownloadRequest.file_path)
  if (!has_file_path()) {
    return NULL;
  }
  clear_has_file_path();
  return file_path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileDownloadRequest::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    set_has_file_path();
  } else {
    clear_has_file_path();
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:PB.Command.FileDownloadRequest.file_path)
}

// -------------------------------------------------------------------

// FileDownloadResponse

// required .PB.ERR error = 1280;
inline bool FileDownloadResponse::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileDownloadResponse::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileDownloadResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileDownloadResponse::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::PB::ERR FileDownloadResponse::error() const {
  // @@protoc_insertion_point(field_get:PB.Command.FileDownloadResponse.error)
  return static_cast< ::PB::ERR >(error_);
}
inline void FileDownloadResponse::set_error(::PB::ERR value) {
  assert(::PB::ERR_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:PB.Command.FileDownloadResponse.error)
}

// optional bytes file_data = 1;
inline bool FileDownloadResponse::has_file_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileDownloadResponse::set_has_file_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileDownloadResponse::clear_has_file_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileDownloadResponse::clear_file_data() {
  file_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_data();
}
inline const ::std::string& FileDownloadResponse::file_data() const {
  // @@protoc_insertion_point(field_get:PB.Command.FileDownloadResponse.file_data)
  return file_data_.GetNoArena();
}
inline void FileDownloadResponse::set_file_data(const ::std::string& value) {
  set_has_file_data();
  file_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.Command.FileDownloadResponse.file_data)
}
#if LANG_CXX11
inline void FileDownloadResponse::set_file_data(::std::string&& value) {
  set_has_file_data();
  file_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.Command.FileDownloadResponse.file_data)
}
#endif
inline void FileDownloadResponse::set_file_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_data();
  file_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.Command.FileDownloadResponse.file_data)
}
inline void FileDownloadResponse::set_file_data(const void* value, size_t size) {
  set_has_file_data();
  file_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.Command.FileDownloadResponse.file_data)
}
inline ::std::string* FileDownloadResponse::mutable_file_data() {
  set_has_file_data();
  // @@protoc_insertion_point(field_mutable:PB.Command.FileDownloadResponse.file_data)
  return file_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileDownloadResponse::release_file_data() {
  // @@protoc_insertion_point(field_release:PB.Command.FileDownloadResponse.file_data)
  if (!has_file_data()) {
    return NULL;
  }
  clear_has_file_data();
  return file_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileDownloadResponse::set_allocated_file_data(::std::string* file_data) {
  if (file_data != NULL) {
    set_has_file_data();
  } else {
    clear_has_file_data();
  }
  file_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_data);
  // @@protoc_insertion_point(field_set_allocated:PB.Command.FileDownloadResponse.file_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Command
}  // namespace PB

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_PB_2eCommand_2eFile_2eproto
