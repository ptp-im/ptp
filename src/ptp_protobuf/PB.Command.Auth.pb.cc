// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PB.Command.Auth.proto

#include "PB.Command.Auth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_PB_2eUser_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PB_2eUser_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_User;
}  // namespace protobuf_PB_2eUser_2eproto
namespace PB {
namespace Command {
class AuthCaptchaRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthCaptchaRequest>
      _instance;
} _AuthCaptchaRequest_default_instance_;
class AuthCaptchaResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthCaptchaResponse>
      _instance;
} _AuthCaptchaResponse_default_instance_;
class AuthLoginRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthLoginRequest>
      _instance;
} _AuthLoginRequest_default_instance_;
class AuthLoginResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthLoginResponse>
      _instance;
} _AuthLoginResponse_default_instance_;
}  // namespace Command
}  // namespace PB
namespace protobuf_PB_2eCommand_2eAuth_2eproto {
static void InitDefaultsAuthCaptchaRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PB::Command::_AuthCaptchaRequest_default_instance_;
    new (ptr) ::PB::Command::AuthCaptchaRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PB::Command::AuthCaptchaRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AuthCaptchaRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthCaptchaRequest}, {}};

static void InitDefaultsAuthCaptchaResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PB::Command::_AuthCaptchaResponse_default_instance_;
    new (ptr) ::PB::Command::AuthCaptchaResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PB::Command::AuthCaptchaResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AuthCaptchaResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthCaptchaResponse}, {}};

static void InitDefaultsAuthLoginRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PB::Command::_AuthLoginRequest_default_instance_;
    new (ptr) ::PB::Command::AuthLoginRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PB::Command::AuthLoginRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AuthLoginRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthLoginRequest}, {}};

static void InitDefaultsAuthLoginResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PB::Command::_AuthLoginResponse_default_instance_;
    new (ptr) ::PB::Command::AuthLoginResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PB::Command::AuthLoginResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AuthLoginResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAuthLoginResponse}, {
      &protobuf_PB_2eUser_2eproto::scc_info_User.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_AuthCaptchaRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AuthCaptchaResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AuthLoginRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AuthLoginResponse.base);
}

}  // namespace protobuf_PB_2eCommand_2eAuth_2eproto
namespace PB {
namespace Command {

// ===================================================================

void AuthCaptchaRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthCaptchaRequest::AuthCaptchaRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PB_2eCommand_2eAuth_2eproto::scc_info_AuthCaptchaRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB.Command.AuthCaptchaRequest)
}
AuthCaptchaRequest::AuthCaptchaRequest(const AuthCaptchaRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PB.Command.AuthCaptchaRequest)
}

void AuthCaptchaRequest::SharedCtor() {
}

AuthCaptchaRequest::~AuthCaptchaRequest() {
  // @@protoc_insertion_point(destructor:PB.Command.AuthCaptchaRequest)
  SharedDtor();
}

void AuthCaptchaRequest::SharedDtor() {
}

void AuthCaptchaRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthCaptchaRequest& AuthCaptchaRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PB_2eCommand_2eAuth_2eproto::scc_info_AuthCaptchaRequest.base);
  return *internal_default_instance();
}


void AuthCaptchaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PB.Command.AuthCaptchaRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AuthCaptchaRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PB.Command.AuthCaptchaRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:PB.Command.AuthCaptchaRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB.Command.AuthCaptchaRequest)
  return false;
#undef DO_
}

void AuthCaptchaRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB.Command.AuthCaptchaRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PB.Command.AuthCaptchaRequest)
}

size_t AuthCaptchaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PB.Command.AuthCaptchaRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthCaptchaRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthCaptchaRequest*>(&from));
}

void AuthCaptchaRequest::MergeFrom(const AuthCaptchaRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PB.Command.AuthCaptchaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AuthCaptchaRequest::CopyFrom(const AuthCaptchaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PB.Command.AuthCaptchaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthCaptchaRequest::IsInitialized() const {
  return true;
}

void AuthCaptchaRequest::Swap(AuthCaptchaRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthCaptchaRequest::InternalSwap(AuthCaptchaRequest* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AuthCaptchaRequest::GetTypeName() const {
  return "PB.Command.AuthCaptchaRequest";
}


// ===================================================================

void AuthCaptchaResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthCaptchaResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthCaptchaResponse::AuthCaptchaResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PB_2eCommand_2eAuth_2eproto::scc_info_AuthCaptchaResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB.Command.AuthCaptchaResponse)
}
AuthCaptchaResponse::AuthCaptchaResponse(const AuthCaptchaResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:PB.Command.AuthCaptchaResponse)
}

void AuthCaptchaResponse::SharedCtor() {
  error_ = 0;
}

AuthCaptchaResponse::~AuthCaptchaResponse() {
  // @@protoc_insertion_point(destructor:PB.Command.AuthCaptchaResponse)
  SharedDtor();
}

void AuthCaptchaResponse::SharedDtor() {
}

void AuthCaptchaResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthCaptchaResponse& AuthCaptchaResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PB_2eCommand_2eAuth_2eproto::scc_info_AuthCaptchaResponse.base);
  return *internal_default_instance();
}


void AuthCaptchaResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:PB.Command.AuthCaptchaResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AuthCaptchaResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PB.Command.AuthCaptchaResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PB.ERR error = 1280;
      case 1280: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 10240 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::ERR_IsValid(value)) {
            set_error(static_cast< ::PB::ERR >(value));
          } else {
            unknown_fields_stream.WriteVarint32(10240u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB.Command.AuthCaptchaResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB.Command.AuthCaptchaResponse)
  return false;
#undef DO_
}

void AuthCaptchaResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB.Command.AuthCaptchaResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .PB.ERR error = 1280;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1280, this->error(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PB.Command.AuthCaptchaResponse)
}

size_t AuthCaptchaResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PB.Command.AuthCaptchaResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required .PB.ERR error = 1280;
  if (has_error()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthCaptchaResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthCaptchaResponse*>(&from));
}

void AuthCaptchaResponse::MergeFrom(const AuthCaptchaResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PB.Command.AuthCaptchaResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error()) {
    set_error(from.error());
  }
}

void AuthCaptchaResponse::CopyFrom(const AuthCaptchaResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PB.Command.AuthCaptchaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthCaptchaResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AuthCaptchaResponse::Swap(AuthCaptchaResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthCaptchaResponse::InternalSwap(AuthCaptchaResponse* other) {
  using std::swap;
  swap(error_, other->error_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AuthCaptchaResponse::GetTypeName() const {
  return "PB.Command.AuthCaptchaResponse";
}


// ===================================================================

void AuthLoginRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthLoginRequest::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthLoginRequest::AuthLoginRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PB_2eCommand_2eAuth_2eproto::scc_info_AuthLoginRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB.Command.AuthLoginRequest)
}
AuthLoginRequest::AuthLoginRequest(const AuthLoginRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:PB.Command.AuthLoginRequest)
}

void AuthLoginRequest::SharedCtor() {
  uid_ = 0u;
}

AuthLoginRequest::~AuthLoginRequest() {
  // @@protoc_insertion_point(destructor:PB.Command.AuthLoginRequest)
  SharedDtor();
}

void AuthLoginRequest::SharedDtor() {
}

void AuthLoginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthLoginRequest& AuthLoginRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PB_2eCommand_2eAuth_2eproto::scc_info_AuthLoginRequest.base);
  return *internal_default_instance();
}


void AuthLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PB.Command.AuthLoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AuthLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PB.Command.AuthLoginRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB.Command.AuthLoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB.Command.AuthLoginRequest)
  return false;
#undef DO_
}

void AuthLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB.Command.AuthLoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PB.Command.AuthLoginRequest)
}

size_t AuthLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PB.Command.AuthLoginRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 uid = 1;
  if (has_uid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthLoginRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthLoginRequest*>(&from));
}

void AuthLoginRequest::MergeFrom(const AuthLoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PB.Command.AuthLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_uid()) {
    set_uid(from.uid());
  }
}

void AuthLoginRequest::CopyFrom(const AuthLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PB.Command.AuthLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthLoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AuthLoginRequest::Swap(AuthLoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthLoginRequest::InternalSwap(AuthLoginRequest* other) {
  using std::swap;
  swap(uid_, other->uid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AuthLoginRequest::GetTypeName() const {
  return "PB.Command.AuthLoginRequest";
}


// ===================================================================

void AuthLoginResponse::InitAsDefaultInstance() {
  ::PB::Command::_AuthLoginResponse_default_instance_._instance.get_mutable()->user_ = const_cast< ::PB::User*>(
      ::PB::User::internal_default_instance());
}
void AuthLoginResponse::clear_user() {
  if (user_ != NULL) user_->Clear();
  clear_has_user();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthLoginResponse::kErrorFieldNumber;
const int AuthLoginResponse::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthLoginResponse::AuthLoginResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PB_2eCommand_2eAuth_2eproto::scc_info_AuthLoginResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB.Command.AuthLoginResponse)
}
AuthLoginResponse::AuthLoginResponse(const AuthLoginResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    user_ = new ::PB::User(*from.user_);
  } else {
    user_ = NULL;
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:PB.Command.AuthLoginResponse)
}

void AuthLoginResponse::SharedCtor() {
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&user_)) + sizeof(error_));
}

AuthLoginResponse::~AuthLoginResponse() {
  // @@protoc_insertion_point(destructor:PB.Command.AuthLoginResponse)
  SharedDtor();
}

void AuthLoginResponse::SharedDtor() {
  if (this != internal_default_instance()) delete user_;
}

void AuthLoginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthLoginResponse& AuthLoginResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PB_2eCommand_2eAuth_2eproto::scc_info_AuthLoginResponse.base);
  return *internal_default_instance();
}


void AuthLoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:PB.Command.AuthLoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(user_ != NULL);
    user_->Clear();
  }
  error_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AuthLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PB.Command.AuthLoginResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PB.User user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .PB.ERR error = 1280;
      case 1280: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 10240 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB::ERR_IsValid(value)) {
            set_error(static_cast< ::PB::ERR >(value));
          } else {
            unknown_fields_stream.WriteVarint32(10240u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB.Command.AuthLoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB.Command.AuthLoginResponse)
  return false;
#undef DO_
}

void AuthLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB.Command.AuthLoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .PB.User user = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_user(), output);
  }

  // required .PB.ERR error = 1280;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1280, this->error(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PB.Command.AuthLoginResponse)
}

size_t AuthLoginResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PB.Command.AuthLoginResponse)
  size_t total_size = 0;

  if (has_user()) {
    // required .PB.User user = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (has_error()) {
    // required .PB.ERR error = 1280;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
  }

  return total_size;
}
size_t AuthLoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PB.Command.AuthLoginResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .PB.User user = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_);

    // required .PB.ERR error = 1280;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthLoginResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthLoginResponse*>(&from));
}

void AuthLoginResponse::MergeFrom(const AuthLoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PB.Command.AuthLoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_user()->::PB::User::MergeFrom(from.user());
    }
    if (cached_has_bits & 0x00000002u) {
      error_ = from.error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AuthLoginResponse::CopyFrom(const AuthLoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PB.Command.AuthLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthLoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  return true;
}

void AuthLoginResponse::Swap(AuthLoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthLoginResponse::InternalSwap(AuthLoginResponse* other) {
  using std::swap;
  swap(user_, other->user_);
  swap(error_, other->error_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AuthLoginResponse::GetTypeName() const {
  return "PB.Command.AuthLoginResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Command
}  // namespace PB
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PB::Command::AuthCaptchaRequest* Arena::CreateMaybeMessage< ::PB::Command::AuthCaptchaRequest >(Arena* arena) {
  return Arena::CreateInternal< ::PB::Command::AuthCaptchaRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PB::Command::AuthCaptchaResponse* Arena::CreateMaybeMessage< ::PB::Command::AuthCaptchaResponse >(Arena* arena) {
  return Arena::CreateInternal< ::PB::Command::AuthCaptchaResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PB::Command::AuthLoginRequest* Arena::CreateMaybeMessage< ::PB::Command::AuthLoginRequest >(Arena* arena) {
  return Arena::CreateInternal< ::PB::Command::AuthLoginRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PB::Command::AuthLoginResponse* Arena::CreateMaybeMessage< ::PB::Command::AuthLoginResponse >(Arena* arena) {
  return Arena::CreateInternal< ::PB::Command::AuthLoginResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
