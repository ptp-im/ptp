// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PTP.Server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PTP_2eServer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PTP_2eServer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "PTP.Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PTP_2eServer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PTP_2eServer_2eproto {
  static const uint32_t offsets[];
};
namespace PTP {
namespace Server {
class ServerLoginReq;
struct ServerLoginReqDefaultTypeInternal;
extern ServerLoginReqDefaultTypeInternal _ServerLoginReq_default_instance_;
class ServerLoginRes;
struct ServerLoginResDefaultTypeInternal;
extern ServerLoginResDefaultTypeInternal _ServerLoginRes_default_instance_;
}  // namespace Server
}  // namespace PTP
PROTOBUF_NAMESPACE_OPEN
template<> ::PTP::Server::ServerLoginReq* Arena::CreateMaybeMessage<::PTP::Server::ServerLoginReq>(Arena*);
template<> ::PTP::Server::ServerLoginRes* Arena::CreateMaybeMessage<::PTP::Server::ServerLoginRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PTP {
namespace Server {

// ===================================================================

class ServerLoginReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Server.ServerLoginReq) */ {
 public:
  inline ServerLoginReq() : ServerLoginReq(nullptr) {}
  ~ServerLoginReq() override;
  explicit PROTOBUF_CONSTEXPR ServerLoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerLoginReq(const ServerLoginReq& from);
  ServerLoginReq(ServerLoginReq&& from) noexcept
    : ServerLoginReq() {
    *this = ::std::move(from);
  }

  inline ServerLoginReq& operator=(const ServerLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerLoginReq& operator=(ServerLoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ServerLoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerLoginReq* internal_default_instance() {
    return reinterpret_cast<const ServerLoginReq*>(
               &_ServerLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServerLoginReq& a, ServerLoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerLoginReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerLoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerLoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerLoginReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ServerLoginReq& from);
  void MergeFrom(const ServerLoginReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerLoginReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Server.ServerLoginReq";
  }
  protected:
  explicit ServerLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kCaptchaFieldNumber = 2,
    kSignFieldNumber = 3,
    kAttachDataFieldNumber = 4,
  };
  // required string address = 1;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // required string captcha = 2;
  bool has_captcha() const;
  private:
  bool _internal_has_captcha() const;
  public:
  void clear_captcha();
  const std::string& captcha() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_captcha(ArgT0&& arg0, ArgT... args);
  std::string* mutable_captcha();
  PROTOBUF_NODISCARD std::string* release_captcha();
  void set_allocated_captcha(std::string* captcha);
  private:
  const std::string& _internal_captcha() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_captcha(const std::string& value);
  std::string* _internal_mutable_captcha();
  public:

  // required bytes sign = 3;
  bool has_sign() const;
  private:
  bool _internal_has_sign() const;
  public:
  void clear_sign();
  const std::string& sign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sign();
  PROTOBUF_NODISCARD std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // optional bytes attach_data = 4;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:PTP.Server.ServerLoginReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr captcha_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eServer_2eproto;
};
// -------------------------------------------------------------------

class ServerLoginRes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Server.ServerLoginRes) */ {
 public:
  inline ServerLoginRes() : ServerLoginRes(nullptr) {}
  ~ServerLoginRes() override;
  explicit PROTOBUF_CONSTEXPR ServerLoginRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerLoginRes(const ServerLoginRes& from);
  ServerLoginRes(ServerLoginRes&& from) noexcept
    : ServerLoginRes() {
    *this = ::std::move(from);
  }

  inline ServerLoginRes& operator=(const ServerLoginRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerLoginRes& operator=(ServerLoginRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ServerLoginRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerLoginRes* internal_default_instance() {
    return reinterpret_cast<const ServerLoginRes*>(
               &_ServerLoginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerLoginRes& a, ServerLoginRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerLoginRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerLoginRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerLoginRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerLoginRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ServerLoginRes& from);
  void MergeFrom(const ServerLoginRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerLoginRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Server.ServerLoginRes";
  }
  protected:
  explicit ServerLoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kUserInfoFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // optional .PTP.Common.UserInfo user_info = 2;
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::PTP::Common::UserInfo& user_info() const;
  PROTOBUF_NODISCARD ::PTP::Common::UserInfo* release_user_info();
  ::PTP::Common::UserInfo* mutable_user_info();
  void set_allocated_user_info(::PTP::Common::UserInfo* user_info);
  private:
  const ::PTP::Common::UserInfo& _internal_user_info() const;
  ::PTP::Common::UserInfo* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::PTP::Common::UserInfo* user_info);
  ::PTP::Common::UserInfo* unsafe_arena_release_user_info();

  // required .PTP.Common.ERR error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);
  private:
  ::PTP::Common::ERR _internal_error() const;
  void _internal_set_error(::PTP::Common::ERR value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Server.ServerLoginRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    ::PTP::Common::UserInfo* user_info_;
    int error_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eServer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerLoginReq

// required string address = 1;
inline bool ServerLoginReq::_internal_has_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServerLoginReq::has_address() const {
  return _internal_has_address();
}
inline void ServerLoginReq::clear_address() {
  _impl_.address_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServerLoginReq::address() const {
  // @@protoc_insertion_point(field_get:PTP.Server.ServerLoginReq.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerLoginReq::set_address(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Server.ServerLoginReq.address)
}
inline std::string* ServerLoginReq::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:PTP.Server.ServerLoginReq.address)
  return _s;
}
inline const std::string& ServerLoginReq::_internal_address() const {
  return _impl_.address_.Get();
}
inline void ServerLoginReq::_internal_set_address(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerLoginReq::_internal_mutable_address() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerLoginReq::release_address() {
  // @@protoc_insertion_point(field_release:PTP.Server.ServerLoginReq.address)
  if (!_internal_has_address()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.address_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServerLoginReq::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Server.ServerLoginReq.address)
}

// required string captcha = 2;
inline bool ServerLoginReq::_internal_has_captcha() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServerLoginReq::has_captcha() const {
  return _internal_has_captcha();
}
inline void ServerLoginReq::clear_captcha() {
  _impl_.captcha_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ServerLoginReq::captcha() const {
  // @@protoc_insertion_point(field_get:PTP.Server.ServerLoginReq.captcha)
  return _internal_captcha();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerLoginReq::set_captcha(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.captcha_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Server.ServerLoginReq.captcha)
}
inline std::string* ServerLoginReq::mutable_captcha() {
  std::string* _s = _internal_mutable_captcha();
  // @@protoc_insertion_point(field_mutable:PTP.Server.ServerLoginReq.captcha)
  return _s;
}
inline const std::string& ServerLoginReq::_internal_captcha() const {
  return _impl_.captcha_.Get();
}
inline void ServerLoginReq::_internal_set_captcha(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.captcha_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerLoginReq::_internal_mutable_captcha() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.captcha_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerLoginReq::release_captcha() {
  // @@protoc_insertion_point(field_release:PTP.Server.ServerLoginReq.captcha)
  if (!_internal_has_captcha()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.captcha_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.captcha_.IsDefault()) {
    _impl_.captcha_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServerLoginReq::set_allocated_captcha(std::string* captcha) {
  if (captcha != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.captcha_.SetAllocated(captcha, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.captcha_.IsDefault()) {
    _impl_.captcha_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Server.ServerLoginReq.captcha)
}

// required bytes sign = 3;
inline bool ServerLoginReq::_internal_has_sign() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ServerLoginReq::has_sign() const {
  return _internal_has_sign();
}
inline void ServerLoginReq::clear_sign() {
  _impl_.sign_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ServerLoginReq::sign() const {
  // @@protoc_insertion_point(field_get:PTP.Server.ServerLoginReq.sign)
  return _internal_sign();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerLoginReq::set_sign(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.sign_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Server.ServerLoginReq.sign)
}
inline std::string* ServerLoginReq::mutable_sign() {
  std::string* _s = _internal_mutable_sign();
  // @@protoc_insertion_point(field_mutable:PTP.Server.ServerLoginReq.sign)
  return _s;
}
inline const std::string& ServerLoginReq::_internal_sign() const {
  return _impl_.sign_.Get();
}
inline void ServerLoginReq::_internal_set_sign(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sign_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerLoginReq::_internal_mutable_sign() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.sign_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerLoginReq::release_sign() {
  // @@protoc_insertion_point(field_release:PTP.Server.ServerLoginReq.sign)
  if (!_internal_has_sign()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.sign_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sign_.IsDefault()) {
    _impl_.sign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServerLoginReq::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.sign_.SetAllocated(sign, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sign_.IsDefault()) {
    _impl_.sign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Server.ServerLoginReq.sign)
}

// optional bytes attach_data = 4;
inline bool ServerLoginReq::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ServerLoginReq::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void ServerLoginReq::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ServerLoginReq::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Server.ServerLoginReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerLoginReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Server.ServerLoginReq.attach_data)
}
inline std::string* ServerLoginReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Server.ServerLoginReq.attach_data)
  return _s;
}
inline const std::string& ServerLoginReq::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void ServerLoginReq::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerLoginReq::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerLoginReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Server.ServerLoginReq.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServerLoginReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Server.ServerLoginReq.attach_data)
}

// -------------------------------------------------------------------

// ServerLoginRes

// required .PTP.Common.ERR error = 1;
inline bool ServerLoginRes::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ServerLoginRes::has_error() const {
  return _internal_has_error();
}
inline void ServerLoginRes::clear_error() {
  _impl_.error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::PTP::Common::ERR ServerLoginRes::_internal_error() const {
  return static_cast< ::PTP::Common::ERR >(_impl_.error_);
}
inline ::PTP::Common::ERR ServerLoginRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.Server.ServerLoginRes.error)
  return _internal_error();
}
inline void ServerLoginRes::_internal_set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.error_ = value;
}
inline void ServerLoginRes::set_error(::PTP::Common::ERR value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:PTP.Server.ServerLoginRes.error)
}

// optional .PTP.Common.UserInfo user_info = 2;
inline bool ServerLoginRes::_internal_has_user_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_info_ != nullptr);
  return value;
}
inline bool ServerLoginRes::has_user_info() const {
  return _internal_has_user_info();
}
inline const ::PTP::Common::UserInfo& ServerLoginRes::_internal_user_info() const {
  const ::PTP::Common::UserInfo* p = _impl_.user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::PTP::Common::UserInfo&>(
      ::PTP::Common::_UserInfo_default_instance_);
}
inline const ::PTP::Common::UserInfo& ServerLoginRes::user_info() const {
  // @@protoc_insertion_point(field_get:PTP.Server.ServerLoginRes.user_info)
  return _internal_user_info();
}
inline void ServerLoginRes::unsafe_arena_set_allocated_user_info(
    ::PTP::Common::UserInfo* user_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_info_);
  }
  _impl_.user_info_ = user_info;
  if (user_info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PTP.Server.ServerLoginRes.user_info)
}
inline ::PTP::Common::UserInfo* ServerLoginRes::release_user_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PTP::Common::UserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PTP::Common::UserInfo* ServerLoginRes::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_release:PTP.Server.ServerLoginRes.user_info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PTP::Common::UserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
  return temp;
}
inline ::PTP::Common::UserInfo* ServerLoginRes::_internal_mutable_user_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::PTP::Common::UserInfo>(GetArenaForAllocation());
    _impl_.user_info_ = p;
  }
  return _impl_.user_info_;
}
inline ::PTP::Common::UserInfo* ServerLoginRes::mutable_user_info() {
  ::PTP::Common::UserInfo* _msg = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:PTP.Server.ServerLoginRes.user_info)
  return _msg;
}
inline void ServerLoginRes::set_allocated_user_info(::PTP::Common::UserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_info_);
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info));
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:PTP.Server.ServerLoginRes.user_info)
}

// optional bytes attach_data = 20;
inline bool ServerLoginRes::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServerLoginRes::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void ServerLoginRes::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServerLoginRes::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Server.ServerLoginRes.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerLoginRes::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Server.ServerLoginRes.attach_data)
}
inline std::string* ServerLoginRes::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Server.ServerLoginRes.attach_data)
  return _s;
}
inline const std::string& ServerLoginRes::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void ServerLoginRes::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerLoginRes::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerLoginRes::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Server.ServerLoginRes.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServerLoginRes::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Server.ServerLoginRes.attach_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Server
}  // namespace PTP

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PTP_2eServer_2eproto
