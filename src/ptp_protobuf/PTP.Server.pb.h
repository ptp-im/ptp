// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PTP.Server.proto

#ifndef PROTOBUF_INCLUDED_PTP_2eServer_2eproto
#define PROTOBUF_INCLUDED_PTP_2eServer_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "PTP.Common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_PTP_2eServer_2eproto 

namespace protobuf_PTP_2eServer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_PTP_2eServer_2eproto
namespace PTP {
namespace Server {
class ServerLoginReq;
class ServerLoginReqDefaultTypeInternal;
extern ServerLoginReqDefaultTypeInternal _ServerLoginReq_default_instance_;
class ServerLoginRes;
class ServerLoginResDefaultTypeInternal;
extern ServerLoginResDefaultTypeInternal _ServerLoginRes_default_instance_;
}  // namespace Server
}  // namespace PTP
namespace google {
namespace protobuf {
template<> ::PTP::Server::ServerLoginReq* Arena::CreateMaybeMessage<::PTP::Server::ServerLoginReq>(Arena*);
template<> ::PTP::Server::ServerLoginRes* Arena::CreateMaybeMessage<::PTP::Server::ServerLoginRes>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace PTP {
namespace Server {

// ===================================================================

class ServerLoginReq : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Server.ServerLoginReq) */ {
 public:
  ServerLoginReq();
  virtual ~ServerLoginReq();

  ServerLoginReq(const ServerLoginReq& from);

  inline ServerLoginReq& operator=(const ServerLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerLoginReq(ServerLoginReq&& from) noexcept
    : ServerLoginReq() {
    *this = ::std::move(from);
  }

  inline ServerLoginReq& operator=(ServerLoginReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServerLoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerLoginReq* internal_default_instance() {
    return reinterpret_cast<const ServerLoginReq*>(
               &_ServerLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ServerLoginReq* other);
  friend void swap(ServerLoginReq& a, ServerLoginReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerLoginReq* New() const final {
    return CreateMaybeMessage<ServerLoginReq>(NULL);
  }

  ServerLoginReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerLoginReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ServerLoginReq& from);
  void MergeFrom(const ServerLoginReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerLoginReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string address = 1;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // required string captcha = 2;
  bool has_captcha() const;
  void clear_captcha();
  static const int kCaptchaFieldNumber = 2;
  const ::std::string& captcha() const;
  void set_captcha(const ::std::string& value);
  #if LANG_CXX11
  void set_captcha(::std::string&& value);
  #endif
  void set_captcha(const char* value);
  void set_captcha(const char* value, size_t size);
  ::std::string* mutable_captcha();
  ::std::string* release_captcha();
  void set_allocated_captcha(::std::string* captcha);

  // required bytes sign = 3;
  bool has_sign() const;
  void clear_sign();
  static const int kSignFieldNumber = 3;
  const ::std::string& sign() const;
  void set_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_sign(::std::string&& value);
  #endif
  void set_sign(const char* value);
  void set_sign(const void* value, size_t size);
  ::std::string* mutable_sign();
  ::std::string* release_sign();
  void set_allocated_sign(::std::string* sign);

  // optional bytes attach_data = 4;
  bool has_attach_data() const;
  void clear_attach_data();
  static const int kAttachDataFieldNumber = 4;
  const ::std::string& attach_data() const;
  void set_attach_data(const ::std::string& value);
  #if LANG_CXX11
  void set_attach_data(::std::string&& value);
  #endif
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  ::std::string* mutable_attach_data();
  ::std::string* release_attach_data();
  void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:PTP.Server.ServerLoginReq)
 private:
  void set_has_address();
  void clear_has_address();
  void set_has_captcha();
  void clear_has_captcha();
  void set_has_sign();
  void clear_has_sign();
  void set_has_attach_data();
  void clear_has_attach_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr captcha_;
  ::google::protobuf::internal::ArenaStringPtr sign_;
  ::google::protobuf::internal::ArenaStringPtr attach_data_;
  friend struct ::protobuf_PTP_2eServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerLoginRes : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Server.ServerLoginRes) */ {
 public:
  ServerLoginRes();
  virtual ~ServerLoginRes();

  ServerLoginRes(const ServerLoginRes& from);

  inline ServerLoginRes& operator=(const ServerLoginRes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerLoginRes(ServerLoginRes&& from) noexcept
    : ServerLoginRes() {
    *this = ::std::move(from);
  }

  inline ServerLoginRes& operator=(ServerLoginRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServerLoginRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerLoginRes* internal_default_instance() {
    return reinterpret_cast<const ServerLoginRes*>(
               &_ServerLoginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ServerLoginRes* other);
  friend void swap(ServerLoginRes& a, ServerLoginRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerLoginRes* New() const final {
    return CreateMaybeMessage<ServerLoginRes>(NULL);
  }

  ServerLoginRes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerLoginRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ServerLoginRes& from);
  void MergeFrom(const ServerLoginRes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerLoginRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  const ::std::string& attach_data() const;
  void set_attach_data(const ::std::string& value);
  #if LANG_CXX11
  void set_attach_data(::std::string&& value);
  #endif
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  ::std::string* mutable_attach_data();
  ::std::string* release_attach_data();
  void set_allocated_attach_data(::std::string* attach_data);

  // optional .PTP.Common.UserInfo user_info = 2;
  bool has_user_info() const;
  void clear_user_info();
  static const int kUserInfoFieldNumber = 2;
  private:
  const ::PTP::Common::UserInfo& _internal_user_info() const;
  public:
  const ::PTP::Common::UserInfo& user_info() const;
  ::PTP::Common::UserInfo* release_user_info();
  ::PTP::Common::UserInfo* mutable_user_info();
  void set_allocated_user_info(::PTP::Common::UserInfo* user_info);

  // required .PTP.Common.ERR error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);

  // @@protoc_insertion_point(class_scope:PTP.Server.ServerLoginRes)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_user_info();
  void clear_has_user_info();
  void set_has_attach_data();
  void clear_has_attach_data();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr attach_data_;
  ::PTP::Common::UserInfo* user_info_;
  int error_;
  friend struct ::protobuf_PTP_2eServer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerLoginReq

// required string address = 1;
inline bool ServerLoginReq::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerLoginReq::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerLoginReq::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerLoginReq::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
inline const ::std::string& ServerLoginReq::address() const {
  // @@protoc_insertion_point(field_get:PTP.Server.ServerLoginReq.address)
  return address_.GetNoArena();
}
inline void ServerLoginReq::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.Server.ServerLoginReq.address)
}
#if LANG_CXX11
inline void ServerLoginReq::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.Server.ServerLoginReq.address)
}
#endif
inline void ServerLoginReq::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.Server.ServerLoginReq.address)
}
inline void ServerLoginReq::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.Server.ServerLoginReq.address)
}
inline ::std::string* ServerLoginReq::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:PTP.Server.ServerLoginReq.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerLoginReq::release_address() {
  // @@protoc_insertion_point(field_release:PTP.Server.ServerLoginReq.address)
  if (!has_address()) {
    return NULL;
  }
  clear_has_address();
  return address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerLoginReq::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:PTP.Server.ServerLoginReq.address)
}

// required string captcha = 2;
inline bool ServerLoginReq::has_captcha() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerLoginReq::set_has_captcha() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerLoginReq::clear_has_captcha() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerLoginReq::clear_captcha() {
  captcha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_captcha();
}
inline const ::std::string& ServerLoginReq::captcha() const {
  // @@protoc_insertion_point(field_get:PTP.Server.ServerLoginReq.captcha)
  return captcha_.GetNoArena();
}
inline void ServerLoginReq::set_captcha(const ::std::string& value) {
  set_has_captcha();
  captcha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.Server.ServerLoginReq.captcha)
}
#if LANG_CXX11
inline void ServerLoginReq::set_captcha(::std::string&& value) {
  set_has_captcha();
  captcha_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.Server.ServerLoginReq.captcha)
}
#endif
inline void ServerLoginReq::set_captcha(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_captcha();
  captcha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.Server.ServerLoginReq.captcha)
}
inline void ServerLoginReq::set_captcha(const char* value, size_t size) {
  set_has_captcha();
  captcha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.Server.ServerLoginReq.captcha)
}
inline ::std::string* ServerLoginReq::mutable_captcha() {
  set_has_captcha();
  // @@protoc_insertion_point(field_mutable:PTP.Server.ServerLoginReq.captcha)
  return captcha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerLoginReq::release_captcha() {
  // @@protoc_insertion_point(field_release:PTP.Server.ServerLoginReq.captcha)
  if (!has_captcha()) {
    return NULL;
  }
  clear_has_captcha();
  return captcha_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerLoginReq::set_allocated_captcha(::std::string* captcha) {
  if (captcha != NULL) {
    set_has_captcha();
  } else {
    clear_has_captcha();
  }
  captcha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), captcha);
  // @@protoc_insertion_point(field_set_allocated:PTP.Server.ServerLoginReq.captcha)
}

// required bytes sign = 3;
inline bool ServerLoginReq::has_sign() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerLoginReq::set_has_sign() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerLoginReq::clear_has_sign() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerLoginReq::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sign();
}
inline const ::std::string& ServerLoginReq::sign() const {
  // @@protoc_insertion_point(field_get:PTP.Server.ServerLoginReq.sign)
  return sign_.GetNoArena();
}
inline void ServerLoginReq::set_sign(const ::std::string& value) {
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.Server.ServerLoginReq.sign)
}
#if LANG_CXX11
inline void ServerLoginReq::set_sign(::std::string&& value) {
  set_has_sign();
  sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.Server.ServerLoginReq.sign)
}
#endif
inline void ServerLoginReq::set_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.Server.ServerLoginReq.sign)
}
inline void ServerLoginReq::set_sign(const void* value, size_t size) {
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.Server.ServerLoginReq.sign)
}
inline ::std::string* ServerLoginReq::mutable_sign() {
  set_has_sign();
  // @@protoc_insertion_point(field_mutable:PTP.Server.ServerLoginReq.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerLoginReq::release_sign() {
  // @@protoc_insertion_point(field_release:PTP.Server.ServerLoginReq.sign)
  if (!has_sign()) {
    return NULL;
  }
  clear_has_sign();
  return sign_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerLoginReq::set_allocated_sign(::std::string* sign) {
  if (sign != NULL) {
    set_has_sign();
  } else {
    clear_has_sign();
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:PTP.Server.ServerLoginReq.sign)
}

// optional bytes attach_data = 4;
inline bool ServerLoginReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerLoginReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerLoginReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerLoginReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
inline const ::std::string& ServerLoginReq::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Server.ServerLoginReq.attach_data)
  return attach_data_.GetNoArena();
}
inline void ServerLoginReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.Server.ServerLoginReq.attach_data)
}
#if LANG_CXX11
inline void ServerLoginReq::set_attach_data(::std::string&& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.Server.ServerLoginReq.attach_data)
}
#endif
inline void ServerLoginReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.Server.ServerLoginReq.attach_data)
}
inline void ServerLoginReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.Server.ServerLoginReq.attach_data)
}
inline ::std::string* ServerLoginReq::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Server.ServerLoginReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerLoginReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Server.ServerLoginReq.attach_data)
  if (!has_attach_data()) {
    return NULL;
  }
  clear_has_attach_data();
  return attach_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerLoginReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:PTP.Server.ServerLoginReq.attach_data)
}

// -------------------------------------------------------------------

// ServerLoginRes

// required .PTP.Common.ERR error = 1;
inline bool ServerLoginRes::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerLoginRes::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerLoginRes::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerLoginRes::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::PTP::Common::ERR ServerLoginRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.Server.ServerLoginRes.error)
  return static_cast< ::PTP::Common::ERR >(error_);
}
inline void ServerLoginRes::set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:PTP.Server.ServerLoginRes.error)
}

// optional .PTP.Common.UserInfo user_info = 2;
inline bool ServerLoginRes::has_user_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerLoginRes::set_has_user_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerLoginRes::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::PTP::Common::UserInfo& ServerLoginRes::_internal_user_info() const {
  return *user_info_;
}
inline const ::PTP::Common::UserInfo& ServerLoginRes::user_info() const {
  const ::PTP::Common::UserInfo* p = user_info_;
  // @@protoc_insertion_point(field_get:PTP.Server.ServerLoginRes.user_info)
  return p != NULL ? *p : *reinterpret_cast<const ::PTP::Common::UserInfo*>(
      &::PTP::Common::_UserInfo_default_instance_);
}
inline ::PTP::Common::UserInfo* ServerLoginRes::release_user_info() {
  // @@protoc_insertion_point(field_release:PTP.Server.ServerLoginRes.user_info)
  clear_has_user_info();
  ::PTP::Common::UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline ::PTP::Common::UserInfo* ServerLoginRes::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) {
    auto* p = CreateMaybeMessage<::PTP::Common::UserInfo>(GetArenaNoVirtual());
    user_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:PTP.Server.ServerLoginRes.user_info)
  return user_info_;
}
inline void ServerLoginRes::set_allocated_user_info(::PTP::Common::UserInfo* user_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(user_info_);
  }
  if (user_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:PTP.Server.ServerLoginRes.user_info)
}

// optional bytes attach_data = 20;
inline bool ServerLoginRes::has_attach_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerLoginRes::set_has_attach_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerLoginRes::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerLoginRes::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
inline const ::std::string& ServerLoginRes::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Server.ServerLoginRes.attach_data)
  return attach_data_.GetNoArena();
}
inline void ServerLoginRes::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.Server.ServerLoginRes.attach_data)
}
#if LANG_CXX11
inline void ServerLoginRes::set_attach_data(::std::string&& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.Server.ServerLoginRes.attach_data)
}
#endif
inline void ServerLoginRes::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.Server.ServerLoginRes.attach_data)
}
inline void ServerLoginRes::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.Server.ServerLoginRes.attach_data)
}
inline ::std::string* ServerLoginRes::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Server.ServerLoginRes.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerLoginRes::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Server.ServerLoginRes.attach_data)
  if (!has_attach_data()) {
    return NULL;
  }
  clear_has_attach_data();
  return attach_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerLoginRes::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:PTP.Server.ServerLoginRes.attach_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Server
}  // namespace PTP

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_PTP_2eServer_2eproto
