// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PTP.Group.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PTP_2eGroup_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PTP_2eGroup_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "PTP.Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PTP_2eGroup_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PTP_2eGroup_2eproto {
  static const uint32_t offsets[];
};
namespace PTP {
namespace Group {
class GroupChangeMemberNotify;
struct GroupChangeMemberNotifyDefaultTypeInternal;
extern GroupChangeMemberNotifyDefaultTypeInternal _GroupChangeMemberNotify_default_instance_;
class GroupChangeMemberReq;
struct GroupChangeMemberReqDefaultTypeInternal;
extern GroupChangeMemberReqDefaultTypeInternal _GroupChangeMemberReq_default_instance_;
class GroupChangeMemberRes;
struct GroupChangeMemberResDefaultTypeInternal;
extern GroupChangeMemberResDefaultTypeInternal _GroupChangeMemberRes_default_instance_;
class GroupCreateReq;
struct GroupCreateReqDefaultTypeInternal;
extern GroupCreateReqDefaultTypeInternal _GroupCreateReq_default_instance_;
class GroupCreateRes;
struct GroupCreateResDefaultTypeInternal;
extern GroupCreateResDefaultTypeInternal _GroupCreateRes_default_instance_;
class GroupGetListReq;
struct GroupGetListReqDefaultTypeInternal;
extern GroupGetListReqDefaultTypeInternal _GroupGetListReq_default_instance_;
class GroupGetListRes;
struct GroupGetListResDefaultTypeInternal;
extern GroupGetListResDefaultTypeInternal _GroupGetListRes_default_instance_;
class GroupGetMembersListReq;
struct GroupGetMembersListReqDefaultTypeInternal;
extern GroupGetMembersListReqDefaultTypeInternal _GroupGetMembersListReq_default_instance_;
class GroupGetMembersListRes;
struct GroupGetMembersListResDefaultTypeInternal;
extern GroupGetMembersListResDefaultTypeInternal _GroupGetMembersListRes_default_instance_;
class GroupModifyNotify;
struct GroupModifyNotifyDefaultTypeInternal;
extern GroupModifyNotifyDefaultTypeInternal _GroupModifyNotify_default_instance_;
class GroupModifyReq;
struct GroupModifyReqDefaultTypeInternal;
extern GroupModifyReqDefaultTypeInternal _GroupModifyReq_default_instance_;
class GroupModifyRes;
struct GroupModifyResDefaultTypeInternal;
extern GroupModifyResDefaultTypeInternal _GroupModifyRes_default_instance_;
class GroupPreCreateReq;
struct GroupPreCreateReqDefaultTypeInternal;
extern GroupPreCreateReqDefaultTypeInternal _GroupPreCreateReq_default_instance_;
class GroupPreCreateRes;
struct GroupPreCreateResDefaultTypeInternal;
extern GroupPreCreateResDefaultTypeInternal _GroupPreCreateRes_default_instance_;
class GroupRemoveSessionNotify;
struct GroupRemoveSessionNotifyDefaultTypeInternal;
extern GroupRemoveSessionNotifyDefaultTypeInternal _GroupRemoveSessionNotify_default_instance_;
class GroupRemoveSessionReq;
struct GroupRemoveSessionReqDefaultTypeInternal;
extern GroupRemoveSessionReqDefaultTypeInternal _GroupRemoveSessionReq_default_instance_;
class GroupRemoveSessionRes;
struct GroupRemoveSessionResDefaultTypeInternal;
extern GroupRemoveSessionResDefaultTypeInternal _GroupRemoveSessionRes_default_instance_;
class GroupUnreadMsgReq;
struct GroupUnreadMsgReqDefaultTypeInternal;
extern GroupUnreadMsgReqDefaultTypeInternal _GroupUnreadMsgReq_default_instance_;
class GroupUnreadMsgRes;
struct GroupUnreadMsgResDefaultTypeInternal;
extern GroupUnreadMsgResDefaultTypeInternal _GroupUnreadMsgRes_default_instance_;
}  // namespace Group
}  // namespace PTP
PROTOBUF_NAMESPACE_OPEN
template<> ::PTP::Group::GroupChangeMemberNotify* Arena::CreateMaybeMessage<::PTP::Group::GroupChangeMemberNotify>(Arena*);
template<> ::PTP::Group::GroupChangeMemberReq* Arena::CreateMaybeMessage<::PTP::Group::GroupChangeMemberReq>(Arena*);
template<> ::PTP::Group::GroupChangeMemberRes* Arena::CreateMaybeMessage<::PTP::Group::GroupChangeMemberRes>(Arena*);
template<> ::PTP::Group::GroupCreateReq* Arena::CreateMaybeMessage<::PTP::Group::GroupCreateReq>(Arena*);
template<> ::PTP::Group::GroupCreateRes* Arena::CreateMaybeMessage<::PTP::Group::GroupCreateRes>(Arena*);
template<> ::PTP::Group::GroupGetListReq* Arena::CreateMaybeMessage<::PTP::Group::GroupGetListReq>(Arena*);
template<> ::PTP::Group::GroupGetListRes* Arena::CreateMaybeMessage<::PTP::Group::GroupGetListRes>(Arena*);
template<> ::PTP::Group::GroupGetMembersListReq* Arena::CreateMaybeMessage<::PTP::Group::GroupGetMembersListReq>(Arena*);
template<> ::PTP::Group::GroupGetMembersListRes* Arena::CreateMaybeMessage<::PTP::Group::GroupGetMembersListRes>(Arena*);
template<> ::PTP::Group::GroupModifyNotify* Arena::CreateMaybeMessage<::PTP::Group::GroupModifyNotify>(Arena*);
template<> ::PTP::Group::GroupModifyReq* Arena::CreateMaybeMessage<::PTP::Group::GroupModifyReq>(Arena*);
template<> ::PTP::Group::GroupModifyRes* Arena::CreateMaybeMessage<::PTP::Group::GroupModifyRes>(Arena*);
template<> ::PTP::Group::GroupPreCreateReq* Arena::CreateMaybeMessage<::PTP::Group::GroupPreCreateReq>(Arena*);
template<> ::PTP::Group::GroupPreCreateRes* Arena::CreateMaybeMessage<::PTP::Group::GroupPreCreateRes>(Arena*);
template<> ::PTP::Group::GroupRemoveSessionNotify* Arena::CreateMaybeMessage<::PTP::Group::GroupRemoveSessionNotify>(Arena*);
template<> ::PTP::Group::GroupRemoveSessionReq* Arena::CreateMaybeMessage<::PTP::Group::GroupRemoveSessionReq>(Arena*);
template<> ::PTP::Group::GroupRemoveSessionRes* Arena::CreateMaybeMessage<::PTP::Group::GroupRemoveSessionRes>(Arena*);
template<> ::PTP::Group::GroupUnreadMsgReq* Arena::CreateMaybeMessage<::PTP::Group::GroupUnreadMsgReq>(Arena*);
template<> ::PTP::Group::GroupUnreadMsgRes* Arena::CreateMaybeMessage<::PTP::Group::GroupUnreadMsgRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PTP {
namespace Group {

// ===================================================================

class GroupPreCreateReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Group.GroupPreCreateReq) */ {
 public:
  inline GroupPreCreateReq() : GroupPreCreateReq(nullptr) {}
  ~GroupPreCreateReq() override;
  explicit PROTOBUF_CONSTEXPR GroupPreCreateReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupPreCreateReq(const GroupPreCreateReq& from);
  GroupPreCreateReq(GroupPreCreateReq&& from) noexcept
    : GroupPreCreateReq() {
    *this = ::std::move(from);
  }

  inline GroupPreCreateReq& operator=(const GroupPreCreateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupPreCreateReq& operator=(GroupPreCreateReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupPreCreateReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupPreCreateReq* internal_default_instance() {
    return reinterpret_cast<const GroupPreCreateReq*>(
               &_GroupPreCreateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GroupPreCreateReq& a, GroupPreCreateReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupPreCreateReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupPreCreateReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupPreCreateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupPreCreateReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupPreCreateReq& from);
  void MergeFrom(const GroupPreCreateReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupPreCreateReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Group.GroupPreCreateReq";
  }
  protected:
  explicit GroupPreCreateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 7,
    kAttachDataFieldNumber = 20,
    kAuthUidFieldNumber = 21,
    kGroupTypeFieldNumber = 1,
  };
  // repeated uint32 members = 7;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  private:
  uint32_t _internal_members(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_members() const;
  void _internal_add_members(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_members();
  public:
  uint32_t members(int index) const;
  void set_members(int index, uint32_t value);
  void add_members(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      members() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_members();

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // required .PTP.Common.GroupType group_type = 1;
  bool has_group_type() const;
  private:
  bool _internal_has_group_type() const;
  public:
  void clear_group_type();
  ::PTP::Common::GroupType group_type() const;
  void set_group_type(::PTP::Common::GroupType value);
  private:
  ::PTP::Common::GroupType _internal_group_type() const;
  void _internal_set_group_type(::PTP::Common::GroupType value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Group.GroupPreCreateReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > members_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t auth_uid_;
    int group_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class GroupPreCreateRes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Group.GroupPreCreateRes) */ {
 public:
  inline GroupPreCreateRes() : GroupPreCreateRes(nullptr) {}
  ~GroupPreCreateRes() override;
  explicit PROTOBUF_CONSTEXPR GroupPreCreateRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupPreCreateRes(const GroupPreCreateRes& from);
  GroupPreCreateRes(GroupPreCreateRes&& from) noexcept
    : GroupPreCreateRes() {
    *this = ::std::move(from);
  }

  inline GroupPreCreateRes& operator=(const GroupPreCreateRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupPreCreateRes& operator=(GroupPreCreateRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupPreCreateRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupPreCreateRes* internal_default_instance() {
    return reinterpret_cast<const GroupPreCreateRes*>(
               &_GroupPreCreateRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GroupPreCreateRes& a, GroupPreCreateRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupPreCreateRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupPreCreateRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupPreCreateRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupPreCreateRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupPreCreateRes& from);
  void MergeFrom(const GroupPreCreateRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupPreCreateRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Group.GroupPreCreateRes";
  }
  protected:
  explicit GroupPreCreateRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupAdrFieldNumber = 1,
    kCaptchaFieldNumber = 4,
    kAttachDataFieldNumber = 20,
    kGroupIdxFieldNumber = 2,
    kErrorFieldNumber = 3,
    kAuthUidFieldNumber = 21,
  };
  // optional string group_adr = 1;
  bool has_group_adr() const;
  private:
  bool _internal_has_group_adr() const;
  public:
  void clear_group_adr();
  const std::string& group_adr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_adr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_adr();
  PROTOBUF_NODISCARD std::string* release_group_adr();
  void set_allocated_group_adr(std::string* group_adr);
  private:
  const std::string& _internal_group_adr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_adr(const std::string& value);
  std::string* _internal_mutable_group_adr();
  public:

  // optional string captcha = 4;
  bool has_captcha() const;
  private:
  bool _internal_has_captcha() const;
  public:
  void clear_captcha();
  const std::string& captcha() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_captcha(ArgT0&& arg0, ArgT... args);
  std::string* mutable_captcha();
  PROTOBUF_NODISCARD std::string* release_captcha();
  void set_allocated_captcha(std::string* captcha);
  private:
  const std::string& _internal_captcha() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_captcha(const std::string& value);
  std::string* _internal_mutable_captcha();
  public:

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required uint32 group_idx = 2;
  bool has_group_idx() const;
  private:
  bool _internal_has_group_idx() const;
  public:
  void clear_group_idx();
  uint32_t group_idx() const;
  void set_group_idx(uint32_t value);
  private:
  uint32_t _internal_group_idx() const;
  void _internal_set_group_idx(uint32_t value);
  public:

  // required .PTP.Common.ERR error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);
  private:
  ::PTP::Common::ERR _internal_error() const;
  void _internal_set_error(::PTP::Common::ERR value);
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Group.GroupPreCreateRes)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_adr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr captcha_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t group_idx_;
    int error_;
    uint32_t auth_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class GroupCreateReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Group.GroupCreateReq) */ {
 public:
  inline GroupCreateReq() : GroupCreateReq(nullptr) {}
  ~GroupCreateReq() override;
  explicit PROTOBUF_CONSTEXPR GroupCreateReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupCreateReq(const GroupCreateReq& from);
  GroupCreateReq(GroupCreateReq&& from) noexcept
    : GroupCreateReq() {
    *this = ::std::move(from);
  }

  inline GroupCreateReq& operator=(const GroupCreateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupCreateReq& operator=(GroupCreateReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupCreateReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupCreateReq* internal_default_instance() {
    return reinterpret_cast<const GroupCreateReq*>(
               &_GroupCreateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GroupCreateReq& a, GroupCreateReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupCreateReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupCreateReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupCreateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupCreateReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupCreateReq& from);
  void MergeFrom(const GroupCreateReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupCreateReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Group.GroupCreateReq";
  }
  protected:
  explicit GroupCreateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 7,
    kSignFieldNumber = 2,
    kCaptchaFieldNumber = 3,
    kNameFieldNumber = 5,
    kAvatarFieldNumber = 6,
    kAboutFieldNumber = 8,
    kAttachDataFieldNumber = 20,
    kGroupIdxFieldNumber = 1,
    kAuthUidFieldNumber = 21,
    kGroupTypeFieldNumber = 4,
  };
  // repeated uint32 members = 7;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  private:
  uint32_t _internal_members(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_members() const;
  void _internal_add_members(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_members();
  public:
  uint32_t members(int index) const;
  void set_members(int index, uint32_t value);
  void add_members(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      members() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_members();

  // required bytes sign = 2;
  bool has_sign() const;
  private:
  bool _internal_has_sign() const;
  public:
  void clear_sign();
  const std::string& sign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sign();
  PROTOBUF_NODISCARD std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // required string captcha = 3;
  bool has_captcha() const;
  private:
  bool _internal_has_captcha() const;
  public:
  void clear_captcha();
  const std::string& captcha() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_captcha(ArgT0&& arg0, ArgT... args);
  std::string* mutable_captcha();
  PROTOBUF_NODISCARD std::string* release_captcha();
  void set_allocated_captcha(std::string* captcha);
  private:
  const std::string& _internal_captcha() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_captcha(const std::string& value);
  std::string* _internal_mutable_captcha();
  public:

  // optional string name = 5;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string avatar = 6;
  bool has_avatar() const;
  private:
  bool _internal_has_avatar() const;
  public:
  void clear_avatar();
  const std::string& avatar() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar();
  PROTOBUF_NODISCARD std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // optional string about = 8;
  bool has_about() const;
  private:
  bool _internal_has_about() const;
  public:
  void clear_about();
  const std::string& about() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_about(ArgT0&& arg0, ArgT... args);
  std::string* mutable_about();
  PROTOBUF_NODISCARD std::string* release_about();
  void set_allocated_about(std::string* about);
  private:
  const std::string& _internal_about() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_about(const std::string& value);
  std::string* _internal_mutable_about();
  public:

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required uint32 group_idx = 1;
  bool has_group_idx() const;
  private:
  bool _internal_has_group_idx() const;
  public:
  void clear_group_idx();
  uint32_t group_idx() const;
  void set_group_idx(uint32_t value);
  private:
  uint32_t _internal_group_idx() const;
  void _internal_set_group_idx(uint32_t value);
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // required .PTP.Common.GroupType group_type = 4;
  bool has_group_type() const;
  private:
  bool _internal_has_group_type() const;
  public:
  void clear_group_type();
  ::PTP::Common::GroupType group_type() const;
  void set_group_type(::PTP::Common::GroupType value);
  private:
  ::PTP::Common::GroupType _internal_group_type() const;
  void _internal_set_group_type(::PTP::Common::GroupType value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Group.GroupCreateReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > members_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr captcha_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr about_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t group_idx_;
    uint32_t auth_uid_;
    int group_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class GroupCreateRes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Group.GroupCreateRes) */ {
 public:
  inline GroupCreateRes() : GroupCreateRes(nullptr) {}
  ~GroupCreateRes() override;
  explicit PROTOBUF_CONSTEXPR GroupCreateRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupCreateRes(const GroupCreateRes& from);
  GroupCreateRes(GroupCreateRes&& from) noexcept
    : GroupCreateRes() {
    *this = ::std::move(from);
  }

  inline GroupCreateRes& operator=(const GroupCreateRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupCreateRes& operator=(GroupCreateRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupCreateRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupCreateRes* internal_default_instance() {
    return reinterpret_cast<const GroupCreateRes*>(
               &_GroupCreateRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GroupCreateRes& a, GroupCreateRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupCreateRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupCreateRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupCreateRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupCreateRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupCreateRes& from);
  void MergeFrom(const GroupCreateRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupCreateRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Group.GroupCreateRes";
  }
  protected:
  explicit GroupCreateRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupMembersFieldNumber = 2,
    kAttachDataFieldNumber = 20,
    kGroupFieldNumber = 1,
    kErrorFieldNumber = 3,
    kAuthUidFieldNumber = 21,
  };
  // repeated .PTP.Common.GroupMember group_members = 2;
  int group_members_size() const;
  private:
  int _internal_group_members_size() const;
  public:
  void clear_group_members();
  ::PTP::Common::GroupMember* mutable_group_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::GroupMember >*
      mutable_group_members();
  private:
  const ::PTP::Common::GroupMember& _internal_group_members(int index) const;
  ::PTP::Common::GroupMember* _internal_add_group_members();
  public:
  const ::PTP::Common::GroupMember& group_members(int index) const;
  ::PTP::Common::GroupMember* add_group_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::GroupMember >&
      group_members() const;

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // optional .PTP.Common.GroupInfo group = 1;
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  const ::PTP::Common::GroupInfo& group() const;
  PROTOBUF_NODISCARD ::PTP::Common::GroupInfo* release_group();
  ::PTP::Common::GroupInfo* mutable_group();
  void set_allocated_group(::PTP::Common::GroupInfo* group);
  private:
  const ::PTP::Common::GroupInfo& _internal_group() const;
  ::PTP::Common::GroupInfo* _internal_mutable_group();
  public:
  void unsafe_arena_set_allocated_group(
      ::PTP::Common::GroupInfo* group);
  ::PTP::Common::GroupInfo* unsafe_arena_release_group();

  // required .PTP.Common.ERR error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);
  private:
  ::PTP::Common::ERR _internal_error() const;
  void _internal_set_error(::PTP::Common::ERR value);
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Group.GroupCreateRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::GroupMember > group_members_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    ::PTP::Common::GroupInfo* group_;
    int error_;
    uint32_t auth_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class GroupModifyReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Group.GroupModifyReq) */ {
 public:
  inline GroupModifyReq() : GroupModifyReq(nullptr) {}
  ~GroupModifyReq() override;
  explicit PROTOBUF_CONSTEXPR GroupModifyReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupModifyReq(const GroupModifyReq& from);
  GroupModifyReq(GroupModifyReq&& from) noexcept
    : GroupModifyReq() {
    *this = ::std::move(from);
  }

  inline GroupModifyReq& operator=(const GroupModifyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupModifyReq& operator=(GroupModifyReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupModifyReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupModifyReq* internal_default_instance() {
    return reinterpret_cast<const GroupModifyReq*>(
               &_GroupModifyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GroupModifyReq& a, GroupModifyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupModifyReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupModifyReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupModifyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupModifyReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupModifyReq& from);
  void MergeFrom(const GroupModifyReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupModifyReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Group.GroupModifyReq";
  }
  protected:
  explicit GroupModifyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 4,
    kAttachDataFieldNumber = 20,
    kGroupIdFieldNumber = 2,
    kAuthUidFieldNumber = 21,
    kGroupModifyActionFieldNumber = 1,
  };
  // required string value = 4;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required uint32 group_id = 2;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // required .PTP.Common.GroupModifyAction group_modify_action = 1;
  bool has_group_modify_action() const;
  private:
  bool _internal_has_group_modify_action() const;
  public:
  void clear_group_modify_action();
  ::PTP::Common::GroupModifyAction group_modify_action() const;
  void set_group_modify_action(::PTP::Common::GroupModifyAction value);
  private:
  ::PTP::Common::GroupModifyAction _internal_group_modify_action() const;
  void _internal_set_group_modify_action(::PTP::Common::GroupModifyAction value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Group.GroupModifyReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t group_id_;
    uint32_t auth_uid_;
    int group_modify_action_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class GroupModifyRes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Group.GroupModifyRes) */ {
 public:
  inline GroupModifyRes() : GroupModifyRes(nullptr) {}
  ~GroupModifyRes() override;
  explicit PROTOBUF_CONSTEXPR GroupModifyRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupModifyRes(const GroupModifyRes& from);
  GroupModifyRes(GroupModifyRes&& from) noexcept
    : GroupModifyRes() {
    *this = ::std::move(from);
  }

  inline GroupModifyRes& operator=(const GroupModifyRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupModifyRes& operator=(GroupModifyRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupModifyRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupModifyRes* internal_default_instance() {
    return reinterpret_cast<const GroupModifyRes*>(
               &_GroupModifyRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GroupModifyRes& a, GroupModifyRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupModifyRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupModifyRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupModifyRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupModifyRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupModifyRes& from);
  void MergeFrom(const GroupModifyRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupModifyRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Group.GroupModifyRes";
  }
  protected:
  explicit GroupModifyRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotifyMembersFieldNumber = 5,
    kValueFieldNumber = 2,
    kAttachDataFieldNumber = 20,
    kGroupIdFieldNumber = 3,
    kErrorFieldNumber = 4,
    kAuthUidFieldNumber = 21,
    kGroupModifyActionFieldNumber = 1,
  };
  // repeated uint32 notify_members = 5;
  int notify_members_size() const;
  private:
  int _internal_notify_members_size() const;
  public:
  void clear_notify_members();
  private:
  uint32_t _internal_notify_members(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_notify_members() const;
  void _internal_add_notify_members(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_notify_members();
  public:
  uint32_t notify_members(int index) const;
  void set_notify_members(int index, uint32_t value);
  void add_notify_members(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      notify_members() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_notify_members();

  // required string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required uint32 group_id = 3;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // required .PTP.Common.ERR error = 4;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);
  private:
  ::PTP::Common::ERR _internal_error() const;
  void _internal_set_error(::PTP::Common::ERR value);
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // required .PTP.Common.GroupModifyAction group_modify_action = 1;
  bool has_group_modify_action() const;
  private:
  bool _internal_has_group_modify_action() const;
  public:
  void clear_group_modify_action();
  ::PTP::Common::GroupModifyAction group_modify_action() const;
  void set_group_modify_action(::PTP::Common::GroupModifyAction value);
  private:
  ::PTP::Common::GroupModifyAction _internal_group_modify_action() const;
  void _internal_set_group_modify_action(::PTP::Common::GroupModifyAction value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Group.GroupModifyRes)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > notify_members_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t group_id_;
    int error_;
    uint32_t auth_uid_;
    int group_modify_action_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class GroupModifyNotify final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Group.GroupModifyNotify) */ {
 public:
  inline GroupModifyNotify() : GroupModifyNotify(nullptr) {}
  ~GroupModifyNotify() override;
  explicit PROTOBUF_CONSTEXPR GroupModifyNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupModifyNotify(const GroupModifyNotify& from);
  GroupModifyNotify(GroupModifyNotify&& from) noexcept
    : GroupModifyNotify() {
    *this = ::std::move(from);
  }

  inline GroupModifyNotify& operator=(const GroupModifyNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupModifyNotify& operator=(GroupModifyNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupModifyNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupModifyNotify* internal_default_instance() {
    return reinterpret_cast<const GroupModifyNotify*>(
               &_GroupModifyNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GroupModifyNotify& a, GroupModifyNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupModifyNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupModifyNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupModifyNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupModifyNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupModifyNotify& from);
  void MergeFrom(const GroupModifyNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupModifyNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Group.GroupModifyNotify";
  }
  protected:
  explicit GroupModifyNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 4,
    kGroupIdFieldNumber = 2,
    kGroupModifyActionFieldNumber = 1,
  };
  // required string value = 4;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // required uint32 group_id = 2;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // required .PTP.Common.GroupModifyAction group_modify_action = 1;
  bool has_group_modify_action() const;
  private:
  bool _internal_has_group_modify_action() const;
  public:
  void clear_group_modify_action();
  ::PTP::Common::GroupModifyAction group_modify_action() const;
  void set_group_modify_action(::PTP::Common::GroupModifyAction value);
  private:
  ::PTP::Common::GroupModifyAction _internal_group_modify_action() const;
  void _internal_set_group_modify_action(::PTP::Common::GroupModifyAction value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Group.GroupModifyNotify)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    uint32_t group_id_;
    int group_modify_action_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class GroupChangeMemberReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Group.GroupChangeMemberReq) */ {
 public:
  inline GroupChangeMemberReq() : GroupChangeMemberReq(nullptr) {}
  ~GroupChangeMemberReq() override;
  explicit PROTOBUF_CONSTEXPR GroupChangeMemberReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupChangeMemberReq(const GroupChangeMemberReq& from);
  GroupChangeMemberReq(GroupChangeMemberReq&& from) noexcept
    : GroupChangeMemberReq() {
    *this = ::std::move(from);
  }

  inline GroupChangeMemberReq& operator=(const GroupChangeMemberReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupChangeMemberReq& operator=(GroupChangeMemberReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupChangeMemberReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupChangeMemberReq* internal_default_instance() {
    return reinterpret_cast<const GroupChangeMemberReq*>(
               &_GroupChangeMemberReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GroupChangeMemberReq& a, GroupChangeMemberReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupChangeMemberReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupChangeMemberReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupChangeMemberReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupChangeMemberReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupChangeMemberReq& from);
  void MergeFrom(const GroupChangeMemberReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupChangeMemberReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Group.GroupChangeMemberReq";
  }
  protected:
  explicit GroupChangeMemberReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 3,
    kAttachDataFieldNumber = 20,
    kGroupIdFieldNumber = 2,
    kAuthUidFieldNumber = 21,
    kGroupMemberModifyActionFieldNumber = 1,
  };
  // repeated string members = 3;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  const std::string& members(int index) const;
  std::string* mutable_members(int index);
  void set_members(int index, const std::string& value);
  void set_members(int index, std::string&& value);
  void set_members(int index, const char* value);
  void set_members(int index, const char* value, size_t size);
  std::string* add_members();
  void add_members(const std::string& value);
  void add_members(std::string&& value);
  void add_members(const char* value);
  void add_members(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& members() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_members();
  private:
  const std::string& _internal_members(int index) const;
  std::string* _internal_add_members();
  public:

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required uint32 group_id = 2;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // required .PTP.Common.GroupMemberModifyAction group_member_modify_action = 1;
  bool has_group_member_modify_action() const;
  private:
  bool _internal_has_group_member_modify_action() const;
  public:
  void clear_group_member_modify_action();
  ::PTP::Common::GroupMemberModifyAction group_member_modify_action() const;
  void set_group_member_modify_action(::PTP::Common::GroupMemberModifyAction value);
  private:
  ::PTP::Common::GroupMemberModifyAction _internal_group_member_modify_action() const;
  void _internal_set_group_member_modify_action(::PTP::Common::GroupMemberModifyAction value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Group.GroupChangeMemberReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> members_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t group_id_;
    uint32_t auth_uid_;
    int group_member_modify_action_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class GroupChangeMemberRes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Group.GroupChangeMemberRes) */ {
 public:
  inline GroupChangeMemberRes() : GroupChangeMemberRes(nullptr) {}
  ~GroupChangeMemberRes() override;
  explicit PROTOBUF_CONSTEXPR GroupChangeMemberRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupChangeMemberRes(const GroupChangeMemberRes& from);
  GroupChangeMemberRes(GroupChangeMemberRes&& from) noexcept
    : GroupChangeMemberRes() {
    *this = ::std::move(from);
  }

  inline GroupChangeMemberRes& operator=(const GroupChangeMemberRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupChangeMemberRes& operator=(GroupChangeMemberRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupChangeMemberRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupChangeMemberRes* internal_default_instance() {
    return reinterpret_cast<const GroupChangeMemberRes*>(
               &_GroupChangeMemberRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GroupChangeMemberRes& a, GroupChangeMemberRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupChangeMemberRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupChangeMemberRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupChangeMemberRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupChangeMemberRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupChangeMemberRes& from);
  void MergeFrom(const GroupChangeMemberRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupChangeMemberRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Group.GroupChangeMemberRes";
  }
  protected:
  explicit GroupChangeMemberRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersChangFieldNumber = 4,
    kAttachDataFieldNumber = 20,
    kGroupIdFieldNumber = 3,
    kErrorFieldNumber = 5,
    kAuthUidFieldNumber = 21,
    kGroupMemberModifyActionFieldNumber = 1,
  };
  // repeated string members_chang = 4;
  int members_chang_size() const;
  private:
  int _internal_members_chang_size() const;
  public:
  void clear_members_chang();
  const std::string& members_chang(int index) const;
  std::string* mutable_members_chang(int index);
  void set_members_chang(int index, const std::string& value);
  void set_members_chang(int index, std::string&& value);
  void set_members_chang(int index, const char* value);
  void set_members_chang(int index, const char* value, size_t size);
  std::string* add_members_chang();
  void add_members_chang(const std::string& value);
  void add_members_chang(std::string&& value);
  void add_members_chang(const char* value);
  void add_members_chang(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& members_chang() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_members_chang();
  private:
  const std::string& _internal_members_chang(int index) const;
  std::string* _internal_add_members_chang();
  public:

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required uint32 group_id = 3;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // required .PTP.Common.ERR error = 5;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);
  private:
  ::PTP::Common::ERR _internal_error() const;
  void _internal_set_error(::PTP::Common::ERR value);
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // required .PTP.Common.GroupMemberModifyAction group_member_modify_action = 1;
  bool has_group_member_modify_action() const;
  private:
  bool _internal_has_group_member_modify_action() const;
  public:
  void clear_group_member_modify_action();
  ::PTP::Common::GroupMemberModifyAction group_member_modify_action() const;
  void set_group_member_modify_action(::PTP::Common::GroupMemberModifyAction value);
  private:
  ::PTP::Common::GroupMemberModifyAction _internal_group_member_modify_action() const;
  void _internal_set_group_member_modify_action(::PTP::Common::GroupMemberModifyAction value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Group.GroupChangeMemberRes)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> members_chang_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t group_id_;
    int error_;
    uint32_t auth_uid_;
    int group_member_modify_action_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class GroupChangeMemberNotify final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Group.GroupChangeMemberNotify) */ {
 public:
  inline GroupChangeMemberNotify() : GroupChangeMemberNotify(nullptr) {}
  ~GroupChangeMemberNotify() override;
  explicit PROTOBUF_CONSTEXPR GroupChangeMemberNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupChangeMemberNotify(const GroupChangeMemberNotify& from);
  GroupChangeMemberNotify(GroupChangeMemberNotify&& from) noexcept
    : GroupChangeMemberNotify() {
    *this = ::std::move(from);
  }

  inline GroupChangeMemberNotify& operator=(const GroupChangeMemberNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupChangeMemberNotify& operator=(GroupChangeMemberNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupChangeMemberNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupChangeMemberNotify* internal_default_instance() {
    return reinterpret_cast<const GroupChangeMemberNotify*>(
               &_GroupChangeMemberNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GroupChangeMemberNotify& a, GroupChangeMemberNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupChangeMemberNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupChangeMemberNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupChangeMemberNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupChangeMemberNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupChangeMemberNotify& from);
  void MergeFrom(const GroupChangeMemberNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupChangeMemberNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Group.GroupChangeMemberNotify";
  }
  protected:
  explicit GroupChangeMemberNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersChangFieldNumber = 3,
    kGroupIdFieldNumber = 2,
    kGroupMemberModifyActionFieldNumber = 1,
  };
  // repeated string members_chang = 3;
  int members_chang_size() const;
  private:
  int _internal_members_chang_size() const;
  public:
  void clear_members_chang();
  const std::string& members_chang(int index) const;
  std::string* mutable_members_chang(int index);
  void set_members_chang(int index, const std::string& value);
  void set_members_chang(int index, std::string&& value);
  void set_members_chang(int index, const char* value);
  void set_members_chang(int index, const char* value, size_t size);
  std::string* add_members_chang();
  void add_members_chang(const std::string& value);
  void add_members_chang(std::string&& value);
  void add_members_chang(const char* value);
  void add_members_chang(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& members_chang() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_members_chang();
  private:
  const std::string& _internal_members_chang(int index) const;
  std::string* _internal_add_members_chang();
  public:

  // required uint32 group_id = 2;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // required .PTP.Common.GroupMemberModifyAction group_member_modify_action = 1;
  bool has_group_member_modify_action() const;
  private:
  bool _internal_has_group_member_modify_action() const;
  public:
  void clear_group_member_modify_action();
  ::PTP::Common::GroupMemberModifyAction group_member_modify_action() const;
  void set_group_member_modify_action(::PTP::Common::GroupMemberModifyAction value);
  private:
  ::PTP::Common::GroupMemberModifyAction _internal_group_member_modify_action() const;
  void _internal_set_group_member_modify_action(::PTP::Common::GroupMemberModifyAction value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Group.GroupChangeMemberNotify)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> members_chang_;
    uint32_t group_id_;
    int group_member_modify_action_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class GroupGetListReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Group.GroupGetListReq) */ {
 public:
  inline GroupGetListReq() : GroupGetListReq(nullptr) {}
  ~GroupGetListReq() override;
  explicit PROTOBUF_CONSTEXPR GroupGetListReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupGetListReq(const GroupGetListReq& from);
  GroupGetListReq(GroupGetListReq&& from) noexcept
    : GroupGetListReq() {
    *this = ::std::move(from);
  }

  inline GroupGetListReq& operator=(const GroupGetListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupGetListReq& operator=(GroupGetListReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupGetListReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupGetListReq* internal_default_instance() {
    return reinterpret_cast<const GroupGetListReq*>(
               &_GroupGetListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GroupGetListReq& a, GroupGetListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupGetListReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupGetListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupGetListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupGetListReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupGetListReq& from);
  void MergeFrom(const GroupGetListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupGetListReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Group.GroupGetListReq";
  }
  protected:
  explicit GroupGetListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kGroupInfoUpdatedTimeFieldNumber = 1,
    kAuthUidFieldNumber = 21,
  };
  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required uint32 group_info_updated_time = 1;
  bool has_group_info_updated_time() const;
  private:
  bool _internal_has_group_info_updated_time() const;
  public:
  void clear_group_info_updated_time();
  uint32_t group_info_updated_time() const;
  void set_group_info_updated_time(uint32_t value);
  private:
  uint32_t _internal_group_info_updated_time() const;
  void _internal_set_group_info_updated_time(uint32_t value);
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Group.GroupGetListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t group_info_updated_time_;
    uint32_t auth_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class GroupGetListRes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Group.GroupGetListRes) */ {
 public:
  inline GroupGetListRes() : GroupGetListRes(nullptr) {}
  ~GroupGetListRes() override;
  explicit PROTOBUF_CONSTEXPR GroupGetListRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupGetListRes(const GroupGetListRes& from);
  GroupGetListRes(GroupGetListRes&& from) noexcept
    : GroupGetListRes() {
    *this = ::std::move(from);
  }

  inline GroupGetListRes& operator=(const GroupGetListRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupGetListRes& operator=(GroupGetListRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupGetListRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupGetListRes* internal_default_instance() {
    return reinterpret_cast<const GroupGetListRes*>(
               &_GroupGetListRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GroupGetListRes& a, GroupGetListRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupGetListRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupGetListRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupGetListRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupGetListRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupGetListRes& from);
  void MergeFrom(const GroupGetListRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupGetListRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Group.GroupGetListRes";
  }
  protected:
  explicit GroupGetListRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 2,
    kAttachDataFieldNumber = 20,
    kGroupInfoUpdatedTimeFieldNumber = 1,
    kErrorFieldNumber = 3,
    kAuthUidFieldNumber = 21,
  };
  // repeated .PTP.Common.GroupInfo groups = 2;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::PTP::Common::GroupInfo* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::GroupInfo >*
      mutable_groups();
  private:
  const ::PTP::Common::GroupInfo& _internal_groups(int index) const;
  ::PTP::Common::GroupInfo* _internal_add_groups();
  public:
  const ::PTP::Common::GroupInfo& groups(int index) const;
  ::PTP::Common::GroupInfo* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::GroupInfo >&
      groups() const;

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required uint32 group_info_updated_time = 1;
  bool has_group_info_updated_time() const;
  private:
  bool _internal_has_group_info_updated_time() const;
  public:
  void clear_group_info_updated_time();
  uint32_t group_info_updated_time() const;
  void set_group_info_updated_time(uint32_t value);
  private:
  uint32_t _internal_group_info_updated_time() const;
  void _internal_set_group_info_updated_time(uint32_t value);
  public:

  // required .PTP.Common.ERR error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);
  private:
  ::PTP::Common::ERR _internal_error() const;
  void _internal_set_error(::PTP::Common::ERR value);
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Group.GroupGetListRes)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::GroupInfo > groups_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t group_info_updated_time_;
    int error_;
    uint32_t auth_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class GroupGetMembersListReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Group.GroupGetMembersListReq) */ {
 public:
  inline GroupGetMembersListReq() : GroupGetMembersListReq(nullptr) {}
  ~GroupGetMembersListReq() override;
  explicit PROTOBUF_CONSTEXPR GroupGetMembersListReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupGetMembersListReq(const GroupGetMembersListReq& from);
  GroupGetMembersListReq(GroupGetMembersListReq&& from) noexcept
    : GroupGetMembersListReq() {
    *this = ::std::move(from);
  }

  inline GroupGetMembersListReq& operator=(const GroupGetMembersListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupGetMembersListReq& operator=(GroupGetMembersListReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupGetMembersListReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupGetMembersListReq* internal_default_instance() {
    return reinterpret_cast<const GroupGetMembersListReq*>(
               &_GroupGetMembersListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GroupGetMembersListReq& a, GroupGetMembersListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupGetMembersListReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupGetMembersListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupGetMembersListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupGetMembersListReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupGetMembersListReq& from);
  void MergeFrom(const GroupGetMembersListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupGetMembersListReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Group.GroupGetMembersListReq";
  }
  protected:
  explicit GroupGetMembersListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kGroupMembersUpdatedTimeFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kAuthUidFieldNumber = 21,
  };
  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required uint32 group_members_updated_time = 1;
  bool has_group_members_updated_time() const;
  private:
  bool _internal_has_group_members_updated_time() const;
  public:
  void clear_group_members_updated_time();
  uint32_t group_members_updated_time() const;
  void set_group_members_updated_time(uint32_t value);
  private:
  uint32_t _internal_group_members_updated_time() const;
  void _internal_set_group_members_updated_time(uint32_t value);
  public:

  // required uint32 group_id = 2;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Group.GroupGetMembersListReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t group_members_updated_time_;
    uint32_t group_id_;
    uint32_t auth_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class GroupGetMembersListRes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Group.GroupGetMembersListRes) */ {
 public:
  inline GroupGetMembersListRes() : GroupGetMembersListRes(nullptr) {}
  ~GroupGetMembersListRes() override;
  explicit PROTOBUF_CONSTEXPR GroupGetMembersListRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupGetMembersListRes(const GroupGetMembersListRes& from);
  GroupGetMembersListRes(GroupGetMembersListRes&& from) noexcept
    : GroupGetMembersListRes() {
    *this = ::std::move(from);
  }

  inline GroupGetMembersListRes& operator=(const GroupGetMembersListRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupGetMembersListRes& operator=(GroupGetMembersListRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupGetMembersListRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupGetMembersListRes* internal_default_instance() {
    return reinterpret_cast<const GroupGetMembersListRes*>(
               &_GroupGetMembersListRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GroupGetMembersListRes& a, GroupGetMembersListRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupGetMembersListRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupGetMembersListRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupGetMembersListRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupGetMembersListRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupGetMembersListRes& from);
  void MergeFrom(const GroupGetMembersListRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupGetMembersListRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Group.GroupGetMembersListRes";
  }
  protected:
  explicit GroupGetMembersListRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 3,
    kGroupMembersFieldNumber = 4,
    kAttachDataFieldNumber = 20,
    kGroupMembersUpdatedTimeFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kErrorFieldNumber = 5,
    kAuthUidFieldNumber = 21,
  };
  // repeated .PTP.Common.UserInfo members = 3;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::PTP::Common::UserInfo* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::UserInfo >*
      mutable_members();
  private:
  const ::PTP::Common::UserInfo& _internal_members(int index) const;
  ::PTP::Common::UserInfo* _internal_add_members();
  public:
  const ::PTP::Common::UserInfo& members(int index) const;
  ::PTP::Common::UserInfo* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::UserInfo >&
      members() const;

  // repeated .PTP.Common.GroupMember group_members = 4;
  int group_members_size() const;
  private:
  int _internal_group_members_size() const;
  public:
  void clear_group_members();
  ::PTP::Common::GroupMember* mutable_group_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::GroupMember >*
      mutable_group_members();
  private:
  const ::PTP::Common::GroupMember& _internal_group_members(int index) const;
  ::PTP::Common::GroupMember* _internal_add_group_members();
  public:
  const ::PTP::Common::GroupMember& group_members(int index) const;
  ::PTP::Common::GroupMember* add_group_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::GroupMember >&
      group_members() const;

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required uint32 group_members_updated_time = 1;
  bool has_group_members_updated_time() const;
  private:
  bool _internal_has_group_members_updated_time() const;
  public:
  void clear_group_members_updated_time();
  uint32_t group_members_updated_time() const;
  void set_group_members_updated_time(uint32_t value);
  private:
  uint32_t _internal_group_members_updated_time() const;
  void _internal_set_group_members_updated_time(uint32_t value);
  public:

  // required uint32 group_id = 2;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // required .PTP.Common.ERR error = 5;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);
  private:
  ::PTP::Common::ERR _internal_error() const;
  void _internal_set_error(::PTP::Common::ERR value);
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Group.GroupGetMembersListRes)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::UserInfo > members_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::GroupMember > group_members_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t group_members_updated_time_;
    uint32_t group_id_;
    int error_;
    uint32_t auth_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class GroupUnreadMsgReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Group.GroupUnreadMsgReq) */ {
 public:
  inline GroupUnreadMsgReq() : GroupUnreadMsgReq(nullptr) {}
  ~GroupUnreadMsgReq() override;
  explicit PROTOBUF_CONSTEXPR GroupUnreadMsgReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupUnreadMsgReq(const GroupUnreadMsgReq& from);
  GroupUnreadMsgReq(GroupUnreadMsgReq&& from) noexcept
    : GroupUnreadMsgReq() {
    *this = ::std::move(from);
  }

  inline GroupUnreadMsgReq& operator=(const GroupUnreadMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupUnreadMsgReq& operator=(GroupUnreadMsgReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupUnreadMsgReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupUnreadMsgReq* internal_default_instance() {
    return reinterpret_cast<const GroupUnreadMsgReq*>(
               &_GroupUnreadMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GroupUnreadMsgReq& a, GroupUnreadMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupUnreadMsgReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupUnreadMsgReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupUnreadMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupUnreadMsgReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupUnreadMsgReq& from);
  void MergeFrom(const GroupUnreadMsgReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupUnreadMsgReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Group.GroupUnreadMsgReq";
  }
  protected:
  explicit GroupUnreadMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kAuthUidFieldNumber = 21,
  };
  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Group.GroupUnreadMsgReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t auth_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class GroupUnreadMsgRes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Group.GroupUnreadMsgRes) */ {
 public:
  inline GroupUnreadMsgRes() : GroupUnreadMsgRes(nullptr) {}
  ~GroupUnreadMsgRes() override;
  explicit PROTOBUF_CONSTEXPR GroupUnreadMsgRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupUnreadMsgRes(const GroupUnreadMsgRes& from);
  GroupUnreadMsgRes(GroupUnreadMsgRes&& from) noexcept
    : GroupUnreadMsgRes() {
    *this = ::std::move(from);
  }

  inline GroupUnreadMsgRes& operator=(const GroupUnreadMsgRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupUnreadMsgRes& operator=(GroupUnreadMsgRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupUnreadMsgRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupUnreadMsgRes* internal_default_instance() {
    return reinterpret_cast<const GroupUnreadMsgRes*>(
               &_GroupUnreadMsgRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GroupUnreadMsgRes& a, GroupUnreadMsgRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupUnreadMsgRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupUnreadMsgRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupUnreadMsgRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupUnreadMsgRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupUnreadMsgRes& from);
  void MergeFrom(const GroupUnreadMsgRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupUnreadMsgRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Group.GroupUnreadMsgRes";
  }
  protected:
  explicit GroupUnreadMsgRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnreadListFieldNumber = 1,
    kAttachDataFieldNumber = 20,
    kUnreadCntFieldNumber = 3,
    kErrorFieldNumber = 4,
    kAuthUidFieldNumber = 21,
  };
  // repeated .PTP.Common.MsgInfo unread_list = 1;
  int unread_list_size() const;
  private:
  int _internal_unread_list_size() const;
  public:
  void clear_unread_list();
  ::PTP::Common::MsgInfo* mutable_unread_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::MsgInfo >*
      mutable_unread_list();
  private:
  const ::PTP::Common::MsgInfo& _internal_unread_list(int index) const;
  ::PTP::Common::MsgInfo* _internal_add_unread_list();
  public:
  const ::PTP::Common::MsgInfo& unread_list(int index) const;
  ::PTP::Common::MsgInfo* add_unread_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::MsgInfo >&
      unread_list() const;

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required uint32 unread_cnt = 3;
  bool has_unread_cnt() const;
  private:
  bool _internal_has_unread_cnt() const;
  public:
  void clear_unread_cnt();
  uint32_t unread_cnt() const;
  void set_unread_cnt(uint32_t value);
  private:
  uint32_t _internal_unread_cnt() const;
  void _internal_set_unread_cnt(uint32_t value);
  public:

  // required .PTP.Common.ERR error = 4;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);
  private:
  ::PTP::Common::ERR _internal_error() const;
  void _internal_set_error(::PTP::Common::ERR value);
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Group.GroupUnreadMsgRes)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::MsgInfo > unread_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t unread_cnt_;
    int error_;
    uint32_t auth_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class GroupRemoveSessionReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Group.GroupRemoveSessionReq) */ {
 public:
  inline GroupRemoveSessionReq() : GroupRemoveSessionReq(nullptr) {}
  ~GroupRemoveSessionReq() override;
  explicit PROTOBUF_CONSTEXPR GroupRemoveSessionReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupRemoveSessionReq(const GroupRemoveSessionReq& from);
  GroupRemoveSessionReq(GroupRemoveSessionReq&& from) noexcept
    : GroupRemoveSessionReq() {
    *this = ::std::move(from);
  }

  inline GroupRemoveSessionReq& operator=(const GroupRemoveSessionReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupRemoveSessionReq& operator=(GroupRemoveSessionReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupRemoveSessionReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupRemoveSessionReq* internal_default_instance() {
    return reinterpret_cast<const GroupRemoveSessionReq*>(
               &_GroupRemoveSessionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GroupRemoveSessionReq& a, GroupRemoveSessionReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupRemoveSessionReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupRemoveSessionReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupRemoveSessionReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupRemoveSessionReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupRemoveSessionReq& from);
  void MergeFrom(const GroupRemoveSessionReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupRemoveSessionReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Group.GroupRemoveSessionReq";
  }
  protected:
  explicit GroupRemoveSessionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kGroupIdFieldNumber = 2,
    kAuthUidFieldNumber = 21,
  };
  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required uint32 group_id = 2;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Group.GroupRemoveSessionReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t group_id_;
    uint32_t auth_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class GroupRemoveSessionRes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Group.GroupRemoveSessionRes) */ {
 public:
  inline GroupRemoveSessionRes() : GroupRemoveSessionRes(nullptr) {}
  ~GroupRemoveSessionRes() override;
  explicit PROTOBUF_CONSTEXPR GroupRemoveSessionRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupRemoveSessionRes(const GroupRemoveSessionRes& from);
  GroupRemoveSessionRes(GroupRemoveSessionRes&& from) noexcept
    : GroupRemoveSessionRes() {
    *this = ::std::move(from);
  }

  inline GroupRemoveSessionRes& operator=(const GroupRemoveSessionRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupRemoveSessionRes& operator=(GroupRemoveSessionRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupRemoveSessionRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupRemoveSessionRes* internal_default_instance() {
    return reinterpret_cast<const GroupRemoveSessionRes*>(
               &_GroupRemoveSessionRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GroupRemoveSessionRes& a, GroupRemoveSessionRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupRemoveSessionRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupRemoveSessionRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupRemoveSessionRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupRemoveSessionRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupRemoveSessionRes& from);
  void MergeFrom(const GroupRemoveSessionRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupRemoveSessionRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Group.GroupRemoveSessionRes";
  }
  protected:
  explicit GroupRemoveSessionRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kErrorFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kAuthUidFieldNumber = 21,
  };
  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required .PTP.Common.ERR error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);
  private:
  ::PTP::Common::ERR _internal_error() const;
  void _internal_set_error(::PTP::Common::ERR value);
  public:

  // required uint32 group_id = 2;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Group.GroupRemoveSessionRes)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    int error_;
    uint32_t group_id_;
    uint32_t auth_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eGroup_2eproto;
};
// -------------------------------------------------------------------

class GroupRemoveSessionNotify final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Group.GroupRemoveSessionNotify) */ {
 public:
  inline GroupRemoveSessionNotify() : GroupRemoveSessionNotify(nullptr) {}
  ~GroupRemoveSessionNotify() override;
  explicit PROTOBUF_CONSTEXPR GroupRemoveSessionNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupRemoveSessionNotify(const GroupRemoveSessionNotify& from);
  GroupRemoveSessionNotify(GroupRemoveSessionNotify&& from) noexcept
    : GroupRemoveSessionNotify() {
    *this = ::std::move(from);
  }

  inline GroupRemoveSessionNotify& operator=(const GroupRemoveSessionNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupRemoveSessionNotify& operator=(GroupRemoveSessionNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupRemoveSessionNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupRemoveSessionNotify* internal_default_instance() {
    return reinterpret_cast<const GroupRemoveSessionNotify*>(
               &_GroupRemoveSessionNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GroupRemoveSessionNotify& a, GroupRemoveSessionNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupRemoveSessionNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupRemoveSessionNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupRemoveSessionNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupRemoveSessionNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupRemoveSessionNotify& from);
  void MergeFrom(const GroupRemoveSessionNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupRemoveSessionNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Group.GroupRemoveSessionNotify";
  }
  protected:
  explicit GroupRemoveSessionNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kFromUidFieldNumber = 3,
  };
  // required uint32 group_id = 1;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // required uint32 from_uid = 3;
  bool has_from_uid() const;
  private:
  bool _internal_has_from_uid() const;
  public:
  void clear_from_uid();
  uint32_t from_uid() const;
  void set_from_uid(uint32_t value);
  private:
  uint32_t _internal_from_uid() const;
  void _internal_set_from_uid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Group.GroupRemoveSessionNotify)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t group_id_;
    uint32_t from_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eGroup_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GroupPreCreateReq

// required .PTP.Common.GroupType group_type = 1;
inline bool GroupPreCreateReq::_internal_has_group_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GroupPreCreateReq::has_group_type() const {
  return _internal_has_group_type();
}
inline void GroupPreCreateReq::clear_group_type() {
  _impl_.group_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::PTP::Common::GroupType GroupPreCreateReq::_internal_group_type() const {
  return static_cast< ::PTP::Common::GroupType >(_impl_.group_type_);
}
inline ::PTP::Common::GroupType GroupPreCreateReq::group_type() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupPreCreateReq.group_type)
  return _internal_group_type();
}
inline void GroupPreCreateReq::_internal_set_group_type(::PTP::Common::GroupType value) {
  assert(::PTP::Common::GroupType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.group_type_ = value;
}
inline void GroupPreCreateReq::set_group_type(::PTP::Common::GroupType value) {
  _internal_set_group_type(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupPreCreateReq.group_type)
}

// repeated uint32 members = 7;
inline int GroupPreCreateReq::_internal_members_size() const {
  return _impl_.members_.size();
}
inline int GroupPreCreateReq::members_size() const {
  return _internal_members_size();
}
inline void GroupPreCreateReq::clear_members() {
  _impl_.members_.Clear();
}
inline uint32_t GroupPreCreateReq::_internal_members(int index) const {
  return _impl_.members_.Get(index);
}
inline uint32_t GroupPreCreateReq::members(int index) const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupPreCreateReq.members)
  return _internal_members(index);
}
inline void GroupPreCreateReq::set_members(int index, uint32_t value) {
  _impl_.members_.Set(index, value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupPreCreateReq.members)
}
inline void GroupPreCreateReq::_internal_add_members(uint32_t value) {
  _impl_.members_.Add(value);
}
inline void GroupPreCreateReq::add_members(uint32_t value) {
  _internal_add_members(value);
  // @@protoc_insertion_point(field_add:PTP.Group.GroupPreCreateReq.members)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GroupPreCreateReq::_internal_members() const {
  return _impl_.members_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GroupPreCreateReq::members() const {
  // @@protoc_insertion_point(field_list:PTP.Group.GroupPreCreateReq.members)
  return _internal_members();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GroupPreCreateReq::_internal_mutable_members() {
  return &_impl_.members_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GroupPreCreateReq::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:PTP.Group.GroupPreCreateReq.members)
  return _internal_mutable_members();
}

// optional bytes attach_data = 20;
inline bool GroupPreCreateReq::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupPreCreateReq::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void GroupPreCreateReq::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupPreCreateReq::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupPreCreateReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupPreCreateReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Group.GroupPreCreateReq.attach_data)
}
inline std::string* GroupPreCreateReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupPreCreateReq.attach_data)
  return _s;
}
inline const std::string& GroupPreCreateReq::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void GroupPreCreateReq::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupPreCreateReq::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupPreCreateReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Group.GroupPreCreateReq.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupPreCreateReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Group.GroupPreCreateReq.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool GroupPreCreateReq::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupPreCreateReq::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void GroupPreCreateReq::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t GroupPreCreateReq::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t GroupPreCreateReq::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupPreCreateReq.auth_uid)
  return _internal_auth_uid();
}
inline void GroupPreCreateReq::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.auth_uid_ = value;
}
inline void GroupPreCreateReq::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupPreCreateReq.auth_uid)
}

// -------------------------------------------------------------------

// GroupPreCreateRes

// optional string group_adr = 1;
inline bool GroupPreCreateRes::_internal_has_group_adr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupPreCreateRes::has_group_adr() const {
  return _internal_has_group_adr();
}
inline void GroupPreCreateRes::clear_group_adr() {
  _impl_.group_adr_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupPreCreateRes::group_adr() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupPreCreateRes.group_adr)
  return _internal_group_adr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupPreCreateRes::set_group_adr(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.group_adr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Group.GroupPreCreateRes.group_adr)
}
inline std::string* GroupPreCreateRes::mutable_group_adr() {
  std::string* _s = _internal_mutable_group_adr();
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupPreCreateRes.group_adr)
  return _s;
}
inline const std::string& GroupPreCreateRes::_internal_group_adr() const {
  return _impl_.group_adr_.Get();
}
inline void GroupPreCreateRes::_internal_set_group_adr(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.group_adr_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupPreCreateRes::_internal_mutable_group_adr() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.group_adr_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupPreCreateRes::release_group_adr() {
  // @@protoc_insertion_point(field_release:PTP.Group.GroupPreCreateRes.group_adr)
  if (!_internal_has_group_adr()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.group_adr_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_adr_.IsDefault()) {
    _impl_.group_adr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupPreCreateRes::set_allocated_group_adr(std::string* group_adr) {
  if (group_adr != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.group_adr_.SetAllocated(group_adr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_adr_.IsDefault()) {
    _impl_.group_adr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Group.GroupPreCreateRes.group_adr)
}

// required uint32 group_idx = 2;
inline bool GroupPreCreateRes::_internal_has_group_idx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GroupPreCreateRes::has_group_idx() const {
  return _internal_has_group_idx();
}
inline void GroupPreCreateRes::clear_group_idx() {
  _impl_.group_idx_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t GroupPreCreateRes::_internal_group_idx() const {
  return _impl_.group_idx_;
}
inline uint32_t GroupPreCreateRes::group_idx() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupPreCreateRes.group_idx)
  return _internal_group_idx();
}
inline void GroupPreCreateRes::_internal_set_group_idx(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.group_idx_ = value;
}
inline void GroupPreCreateRes::set_group_idx(uint32_t value) {
  _internal_set_group_idx(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupPreCreateRes.group_idx)
}

// required .PTP.Common.ERR error = 3;
inline bool GroupPreCreateRes::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GroupPreCreateRes::has_error() const {
  return _internal_has_error();
}
inline void GroupPreCreateRes::clear_error() {
  _impl_.error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::PTP::Common::ERR GroupPreCreateRes::_internal_error() const {
  return static_cast< ::PTP::Common::ERR >(_impl_.error_);
}
inline ::PTP::Common::ERR GroupPreCreateRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupPreCreateRes.error)
  return _internal_error();
}
inline void GroupPreCreateRes::_internal_set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.error_ = value;
}
inline void GroupPreCreateRes::set_error(::PTP::Common::ERR value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupPreCreateRes.error)
}

// optional string captcha = 4;
inline bool GroupPreCreateRes::_internal_has_captcha() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupPreCreateRes::has_captcha() const {
  return _internal_has_captcha();
}
inline void GroupPreCreateRes::clear_captcha() {
  _impl_.captcha_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GroupPreCreateRes::captcha() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupPreCreateRes.captcha)
  return _internal_captcha();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupPreCreateRes::set_captcha(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.captcha_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Group.GroupPreCreateRes.captcha)
}
inline std::string* GroupPreCreateRes::mutable_captcha() {
  std::string* _s = _internal_mutable_captcha();
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupPreCreateRes.captcha)
  return _s;
}
inline const std::string& GroupPreCreateRes::_internal_captcha() const {
  return _impl_.captcha_.Get();
}
inline void GroupPreCreateRes::_internal_set_captcha(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.captcha_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupPreCreateRes::_internal_mutable_captcha() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.captcha_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupPreCreateRes::release_captcha() {
  // @@protoc_insertion_point(field_release:PTP.Group.GroupPreCreateRes.captcha)
  if (!_internal_has_captcha()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.captcha_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.captcha_.IsDefault()) {
    _impl_.captcha_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupPreCreateRes::set_allocated_captcha(std::string* captcha) {
  if (captcha != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.captcha_.SetAllocated(captcha, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.captcha_.IsDefault()) {
    _impl_.captcha_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Group.GroupPreCreateRes.captcha)
}

// optional bytes attach_data = 20;
inline bool GroupPreCreateRes::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GroupPreCreateRes::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void GroupPreCreateRes::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GroupPreCreateRes::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupPreCreateRes.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupPreCreateRes::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Group.GroupPreCreateRes.attach_data)
}
inline std::string* GroupPreCreateRes::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupPreCreateRes.attach_data)
  return _s;
}
inline const std::string& GroupPreCreateRes::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void GroupPreCreateRes::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupPreCreateRes::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupPreCreateRes::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Group.GroupPreCreateRes.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupPreCreateRes::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Group.GroupPreCreateRes.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool GroupPreCreateRes::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GroupPreCreateRes::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void GroupPreCreateRes::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t GroupPreCreateRes::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t GroupPreCreateRes::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupPreCreateRes.auth_uid)
  return _internal_auth_uid();
}
inline void GroupPreCreateRes::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.auth_uid_ = value;
}
inline void GroupPreCreateRes::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupPreCreateRes.auth_uid)
}

// -------------------------------------------------------------------

// GroupCreateReq

// required uint32 group_idx = 1;
inline bool GroupCreateReq::_internal_has_group_idx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GroupCreateReq::has_group_idx() const {
  return _internal_has_group_idx();
}
inline void GroupCreateReq::clear_group_idx() {
  _impl_.group_idx_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t GroupCreateReq::_internal_group_idx() const {
  return _impl_.group_idx_;
}
inline uint32_t GroupCreateReq::group_idx() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupCreateReq.group_idx)
  return _internal_group_idx();
}
inline void GroupCreateReq::_internal_set_group_idx(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.group_idx_ = value;
}
inline void GroupCreateReq::set_group_idx(uint32_t value) {
  _internal_set_group_idx(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupCreateReq.group_idx)
}

// required bytes sign = 2;
inline bool GroupCreateReq::_internal_has_sign() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupCreateReq::has_sign() const {
  return _internal_has_sign();
}
inline void GroupCreateReq::clear_sign() {
  _impl_.sign_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupCreateReq::sign() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupCreateReq.sign)
  return _internal_sign();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupCreateReq::set_sign(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.sign_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Group.GroupCreateReq.sign)
}
inline std::string* GroupCreateReq::mutable_sign() {
  std::string* _s = _internal_mutable_sign();
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupCreateReq.sign)
  return _s;
}
inline const std::string& GroupCreateReq::_internal_sign() const {
  return _impl_.sign_.Get();
}
inline void GroupCreateReq::_internal_set_sign(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sign_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupCreateReq::_internal_mutable_sign() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.sign_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupCreateReq::release_sign() {
  // @@protoc_insertion_point(field_release:PTP.Group.GroupCreateReq.sign)
  if (!_internal_has_sign()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.sign_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sign_.IsDefault()) {
    _impl_.sign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupCreateReq::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sign_.SetAllocated(sign, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sign_.IsDefault()) {
    _impl_.sign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Group.GroupCreateReq.sign)
}

// required string captcha = 3;
inline bool GroupCreateReq::_internal_has_captcha() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupCreateReq::has_captcha() const {
  return _internal_has_captcha();
}
inline void GroupCreateReq::clear_captcha() {
  _impl_.captcha_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GroupCreateReq::captcha() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupCreateReq.captcha)
  return _internal_captcha();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupCreateReq::set_captcha(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.captcha_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Group.GroupCreateReq.captcha)
}
inline std::string* GroupCreateReq::mutable_captcha() {
  std::string* _s = _internal_mutable_captcha();
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupCreateReq.captcha)
  return _s;
}
inline const std::string& GroupCreateReq::_internal_captcha() const {
  return _impl_.captcha_.Get();
}
inline void GroupCreateReq::_internal_set_captcha(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.captcha_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupCreateReq::_internal_mutable_captcha() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.captcha_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupCreateReq::release_captcha() {
  // @@protoc_insertion_point(field_release:PTP.Group.GroupCreateReq.captcha)
  if (!_internal_has_captcha()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.captcha_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.captcha_.IsDefault()) {
    _impl_.captcha_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupCreateReq::set_allocated_captcha(std::string* captcha) {
  if (captcha != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.captcha_.SetAllocated(captcha, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.captcha_.IsDefault()) {
    _impl_.captcha_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Group.GroupCreateReq.captcha)
}

// required .PTP.Common.GroupType group_type = 4;
inline bool GroupCreateReq::_internal_has_group_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool GroupCreateReq::has_group_type() const {
  return _internal_has_group_type();
}
inline void GroupCreateReq::clear_group_type() {
  _impl_.group_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::PTP::Common::GroupType GroupCreateReq::_internal_group_type() const {
  return static_cast< ::PTP::Common::GroupType >(_impl_.group_type_);
}
inline ::PTP::Common::GroupType GroupCreateReq::group_type() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupCreateReq.group_type)
  return _internal_group_type();
}
inline void GroupCreateReq::_internal_set_group_type(::PTP::Common::GroupType value) {
  assert(::PTP::Common::GroupType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.group_type_ = value;
}
inline void GroupCreateReq::set_group_type(::PTP::Common::GroupType value) {
  _internal_set_group_type(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupCreateReq.group_type)
}

// optional string name = 5;
inline bool GroupCreateReq::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GroupCreateReq::has_name() const {
  return _internal_has_name();
}
inline void GroupCreateReq::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GroupCreateReq::name() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupCreateReq.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupCreateReq::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Group.GroupCreateReq.name)
}
inline std::string* GroupCreateReq::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupCreateReq.name)
  return _s;
}
inline const std::string& GroupCreateReq::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GroupCreateReq::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupCreateReq::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupCreateReq::release_name() {
  // @@protoc_insertion_point(field_release:PTP.Group.GroupCreateReq.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupCreateReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Group.GroupCreateReq.name)
}

// optional string avatar = 6;
inline bool GroupCreateReq::_internal_has_avatar() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GroupCreateReq::has_avatar() const {
  return _internal_has_avatar();
}
inline void GroupCreateReq::clear_avatar() {
  _impl_.avatar_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& GroupCreateReq::avatar() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupCreateReq.avatar)
  return _internal_avatar();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupCreateReq::set_avatar(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.avatar_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Group.GroupCreateReq.avatar)
}
inline std::string* GroupCreateReq::mutable_avatar() {
  std::string* _s = _internal_mutable_avatar();
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupCreateReq.avatar)
  return _s;
}
inline const std::string& GroupCreateReq::_internal_avatar() const {
  return _impl_.avatar_.Get();
}
inline void GroupCreateReq::_internal_set_avatar(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.avatar_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupCreateReq::_internal_mutable_avatar() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.avatar_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupCreateReq::release_avatar() {
  // @@protoc_insertion_point(field_release:PTP.Group.GroupCreateReq.avatar)
  if (!_internal_has_avatar()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.avatar_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.avatar_.IsDefault()) {
    _impl_.avatar_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupCreateReq::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.avatar_.SetAllocated(avatar, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.avatar_.IsDefault()) {
    _impl_.avatar_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Group.GroupCreateReq.avatar)
}

// repeated uint32 members = 7;
inline int GroupCreateReq::_internal_members_size() const {
  return _impl_.members_.size();
}
inline int GroupCreateReq::members_size() const {
  return _internal_members_size();
}
inline void GroupCreateReq::clear_members() {
  _impl_.members_.Clear();
}
inline uint32_t GroupCreateReq::_internal_members(int index) const {
  return _impl_.members_.Get(index);
}
inline uint32_t GroupCreateReq::members(int index) const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupCreateReq.members)
  return _internal_members(index);
}
inline void GroupCreateReq::set_members(int index, uint32_t value) {
  _impl_.members_.Set(index, value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupCreateReq.members)
}
inline void GroupCreateReq::_internal_add_members(uint32_t value) {
  _impl_.members_.Add(value);
}
inline void GroupCreateReq::add_members(uint32_t value) {
  _internal_add_members(value);
  // @@protoc_insertion_point(field_add:PTP.Group.GroupCreateReq.members)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GroupCreateReq::_internal_members() const {
  return _impl_.members_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GroupCreateReq::members() const {
  // @@protoc_insertion_point(field_list:PTP.Group.GroupCreateReq.members)
  return _internal_members();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GroupCreateReq::_internal_mutable_members() {
  return &_impl_.members_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GroupCreateReq::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:PTP.Group.GroupCreateReq.members)
  return _internal_mutable_members();
}

// optional string about = 8;
inline bool GroupCreateReq::_internal_has_about() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GroupCreateReq::has_about() const {
  return _internal_has_about();
}
inline void GroupCreateReq::clear_about() {
  _impl_.about_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& GroupCreateReq::about() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupCreateReq.about)
  return _internal_about();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupCreateReq::set_about(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.about_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Group.GroupCreateReq.about)
}
inline std::string* GroupCreateReq::mutable_about() {
  std::string* _s = _internal_mutable_about();
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupCreateReq.about)
  return _s;
}
inline const std::string& GroupCreateReq::_internal_about() const {
  return _impl_.about_.Get();
}
inline void GroupCreateReq::_internal_set_about(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.about_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupCreateReq::_internal_mutable_about() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.about_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupCreateReq::release_about() {
  // @@protoc_insertion_point(field_release:PTP.Group.GroupCreateReq.about)
  if (!_internal_has_about()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.about_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.about_.IsDefault()) {
    _impl_.about_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupCreateReq::set_allocated_about(std::string* about) {
  if (about != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.about_.SetAllocated(about, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.about_.IsDefault()) {
    _impl_.about_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Group.GroupCreateReq.about)
}

// optional bytes attach_data = 20;
inline bool GroupCreateReq::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GroupCreateReq::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void GroupCreateReq::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& GroupCreateReq::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupCreateReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupCreateReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Group.GroupCreateReq.attach_data)
}
inline std::string* GroupCreateReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupCreateReq.attach_data)
  return _s;
}
inline const std::string& GroupCreateReq::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void GroupCreateReq::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupCreateReq::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupCreateReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Group.GroupCreateReq.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupCreateReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Group.GroupCreateReq.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool GroupCreateReq::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GroupCreateReq::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void GroupCreateReq::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t GroupCreateReq::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t GroupCreateReq::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupCreateReq.auth_uid)
  return _internal_auth_uid();
}
inline void GroupCreateReq::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.auth_uid_ = value;
}
inline void GroupCreateReq::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupCreateReq.auth_uid)
}

// -------------------------------------------------------------------

// GroupCreateRes

// optional .PTP.Common.GroupInfo group = 1;
inline bool GroupCreateRes::_internal_has_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.group_ != nullptr);
  return value;
}
inline bool GroupCreateRes::has_group() const {
  return _internal_has_group();
}
inline const ::PTP::Common::GroupInfo& GroupCreateRes::_internal_group() const {
  const ::PTP::Common::GroupInfo* p = _impl_.group_;
  return p != nullptr ? *p : reinterpret_cast<const ::PTP::Common::GroupInfo&>(
      ::PTP::Common::_GroupInfo_default_instance_);
}
inline const ::PTP::Common::GroupInfo& GroupCreateRes::group() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupCreateRes.group)
  return _internal_group();
}
inline void GroupCreateRes::unsafe_arena_set_allocated_group(
    ::PTP::Common::GroupInfo* group) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.group_);
  }
  _impl_.group_ = group;
  if (group) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PTP.Group.GroupCreateRes.group)
}
inline ::PTP::Common::GroupInfo* GroupCreateRes::release_group() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PTP::Common::GroupInfo* temp = _impl_.group_;
  _impl_.group_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PTP::Common::GroupInfo* GroupCreateRes::unsafe_arena_release_group() {
  // @@protoc_insertion_point(field_release:PTP.Group.GroupCreateRes.group)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PTP::Common::GroupInfo* temp = _impl_.group_;
  _impl_.group_ = nullptr;
  return temp;
}
inline ::PTP::Common::GroupInfo* GroupCreateRes::_internal_mutable_group() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.group_ == nullptr) {
    auto* p = CreateMaybeMessage<::PTP::Common::GroupInfo>(GetArenaForAllocation());
    _impl_.group_ = p;
  }
  return _impl_.group_;
}
inline ::PTP::Common::GroupInfo* GroupCreateRes::mutable_group() {
  ::PTP::Common::GroupInfo* _msg = _internal_mutable_group();
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupCreateRes.group)
  return _msg;
}
inline void GroupCreateRes::set_allocated_group(::PTP::Common::GroupInfo* group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.group_);
  }
  if (group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group));
    if (message_arena != submessage_arena) {
      group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.group_ = group;
  // @@protoc_insertion_point(field_set_allocated:PTP.Group.GroupCreateRes.group)
}

// repeated .PTP.Common.GroupMember group_members = 2;
inline int GroupCreateRes::_internal_group_members_size() const {
  return _impl_.group_members_.size();
}
inline int GroupCreateRes::group_members_size() const {
  return _internal_group_members_size();
}
inline ::PTP::Common::GroupMember* GroupCreateRes::mutable_group_members(int index) {
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupCreateRes.group_members)
  return _impl_.group_members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::GroupMember >*
GroupCreateRes::mutable_group_members() {
  // @@protoc_insertion_point(field_mutable_list:PTP.Group.GroupCreateRes.group_members)
  return &_impl_.group_members_;
}
inline const ::PTP::Common::GroupMember& GroupCreateRes::_internal_group_members(int index) const {
  return _impl_.group_members_.Get(index);
}
inline const ::PTP::Common::GroupMember& GroupCreateRes::group_members(int index) const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupCreateRes.group_members)
  return _internal_group_members(index);
}
inline ::PTP::Common::GroupMember* GroupCreateRes::_internal_add_group_members() {
  return _impl_.group_members_.Add();
}
inline ::PTP::Common::GroupMember* GroupCreateRes::add_group_members() {
  ::PTP::Common::GroupMember* _add = _internal_add_group_members();
  // @@protoc_insertion_point(field_add:PTP.Group.GroupCreateRes.group_members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::GroupMember >&
GroupCreateRes::group_members() const {
  // @@protoc_insertion_point(field_list:PTP.Group.GroupCreateRes.group_members)
  return _impl_.group_members_;
}

// required .PTP.Common.ERR error = 3;
inline bool GroupCreateRes::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GroupCreateRes::has_error() const {
  return _internal_has_error();
}
inline void GroupCreateRes::clear_error() {
  _impl_.error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::PTP::Common::ERR GroupCreateRes::_internal_error() const {
  return static_cast< ::PTP::Common::ERR >(_impl_.error_);
}
inline ::PTP::Common::ERR GroupCreateRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupCreateRes.error)
  return _internal_error();
}
inline void GroupCreateRes::_internal_set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.error_ = value;
}
inline void GroupCreateRes::set_error(::PTP::Common::ERR value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupCreateRes.error)
}

// optional bytes attach_data = 20;
inline bool GroupCreateRes::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupCreateRes::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void GroupCreateRes::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupCreateRes::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupCreateRes.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupCreateRes::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Group.GroupCreateRes.attach_data)
}
inline std::string* GroupCreateRes::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupCreateRes.attach_data)
  return _s;
}
inline const std::string& GroupCreateRes::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void GroupCreateRes::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupCreateRes::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupCreateRes::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Group.GroupCreateRes.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupCreateRes::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Group.GroupCreateRes.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool GroupCreateRes::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GroupCreateRes::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void GroupCreateRes::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t GroupCreateRes::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t GroupCreateRes::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupCreateRes.auth_uid)
  return _internal_auth_uid();
}
inline void GroupCreateRes::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.auth_uid_ = value;
}
inline void GroupCreateRes::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupCreateRes.auth_uid)
}

// -------------------------------------------------------------------

// GroupModifyReq

// required .PTP.Common.GroupModifyAction group_modify_action = 1;
inline bool GroupModifyReq::_internal_has_group_modify_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GroupModifyReq::has_group_modify_action() const {
  return _internal_has_group_modify_action();
}
inline void GroupModifyReq::clear_group_modify_action() {
  _impl_.group_modify_action_ = 1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::PTP::Common::GroupModifyAction GroupModifyReq::_internal_group_modify_action() const {
  return static_cast< ::PTP::Common::GroupModifyAction >(_impl_.group_modify_action_);
}
inline ::PTP::Common::GroupModifyAction GroupModifyReq::group_modify_action() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupModifyReq.group_modify_action)
  return _internal_group_modify_action();
}
inline void GroupModifyReq::_internal_set_group_modify_action(::PTP::Common::GroupModifyAction value) {
  assert(::PTP::Common::GroupModifyAction_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.group_modify_action_ = value;
}
inline void GroupModifyReq::set_group_modify_action(::PTP::Common::GroupModifyAction value) {
  _internal_set_group_modify_action(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupModifyReq.group_modify_action)
}

// required uint32 group_id = 2;
inline bool GroupModifyReq::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GroupModifyReq::has_group_id() const {
  return _internal_has_group_id();
}
inline void GroupModifyReq::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t GroupModifyReq::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t GroupModifyReq::group_id() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupModifyReq.group_id)
  return _internal_group_id();
}
inline void GroupModifyReq::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.group_id_ = value;
}
inline void GroupModifyReq::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupModifyReq.group_id)
}

// required string value = 4;
inline bool GroupModifyReq::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupModifyReq::has_value() const {
  return _internal_has_value();
}
inline void GroupModifyReq::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupModifyReq::value() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupModifyReq.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupModifyReq::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Group.GroupModifyReq.value)
}
inline std::string* GroupModifyReq::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupModifyReq.value)
  return _s;
}
inline const std::string& GroupModifyReq::_internal_value() const {
  return _impl_.value_.Get();
}
inline void GroupModifyReq::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupModifyReq::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupModifyReq::release_value() {
  // @@protoc_insertion_point(field_release:PTP.Group.GroupModifyReq.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupModifyReq::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Group.GroupModifyReq.value)
}

// optional bytes attach_data = 20;
inline bool GroupModifyReq::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupModifyReq::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void GroupModifyReq::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GroupModifyReq::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupModifyReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupModifyReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Group.GroupModifyReq.attach_data)
}
inline std::string* GroupModifyReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupModifyReq.attach_data)
  return _s;
}
inline const std::string& GroupModifyReq::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void GroupModifyReq::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupModifyReq::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupModifyReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Group.GroupModifyReq.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupModifyReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Group.GroupModifyReq.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool GroupModifyReq::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GroupModifyReq::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void GroupModifyReq::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t GroupModifyReq::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t GroupModifyReq::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupModifyReq.auth_uid)
  return _internal_auth_uid();
}
inline void GroupModifyReq::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.auth_uid_ = value;
}
inline void GroupModifyReq::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupModifyReq.auth_uid)
}

// -------------------------------------------------------------------

// GroupModifyRes

// required .PTP.Common.GroupModifyAction group_modify_action = 1;
inline bool GroupModifyRes::_internal_has_group_modify_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GroupModifyRes::has_group_modify_action() const {
  return _internal_has_group_modify_action();
}
inline void GroupModifyRes::clear_group_modify_action() {
  _impl_.group_modify_action_ = 1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::PTP::Common::GroupModifyAction GroupModifyRes::_internal_group_modify_action() const {
  return static_cast< ::PTP::Common::GroupModifyAction >(_impl_.group_modify_action_);
}
inline ::PTP::Common::GroupModifyAction GroupModifyRes::group_modify_action() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupModifyRes.group_modify_action)
  return _internal_group_modify_action();
}
inline void GroupModifyRes::_internal_set_group_modify_action(::PTP::Common::GroupModifyAction value) {
  assert(::PTP::Common::GroupModifyAction_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.group_modify_action_ = value;
}
inline void GroupModifyRes::set_group_modify_action(::PTP::Common::GroupModifyAction value) {
  _internal_set_group_modify_action(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupModifyRes.group_modify_action)
}

// required string value = 2;
inline bool GroupModifyRes::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupModifyRes::has_value() const {
  return _internal_has_value();
}
inline void GroupModifyRes::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupModifyRes::value() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupModifyRes.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupModifyRes::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Group.GroupModifyRes.value)
}
inline std::string* GroupModifyRes::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupModifyRes.value)
  return _s;
}
inline const std::string& GroupModifyRes::_internal_value() const {
  return _impl_.value_.Get();
}
inline void GroupModifyRes::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupModifyRes::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupModifyRes::release_value() {
  // @@protoc_insertion_point(field_release:PTP.Group.GroupModifyRes.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupModifyRes::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Group.GroupModifyRes.value)
}

// required uint32 group_id = 3;
inline bool GroupModifyRes::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GroupModifyRes::has_group_id() const {
  return _internal_has_group_id();
}
inline void GroupModifyRes::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t GroupModifyRes::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t GroupModifyRes::group_id() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupModifyRes.group_id)
  return _internal_group_id();
}
inline void GroupModifyRes::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.group_id_ = value;
}
inline void GroupModifyRes::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupModifyRes.group_id)
}

// required .PTP.Common.ERR error = 4;
inline bool GroupModifyRes::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GroupModifyRes::has_error() const {
  return _internal_has_error();
}
inline void GroupModifyRes::clear_error() {
  _impl_.error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::PTP::Common::ERR GroupModifyRes::_internal_error() const {
  return static_cast< ::PTP::Common::ERR >(_impl_.error_);
}
inline ::PTP::Common::ERR GroupModifyRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupModifyRes.error)
  return _internal_error();
}
inline void GroupModifyRes::_internal_set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.error_ = value;
}
inline void GroupModifyRes::set_error(::PTP::Common::ERR value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupModifyRes.error)
}

// repeated uint32 notify_members = 5;
inline int GroupModifyRes::_internal_notify_members_size() const {
  return _impl_.notify_members_.size();
}
inline int GroupModifyRes::notify_members_size() const {
  return _internal_notify_members_size();
}
inline void GroupModifyRes::clear_notify_members() {
  _impl_.notify_members_.Clear();
}
inline uint32_t GroupModifyRes::_internal_notify_members(int index) const {
  return _impl_.notify_members_.Get(index);
}
inline uint32_t GroupModifyRes::notify_members(int index) const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupModifyRes.notify_members)
  return _internal_notify_members(index);
}
inline void GroupModifyRes::set_notify_members(int index, uint32_t value) {
  _impl_.notify_members_.Set(index, value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupModifyRes.notify_members)
}
inline void GroupModifyRes::_internal_add_notify_members(uint32_t value) {
  _impl_.notify_members_.Add(value);
}
inline void GroupModifyRes::add_notify_members(uint32_t value) {
  _internal_add_notify_members(value);
  // @@protoc_insertion_point(field_add:PTP.Group.GroupModifyRes.notify_members)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GroupModifyRes::_internal_notify_members() const {
  return _impl_.notify_members_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GroupModifyRes::notify_members() const {
  // @@protoc_insertion_point(field_list:PTP.Group.GroupModifyRes.notify_members)
  return _internal_notify_members();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GroupModifyRes::_internal_mutable_notify_members() {
  return &_impl_.notify_members_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GroupModifyRes::mutable_notify_members() {
  // @@protoc_insertion_point(field_mutable_list:PTP.Group.GroupModifyRes.notify_members)
  return _internal_mutable_notify_members();
}

// optional bytes attach_data = 20;
inline bool GroupModifyRes::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupModifyRes::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void GroupModifyRes::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GroupModifyRes::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupModifyRes.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupModifyRes::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Group.GroupModifyRes.attach_data)
}
inline std::string* GroupModifyRes::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupModifyRes.attach_data)
  return _s;
}
inline const std::string& GroupModifyRes::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void GroupModifyRes::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupModifyRes::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupModifyRes::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Group.GroupModifyRes.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupModifyRes::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Group.GroupModifyRes.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool GroupModifyRes::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GroupModifyRes::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void GroupModifyRes::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t GroupModifyRes::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t GroupModifyRes::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupModifyRes.auth_uid)
  return _internal_auth_uid();
}
inline void GroupModifyRes::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.auth_uid_ = value;
}
inline void GroupModifyRes::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupModifyRes.auth_uid)
}

// -------------------------------------------------------------------

// GroupModifyNotify

// required .PTP.Common.GroupModifyAction group_modify_action = 1;
inline bool GroupModifyNotify::_internal_has_group_modify_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GroupModifyNotify::has_group_modify_action() const {
  return _internal_has_group_modify_action();
}
inline void GroupModifyNotify::clear_group_modify_action() {
  _impl_.group_modify_action_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::PTP::Common::GroupModifyAction GroupModifyNotify::_internal_group_modify_action() const {
  return static_cast< ::PTP::Common::GroupModifyAction >(_impl_.group_modify_action_);
}
inline ::PTP::Common::GroupModifyAction GroupModifyNotify::group_modify_action() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupModifyNotify.group_modify_action)
  return _internal_group_modify_action();
}
inline void GroupModifyNotify::_internal_set_group_modify_action(::PTP::Common::GroupModifyAction value) {
  assert(::PTP::Common::GroupModifyAction_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.group_modify_action_ = value;
}
inline void GroupModifyNotify::set_group_modify_action(::PTP::Common::GroupModifyAction value) {
  _internal_set_group_modify_action(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupModifyNotify.group_modify_action)
}

// required uint32 group_id = 2;
inline bool GroupModifyNotify::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupModifyNotify::has_group_id() const {
  return _internal_has_group_id();
}
inline void GroupModifyNotify::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t GroupModifyNotify::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t GroupModifyNotify::group_id() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupModifyNotify.group_id)
  return _internal_group_id();
}
inline void GroupModifyNotify::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.group_id_ = value;
}
inline void GroupModifyNotify::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupModifyNotify.group_id)
}

// required string value = 4;
inline bool GroupModifyNotify::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupModifyNotify::has_value() const {
  return _internal_has_value();
}
inline void GroupModifyNotify::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupModifyNotify::value() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupModifyNotify.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupModifyNotify::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Group.GroupModifyNotify.value)
}
inline std::string* GroupModifyNotify::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupModifyNotify.value)
  return _s;
}
inline const std::string& GroupModifyNotify::_internal_value() const {
  return _impl_.value_.Get();
}
inline void GroupModifyNotify::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupModifyNotify::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupModifyNotify::release_value() {
  // @@protoc_insertion_point(field_release:PTP.Group.GroupModifyNotify.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupModifyNotify::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Group.GroupModifyNotify.value)
}

// -------------------------------------------------------------------

// GroupChangeMemberReq

// required .PTP.Common.GroupMemberModifyAction group_member_modify_action = 1;
inline bool GroupChangeMemberReq::_internal_has_group_member_modify_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GroupChangeMemberReq::has_group_member_modify_action() const {
  return _internal_has_group_member_modify_action();
}
inline void GroupChangeMemberReq::clear_group_member_modify_action() {
  _impl_.group_member_modify_action_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::PTP::Common::GroupMemberModifyAction GroupChangeMemberReq::_internal_group_member_modify_action() const {
  return static_cast< ::PTP::Common::GroupMemberModifyAction >(_impl_.group_member_modify_action_);
}
inline ::PTP::Common::GroupMemberModifyAction GroupChangeMemberReq::group_member_modify_action() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupChangeMemberReq.group_member_modify_action)
  return _internal_group_member_modify_action();
}
inline void GroupChangeMemberReq::_internal_set_group_member_modify_action(::PTP::Common::GroupMemberModifyAction value) {
  assert(::PTP::Common::GroupMemberModifyAction_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.group_member_modify_action_ = value;
}
inline void GroupChangeMemberReq::set_group_member_modify_action(::PTP::Common::GroupMemberModifyAction value) {
  _internal_set_group_member_modify_action(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupChangeMemberReq.group_member_modify_action)
}

// required uint32 group_id = 2;
inline bool GroupChangeMemberReq::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupChangeMemberReq::has_group_id() const {
  return _internal_has_group_id();
}
inline void GroupChangeMemberReq::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t GroupChangeMemberReq::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t GroupChangeMemberReq::group_id() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupChangeMemberReq.group_id)
  return _internal_group_id();
}
inline void GroupChangeMemberReq::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.group_id_ = value;
}
inline void GroupChangeMemberReq::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupChangeMemberReq.group_id)
}

// repeated string members = 3;
inline int GroupChangeMemberReq::_internal_members_size() const {
  return _impl_.members_.size();
}
inline int GroupChangeMemberReq::members_size() const {
  return _internal_members_size();
}
inline void GroupChangeMemberReq::clear_members() {
  _impl_.members_.Clear();
}
inline std::string* GroupChangeMemberReq::add_members() {
  std::string* _s = _internal_add_members();
  // @@protoc_insertion_point(field_add_mutable:PTP.Group.GroupChangeMemberReq.members)
  return _s;
}
inline const std::string& GroupChangeMemberReq::_internal_members(int index) const {
  return _impl_.members_.Get(index);
}
inline const std::string& GroupChangeMemberReq::members(int index) const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupChangeMemberReq.members)
  return _internal_members(index);
}
inline std::string* GroupChangeMemberReq::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupChangeMemberReq.members)
  return _impl_.members_.Mutable(index);
}
inline void GroupChangeMemberReq::set_members(int index, const std::string& value) {
  _impl_.members_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupChangeMemberReq.members)
}
inline void GroupChangeMemberReq::set_members(int index, std::string&& value) {
  _impl_.members_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:PTP.Group.GroupChangeMemberReq.members)
}
inline void GroupChangeMemberReq::set_members(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.members_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PTP.Group.GroupChangeMemberReq.members)
}
inline void GroupChangeMemberReq::set_members(int index, const char* value, size_t size) {
  _impl_.members_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PTP.Group.GroupChangeMemberReq.members)
}
inline std::string* GroupChangeMemberReq::_internal_add_members() {
  return _impl_.members_.Add();
}
inline void GroupChangeMemberReq::add_members(const std::string& value) {
  _impl_.members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PTP.Group.GroupChangeMemberReq.members)
}
inline void GroupChangeMemberReq::add_members(std::string&& value) {
  _impl_.members_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PTP.Group.GroupChangeMemberReq.members)
}
inline void GroupChangeMemberReq::add_members(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PTP.Group.GroupChangeMemberReq.members)
}
inline void GroupChangeMemberReq::add_members(const char* value, size_t size) {
  _impl_.members_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PTP.Group.GroupChangeMemberReq.members)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GroupChangeMemberReq::members() const {
  // @@protoc_insertion_point(field_list:PTP.Group.GroupChangeMemberReq.members)
  return _impl_.members_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GroupChangeMemberReq::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:PTP.Group.GroupChangeMemberReq.members)
  return &_impl_.members_;
}

// optional bytes attach_data = 20;
inline bool GroupChangeMemberReq::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupChangeMemberReq::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void GroupChangeMemberReq::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupChangeMemberReq::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupChangeMemberReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupChangeMemberReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Group.GroupChangeMemberReq.attach_data)
}
inline std::string* GroupChangeMemberReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupChangeMemberReq.attach_data)
  return _s;
}
inline const std::string& GroupChangeMemberReq::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void GroupChangeMemberReq::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupChangeMemberReq::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupChangeMemberReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Group.GroupChangeMemberReq.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupChangeMemberReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Group.GroupChangeMemberReq.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool GroupChangeMemberReq::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GroupChangeMemberReq::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void GroupChangeMemberReq::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t GroupChangeMemberReq::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t GroupChangeMemberReq::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupChangeMemberReq.auth_uid)
  return _internal_auth_uid();
}
inline void GroupChangeMemberReq::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.auth_uid_ = value;
}
inline void GroupChangeMemberReq::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupChangeMemberReq.auth_uid)
}

// -------------------------------------------------------------------

// GroupChangeMemberRes

// required .PTP.Common.GroupMemberModifyAction group_member_modify_action = 1;
inline bool GroupChangeMemberRes::_internal_has_group_member_modify_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GroupChangeMemberRes::has_group_member_modify_action() const {
  return _internal_has_group_member_modify_action();
}
inline void GroupChangeMemberRes::clear_group_member_modify_action() {
  _impl_.group_member_modify_action_ = 1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::PTP::Common::GroupMemberModifyAction GroupChangeMemberRes::_internal_group_member_modify_action() const {
  return static_cast< ::PTP::Common::GroupMemberModifyAction >(_impl_.group_member_modify_action_);
}
inline ::PTP::Common::GroupMemberModifyAction GroupChangeMemberRes::group_member_modify_action() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupChangeMemberRes.group_member_modify_action)
  return _internal_group_member_modify_action();
}
inline void GroupChangeMemberRes::_internal_set_group_member_modify_action(::PTP::Common::GroupMemberModifyAction value) {
  assert(::PTP::Common::GroupMemberModifyAction_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.group_member_modify_action_ = value;
}
inline void GroupChangeMemberRes::set_group_member_modify_action(::PTP::Common::GroupMemberModifyAction value) {
  _internal_set_group_member_modify_action(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupChangeMemberRes.group_member_modify_action)
}

// required uint32 group_id = 3;
inline bool GroupChangeMemberRes::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupChangeMemberRes::has_group_id() const {
  return _internal_has_group_id();
}
inline void GroupChangeMemberRes::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t GroupChangeMemberRes::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t GroupChangeMemberRes::group_id() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupChangeMemberRes.group_id)
  return _internal_group_id();
}
inline void GroupChangeMemberRes::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.group_id_ = value;
}
inline void GroupChangeMemberRes::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupChangeMemberRes.group_id)
}

// repeated string members_chang = 4;
inline int GroupChangeMemberRes::_internal_members_chang_size() const {
  return _impl_.members_chang_.size();
}
inline int GroupChangeMemberRes::members_chang_size() const {
  return _internal_members_chang_size();
}
inline void GroupChangeMemberRes::clear_members_chang() {
  _impl_.members_chang_.Clear();
}
inline std::string* GroupChangeMemberRes::add_members_chang() {
  std::string* _s = _internal_add_members_chang();
  // @@protoc_insertion_point(field_add_mutable:PTP.Group.GroupChangeMemberRes.members_chang)
  return _s;
}
inline const std::string& GroupChangeMemberRes::_internal_members_chang(int index) const {
  return _impl_.members_chang_.Get(index);
}
inline const std::string& GroupChangeMemberRes::members_chang(int index) const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupChangeMemberRes.members_chang)
  return _internal_members_chang(index);
}
inline std::string* GroupChangeMemberRes::mutable_members_chang(int index) {
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupChangeMemberRes.members_chang)
  return _impl_.members_chang_.Mutable(index);
}
inline void GroupChangeMemberRes::set_members_chang(int index, const std::string& value) {
  _impl_.members_chang_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupChangeMemberRes.members_chang)
}
inline void GroupChangeMemberRes::set_members_chang(int index, std::string&& value) {
  _impl_.members_chang_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:PTP.Group.GroupChangeMemberRes.members_chang)
}
inline void GroupChangeMemberRes::set_members_chang(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.members_chang_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PTP.Group.GroupChangeMemberRes.members_chang)
}
inline void GroupChangeMemberRes::set_members_chang(int index, const char* value, size_t size) {
  _impl_.members_chang_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PTP.Group.GroupChangeMemberRes.members_chang)
}
inline std::string* GroupChangeMemberRes::_internal_add_members_chang() {
  return _impl_.members_chang_.Add();
}
inline void GroupChangeMemberRes::add_members_chang(const std::string& value) {
  _impl_.members_chang_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PTP.Group.GroupChangeMemberRes.members_chang)
}
inline void GroupChangeMemberRes::add_members_chang(std::string&& value) {
  _impl_.members_chang_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PTP.Group.GroupChangeMemberRes.members_chang)
}
inline void GroupChangeMemberRes::add_members_chang(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.members_chang_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PTP.Group.GroupChangeMemberRes.members_chang)
}
inline void GroupChangeMemberRes::add_members_chang(const char* value, size_t size) {
  _impl_.members_chang_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PTP.Group.GroupChangeMemberRes.members_chang)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GroupChangeMemberRes::members_chang() const {
  // @@protoc_insertion_point(field_list:PTP.Group.GroupChangeMemberRes.members_chang)
  return _impl_.members_chang_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GroupChangeMemberRes::mutable_members_chang() {
  // @@protoc_insertion_point(field_mutable_list:PTP.Group.GroupChangeMemberRes.members_chang)
  return &_impl_.members_chang_;
}

// required .PTP.Common.ERR error = 5;
inline bool GroupChangeMemberRes::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GroupChangeMemberRes::has_error() const {
  return _internal_has_error();
}
inline void GroupChangeMemberRes::clear_error() {
  _impl_.error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::PTP::Common::ERR GroupChangeMemberRes::_internal_error() const {
  return static_cast< ::PTP::Common::ERR >(_impl_.error_);
}
inline ::PTP::Common::ERR GroupChangeMemberRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupChangeMemberRes.error)
  return _internal_error();
}
inline void GroupChangeMemberRes::_internal_set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.error_ = value;
}
inline void GroupChangeMemberRes::set_error(::PTP::Common::ERR value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupChangeMemberRes.error)
}

// optional bytes attach_data = 20;
inline bool GroupChangeMemberRes::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupChangeMemberRes::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void GroupChangeMemberRes::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupChangeMemberRes::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupChangeMemberRes.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupChangeMemberRes::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Group.GroupChangeMemberRes.attach_data)
}
inline std::string* GroupChangeMemberRes::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupChangeMemberRes.attach_data)
  return _s;
}
inline const std::string& GroupChangeMemberRes::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void GroupChangeMemberRes::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupChangeMemberRes::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupChangeMemberRes::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Group.GroupChangeMemberRes.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupChangeMemberRes::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Group.GroupChangeMemberRes.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool GroupChangeMemberRes::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GroupChangeMemberRes::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void GroupChangeMemberRes::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t GroupChangeMemberRes::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t GroupChangeMemberRes::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupChangeMemberRes.auth_uid)
  return _internal_auth_uid();
}
inline void GroupChangeMemberRes::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.auth_uid_ = value;
}
inline void GroupChangeMemberRes::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupChangeMemberRes.auth_uid)
}

// -------------------------------------------------------------------

// GroupChangeMemberNotify

// required .PTP.Common.GroupMemberModifyAction group_member_modify_action = 1;
inline bool GroupChangeMemberNotify::_internal_has_group_member_modify_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupChangeMemberNotify::has_group_member_modify_action() const {
  return _internal_has_group_member_modify_action();
}
inline void GroupChangeMemberNotify::clear_group_member_modify_action() {
  _impl_.group_member_modify_action_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::PTP::Common::GroupMemberModifyAction GroupChangeMemberNotify::_internal_group_member_modify_action() const {
  return static_cast< ::PTP::Common::GroupMemberModifyAction >(_impl_.group_member_modify_action_);
}
inline ::PTP::Common::GroupMemberModifyAction GroupChangeMemberNotify::group_member_modify_action() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupChangeMemberNotify.group_member_modify_action)
  return _internal_group_member_modify_action();
}
inline void GroupChangeMemberNotify::_internal_set_group_member_modify_action(::PTP::Common::GroupMemberModifyAction value) {
  assert(::PTP::Common::GroupMemberModifyAction_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.group_member_modify_action_ = value;
}
inline void GroupChangeMemberNotify::set_group_member_modify_action(::PTP::Common::GroupMemberModifyAction value) {
  _internal_set_group_member_modify_action(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupChangeMemberNotify.group_member_modify_action)
}

// required uint32 group_id = 2;
inline bool GroupChangeMemberNotify::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupChangeMemberNotify::has_group_id() const {
  return _internal_has_group_id();
}
inline void GroupChangeMemberNotify::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t GroupChangeMemberNotify::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t GroupChangeMemberNotify::group_id() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupChangeMemberNotify.group_id)
  return _internal_group_id();
}
inline void GroupChangeMemberNotify::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.group_id_ = value;
}
inline void GroupChangeMemberNotify::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupChangeMemberNotify.group_id)
}

// repeated string members_chang = 3;
inline int GroupChangeMemberNotify::_internal_members_chang_size() const {
  return _impl_.members_chang_.size();
}
inline int GroupChangeMemberNotify::members_chang_size() const {
  return _internal_members_chang_size();
}
inline void GroupChangeMemberNotify::clear_members_chang() {
  _impl_.members_chang_.Clear();
}
inline std::string* GroupChangeMemberNotify::add_members_chang() {
  std::string* _s = _internal_add_members_chang();
  // @@protoc_insertion_point(field_add_mutable:PTP.Group.GroupChangeMemberNotify.members_chang)
  return _s;
}
inline const std::string& GroupChangeMemberNotify::_internal_members_chang(int index) const {
  return _impl_.members_chang_.Get(index);
}
inline const std::string& GroupChangeMemberNotify::members_chang(int index) const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupChangeMemberNotify.members_chang)
  return _internal_members_chang(index);
}
inline std::string* GroupChangeMemberNotify::mutable_members_chang(int index) {
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupChangeMemberNotify.members_chang)
  return _impl_.members_chang_.Mutable(index);
}
inline void GroupChangeMemberNotify::set_members_chang(int index, const std::string& value) {
  _impl_.members_chang_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupChangeMemberNotify.members_chang)
}
inline void GroupChangeMemberNotify::set_members_chang(int index, std::string&& value) {
  _impl_.members_chang_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:PTP.Group.GroupChangeMemberNotify.members_chang)
}
inline void GroupChangeMemberNotify::set_members_chang(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.members_chang_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PTP.Group.GroupChangeMemberNotify.members_chang)
}
inline void GroupChangeMemberNotify::set_members_chang(int index, const char* value, size_t size) {
  _impl_.members_chang_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PTP.Group.GroupChangeMemberNotify.members_chang)
}
inline std::string* GroupChangeMemberNotify::_internal_add_members_chang() {
  return _impl_.members_chang_.Add();
}
inline void GroupChangeMemberNotify::add_members_chang(const std::string& value) {
  _impl_.members_chang_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PTP.Group.GroupChangeMemberNotify.members_chang)
}
inline void GroupChangeMemberNotify::add_members_chang(std::string&& value) {
  _impl_.members_chang_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PTP.Group.GroupChangeMemberNotify.members_chang)
}
inline void GroupChangeMemberNotify::add_members_chang(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.members_chang_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PTP.Group.GroupChangeMemberNotify.members_chang)
}
inline void GroupChangeMemberNotify::add_members_chang(const char* value, size_t size) {
  _impl_.members_chang_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PTP.Group.GroupChangeMemberNotify.members_chang)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GroupChangeMemberNotify::members_chang() const {
  // @@protoc_insertion_point(field_list:PTP.Group.GroupChangeMemberNotify.members_chang)
  return _impl_.members_chang_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GroupChangeMemberNotify::mutable_members_chang() {
  // @@protoc_insertion_point(field_mutable_list:PTP.Group.GroupChangeMemberNotify.members_chang)
  return &_impl_.members_chang_;
}

// -------------------------------------------------------------------

// GroupGetListReq

// required uint32 group_info_updated_time = 1;
inline bool GroupGetListReq::_internal_has_group_info_updated_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupGetListReq::has_group_info_updated_time() const {
  return _internal_has_group_info_updated_time();
}
inline void GroupGetListReq::clear_group_info_updated_time() {
  _impl_.group_info_updated_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t GroupGetListReq::_internal_group_info_updated_time() const {
  return _impl_.group_info_updated_time_;
}
inline uint32_t GroupGetListReq::group_info_updated_time() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupGetListReq.group_info_updated_time)
  return _internal_group_info_updated_time();
}
inline void GroupGetListReq::_internal_set_group_info_updated_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.group_info_updated_time_ = value;
}
inline void GroupGetListReq::set_group_info_updated_time(uint32_t value) {
  _internal_set_group_info_updated_time(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupGetListReq.group_info_updated_time)
}

// optional bytes attach_data = 20;
inline bool GroupGetListReq::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupGetListReq::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void GroupGetListReq::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupGetListReq::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupGetListReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupGetListReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Group.GroupGetListReq.attach_data)
}
inline std::string* GroupGetListReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupGetListReq.attach_data)
  return _s;
}
inline const std::string& GroupGetListReq::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void GroupGetListReq::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupGetListReq::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupGetListReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Group.GroupGetListReq.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupGetListReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Group.GroupGetListReq.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool GroupGetListReq::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GroupGetListReq::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void GroupGetListReq::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t GroupGetListReq::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t GroupGetListReq::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupGetListReq.auth_uid)
  return _internal_auth_uid();
}
inline void GroupGetListReq::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.auth_uid_ = value;
}
inline void GroupGetListReq::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupGetListReq.auth_uid)
}

// -------------------------------------------------------------------

// GroupGetListRes

// required uint32 group_info_updated_time = 1;
inline bool GroupGetListRes::_internal_has_group_info_updated_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupGetListRes::has_group_info_updated_time() const {
  return _internal_has_group_info_updated_time();
}
inline void GroupGetListRes::clear_group_info_updated_time() {
  _impl_.group_info_updated_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t GroupGetListRes::_internal_group_info_updated_time() const {
  return _impl_.group_info_updated_time_;
}
inline uint32_t GroupGetListRes::group_info_updated_time() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupGetListRes.group_info_updated_time)
  return _internal_group_info_updated_time();
}
inline void GroupGetListRes::_internal_set_group_info_updated_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.group_info_updated_time_ = value;
}
inline void GroupGetListRes::set_group_info_updated_time(uint32_t value) {
  _internal_set_group_info_updated_time(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupGetListRes.group_info_updated_time)
}

// repeated .PTP.Common.GroupInfo groups = 2;
inline int GroupGetListRes::_internal_groups_size() const {
  return _impl_.groups_.size();
}
inline int GroupGetListRes::groups_size() const {
  return _internal_groups_size();
}
inline ::PTP::Common::GroupInfo* GroupGetListRes::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupGetListRes.groups)
  return _impl_.groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::GroupInfo >*
GroupGetListRes::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:PTP.Group.GroupGetListRes.groups)
  return &_impl_.groups_;
}
inline const ::PTP::Common::GroupInfo& GroupGetListRes::_internal_groups(int index) const {
  return _impl_.groups_.Get(index);
}
inline const ::PTP::Common::GroupInfo& GroupGetListRes::groups(int index) const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupGetListRes.groups)
  return _internal_groups(index);
}
inline ::PTP::Common::GroupInfo* GroupGetListRes::_internal_add_groups() {
  return _impl_.groups_.Add();
}
inline ::PTP::Common::GroupInfo* GroupGetListRes::add_groups() {
  ::PTP::Common::GroupInfo* _add = _internal_add_groups();
  // @@protoc_insertion_point(field_add:PTP.Group.GroupGetListRes.groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::GroupInfo >&
GroupGetListRes::groups() const {
  // @@protoc_insertion_point(field_list:PTP.Group.GroupGetListRes.groups)
  return _impl_.groups_;
}

// required .PTP.Common.ERR error = 3;
inline bool GroupGetListRes::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GroupGetListRes::has_error() const {
  return _internal_has_error();
}
inline void GroupGetListRes::clear_error() {
  _impl_.error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::PTP::Common::ERR GroupGetListRes::_internal_error() const {
  return static_cast< ::PTP::Common::ERR >(_impl_.error_);
}
inline ::PTP::Common::ERR GroupGetListRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupGetListRes.error)
  return _internal_error();
}
inline void GroupGetListRes::_internal_set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.error_ = value;
}
inline void GroupGetListRes::set_error(::PTP::Common::ERR value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupGetListRes.error)
}

// optional bytes attach_data = 20;
inline bool GroupGetListRes::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupGetListRes::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void GroupGetListRes::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupGetListRes::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupGetListRes.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupGetListRes::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Group.GroupGetListRes.attach_data)
}
inline std::string* GroupGetListRes::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupGetListRes.attach_data)
  return _s;
}
inline const std::string& GroupGetListRes::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void GroupGetListRes::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupGetListRes::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupGetListRes::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Group.GroupGetListRes.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupGetListRes::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Group.GroupGetListRes.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool GroupGetListRes::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GroupGetListRes::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void GroupGetListRes::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t GroupGetListRes::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t GroupGetListRes::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupGetListRes.auth_uid)
  return _internal_auth_uid();
}
inline void GroupGetListRes::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.auth_uid_ = value;
}
inline void GroupGetListRes::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupGetListRes.auth_uid)
}

// -------------------------------------------------------------------

// GroupGetMembersListReq

// required uint32 group_members_updated_time = 1;
inline bool GroupGetMembersListReq::_internal_has_group_members_updated_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupGetMembersListReq::has_group_members_updated_time() const {
  return _internal_has_group_members_updated_time();
}
inline void GroupGetMembersListReq::clear_group_members_updated_time() {
  _impl_.group_members_updated_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t GroupGetMembersListReq::_internal_group_members_updated_time() const {
  return _impl_.group_members_updated_time_;
}
inline uint32_t GroupGetMembersListReq::group_members_updated_time() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupGetMembersListReq.group_members_updated_time)
  return _internal_group_members_updated_time();
}
inline void GroupGetMembersListReq::_internal_set_group_members_updated_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.group_members_updated_time_ = value;
}
inline void GroupGetMembersListReq::set_group_members_updated_time(uint32_t value) {
  _internal_set_group_members_updated_time(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupGetMembersListReq.group_members_updated_time)
}

// required uint32 group_id = 2;
inline bool GroupGetMembersListReq::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GroupGetMembersListReq::has_group_id() const {
  return _internal_has_group_id();
}
inline void GroupGetMembersListReq::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t GroupGetMembersListReq::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t GroupGetMembersListReq::group_id() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupGetMembersListReq.group_id)
  return _internal_group_id();
}
inline void GroupGetMembersListReq::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.group_id_ = value;
}
inline void GroupGetMembersListReq::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupGetMembersListReq.group_id)
}

// optional bytes attach_data = 20;
inline bool GroupGetMembersListReq::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupGetMembersListReq::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void GroupGetMembersListReq::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupGetMembersListReq::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupGetMembersListReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupGetMembersListReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Group.GroupGetMembersListReq.attach_data)
}
inline std::string* GroupGetMembersListReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupGetMembersListReq.attach_data)
  return _s;
}
inline const std::string& GroupGetMembersListReq::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void GroupGetMembersListReq::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupGetMembersListReq::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupGetMembersListReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Group.GroupGetMembersListReq.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupGetMembersListReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Group.GroupGetMembersListReq.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool GroupGetMembersListReq::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GroupGetMembersListReq::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void GroupGetMembersListReq::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t GroupGetMembersListReq::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t GroupGetMembersListReq::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupGetMembersListReq.auth_uid)
  return _internal_auth_uid();
}
inline void GroupGetMembersListReq::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.auth_uid_ = value;
}
inline void GroupGetMembersListReq::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupGetMembersListReq.auth_uid)
}

// -------------------------------------------------------------------

// GroupGetMembersListRes

// required uint32 group_members_updated_time = 1;
inline bool GroupGetMembersListRes::_internal_has_group_members_updated_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupGetMembersListRes::has_group_members_updated_time() const {
  return _internal_has_group_members_updated_time();
}
inline void GroupGetMembersListRes::clear_group_members_updated_time() {
  _impl_.group_members_updated_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t GroupGetMembersListRes::_internal_group_members_updated_time() const {
  return _impl_.group_members_updated_time_;
}
inline uint32_t GroupGetMembersListRes::group_members_updated_time() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupGetMembersListRes.group_members_updated_time)
  return _internal_group_members_updated_time();
}
inline void GroupGetMembersListRes::_internal_set_group_members_updated_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.group_members_updated_time_ = value;
}
inline void GroupGetMembersListRes::set_group_members_updated_time(uint32_t value) {
  _internal_set_group_members_updated_time(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupGetMembersListRes.group_members_updated_time)
}

// required uint32 group_id = 2;
inline bool GroupGetMembersListRes::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GroupGetMembersListRes::has_group_id() const {
  return _internal_has_group_id();
}
inline void GroupGetMembersListRes::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t GroupGetMembersListRes::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t GroupGetMembersListRes::group_id() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupGetMembersListRes.group_id)
  return _internal_group_id();
}
inline void GroupGetMembersListRes::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.group_id_ = value;
}
inline void GroupGetMembersListRes::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupGetMembersListRes.group_id)
}

// repeated .PTP.Common.UserInfo members = 3;
inline int GroupGetMembersListRes::_internal_members_size() const {
  return _impl_.members_.size();
}
inline int GroupGetMembersListRes::members_size() const {
  return _internal_members_size();
}
inline ::PTP::Common::UserInfo* GroupGetMembersListRes::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupGetMembersListRes.members)
  return _impl_.members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::UserInfo >*
GroupGetMembersListRes::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:PTP.Group.GroupGetMembersListRes.members)
  return &_impl_.members_;
}
inline const ::PTP::Common::UserInfo& GroupGetMembersListRes::_internal_members(int index) const {
  return _impl_.members_.Get(index);
}
inline const ::PTP::Common::UserInfo& GroupGetMembersListRes::members(int index) const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupGetMembersListRes.members)
  return _internal_members(index);
}
inline ::PTP::Common::UserInfo* GroupGetMembersListRes::_internal_add_members() {
  return _impl_.members_.Add();
}
inline ::PTP::Common::UserInfo* GroupGetMembersListRes::add_members() {
  ::PTP::Common::UserInfo* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:PTP.Group.GroupGetMembersListRes.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::UserInfo >&
GroupGetMembersListRes::members() const {
  // @@protoc_insertion_point(field_list:PTP.Group.GroupGetMembersListRes.members)
  return _impl_.members_;
}

// repeated .PTP.Common.GroupMember group_members = 4;
inline int GroupGetMembersListRes::_internal_group_members_size() const {
  return _impl_.group_members_.size();
}
inline int GroupGetMembersListRes::group_members_size() const {
  return _internal_group_members_size();
}
inline ::PTP::Common::GroupMember* GroupGetMembersListRes::mutable_group_members(int index) {
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupGetMembersListRes.group_members)
  return _impl_.group_members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::GroupMember >*
GroupGetMembersListRes::mutable_group_members() {
  // @@protoc_insertion_point(field_mutable_list:PTP.Group.GroupGetMembersListRes.group_members)
  return &_impl_.group_members_;
}
inline const ::PTP::Common::GroupMember& GroupGetMembersListRes::_internal_group_members(int index) const {
  return _impl_.group_members_.Get(index);
}
inline const ::PTP::Common::GroupMember& GroupGetMembersListRes::group_members(int index) const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupGetMembersListRes.group_members)
  return _internal_group_members(index);
}
inline ::PTP::Common::GroupMember* GroupGetMembersListRes::_internal_add_group_members() {
  return _impl_.group_members_.Add();
}
inline ::PTP::Common::GroupMember* GroupGetMembersListRes::add_group_members() {
  ::PTP::Common::GroupMember* _add = _internal_add_group_members();
  // @@protoc_insertion_point(field_add:PTP.Group.GroupGetMembersListRes.group_members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::GroupMember >&
GroupGetMembersListRes::group_members() const {
  // @@protoc_insertion_point(field_list:PTP.Group.GroupGetMembersListRes.group_members)
  return _impl_.group_members_;
}

// required .PTP.Common.ERR error = 5;
inline bool GroupGetMembersListRes::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GroupGetMembersListRes::has_error() const {
  return _internal_has_error();
}
inline void GroupGetMembersListRes::clear_error() {
  _impl_.error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::PTP::Common::ERR GroupGetMembersListRes::_internal_error() const {
  return static_cast< ::PTP::Common::ERR >(_impl_.error_);
}
inline ::PTP::Common::ERR GroupGetMembersListRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupGetMembersListRes.error)
  return _internal_error();
}
inline void GroupGetMembersListRes::_internal_set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.error_ = value;
}
inline void GroupGetMembersListRes::set_error(::PTP::Common::ERR value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupGetMembersListRes.error)
}

// optional bytes attach_data = 20;
inline bool GroupGetMembersListRes::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupGetMembersListRes::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void GroupGetMembersListRes::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupGetMembersListRes::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupGetMembersListRes.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupGetMembersListRes::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Group.GroupGetMembersListRes.attach_data)
}
inline std::string* GroupGetMembersListRes::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupGetMembersListRes.attach_data)
  return _s;
}
inline const std::string& GroupGetMembersListRes::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void GroupGetMembersListRes::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupGetMembersListRes::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupGetMembersListRes::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Group.GroupGetMembersListRes.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupGetMembersListRes::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Group.GroupGetMembersListRes.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool GroupGetMembersListRes::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GroupGetMembersListRes::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void GroupGetMembersListRes::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t GroupGetMembersListRes::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t GroupGetMembersListRes::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupGetMembersListRes.auth_uid)
  return _internal_auth_uid();
}
inline void GroupGetMembersListRes::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.auth_uid_ = value;
}
inline void GroupGetMembersListRes::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupGetMembersListRes.auth_uid)
}

// -------------------------------------------------------------------

// GroupUnreadMsgReq

// optional bytes attach_data = 20;
inline bool GroupUnreadMsgReq::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupUnreadMsgReq::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void GroupUnreadMsgReq::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupUnreadMsgReq::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupUnreadMsgReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupUnreadMsgReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Group.GroupUnreadMsgReq.attach_data)
}
inline std::string* GroupUnreadMsgReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupUnreadMsgReq.attach_data)
  return _s;
}
inline const std::string& GroupUnreadMsgReq::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void GroupUnreadMsgReq::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupUnreadMsgReq::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupUnreadMsgReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Group.GroupUnreadMsgReq.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupUnreadMsgReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Group.GroupUnreadMsgReq.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool GroupUnreadMsgReq::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupUnreadMsgReq::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void GroupUnreadMsgReq::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t GroupUnreadMsgReq::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t GroupUnreadMsgReq::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupUnreadMsgReq.auth_uid)
  return _internal_auth_uid();
}
inline void GroupUnreadMsgReq::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.auth_uid_ = value;
}
inline void GroupUnreadMsgReq::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupUnreadMsgReq.auth_uid)
}

// -------------------------------------------------------------------

// GroupUnreadMsgRes

// repeated .PTP.Common.MsgInfo unread_list = 1;
inline int GroupUnreadMsgRes::_internal_unread_list_size() const {
  return _impl_.unread_list_.size();
}
inline int GroupUnreadMsgRes::unread_list_size() const {
  return _internal_unread_list_size();
}
inline ::PTP::Common::MsgInfo* GroupUnreadMsgRes::mutable_unread_list(int index) {
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupUnreadMsgRes.unread_list)
  return _impl_.unread_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::MsgInfo >*
GroupUnreadMsgRes::mutable_unread_list() {
  // @@protoc_insertion_point(field_mutable_list:PTP.Group.GroupUnreadMsgRes.unread_list)
  return &_impl_.unread_list_;
}
inline const ::PTP::Common::MsgInfo& GroupUnreadMsgRes::_internal_unread_list(int index) const {
  return _impl_.unread_list_.Get(index);
}
inline const ::PTP::Common::MsgInfo& GroupUnreadMsgRes::unread_list(int index) const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupUnreadMsgRes.unread_list)
  return _internal_unread_list(index);
}
inline ::PTP::Common::MsgInfo* GroupUnreadMsgRes::_internal_add_unread_list() {
  return _impl_.unread_list_.Add();
}
inline ::PTP::Common::MsgInfo* GroupUnreadMsgRes::add_unread_list() {
  ::PTP::Common::MsgInfo* _add = _internal_add_unread_list();
  // @@protoc_insertion_point(field_add:PTP.Group.GroupUnreadMsgRes.unread_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::MsgInfo >&
GroupUnreadMsgRes::unread_list() const {
  // @@protoc_insertion_point(field_list:PTP.Group.GroupUnreadMsgRes.unread_list)
  return _impl_.unread_list_;
}

// required uint32 unread_cnt = 3;
inline bool GroupUnreadMsgRes::_internal_has_unread_cnt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupUnreadMsgRes::has_unread_cnt() const {
  return _internal_has_unread_cnt();
}
inline void GroupUnreadMsgRes::clear_unread_cnt() {
  _impl_.unread_cnt_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t GroupUnreadMsgRes::_internal_unread_cnt() const {
  return _impl_.unread_cnt_;
}
inline uint32_t GroupUnreadMsgRes::unread_cnt() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupUnreadMsgRes.unread_cnt)
  return _internal_unread_cnt();
}
inline void GroupUnreadMsgRes::_internal_set_unread_cnt(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.unread_cnt_ = value;
}
inline void GroupUnreadMsgRes::set_unread_cnt(uint32_t value) {
  _internal_set_unread_cnt(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupUnreadMsgRes.unread_cnt)
}

// required .PTP.Common.ERR error = 4;
inline bool GroupUnreadMsgRes::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GroupUnreadMsgRes::has_error() const {
  return _internal_has_error();
}
inline void GroupUnreadMsgRes::clear_error() {
  _impl_.error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::PTP::Common::ERR GroupUnreadMsgRes::_internal_error() const {
  return static_cast< ::PTP::Common::ERR >(_impl_.error_);
}
inline ::PTP::Common::ERR GroupUnreadMsgRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupUnreadMsgRes.error)
  return _internal_error();
}
inline void GroupUnreadMsgRes::_internal_set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.error_ = value;
}
inline void GroupUnreadMsgRes::set_error(::PTP::Common::ERR value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupUnreadMsgRes.error)
}

// optional bytes attach_data = 20;
inline bool GroupUnreadMsgRes::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupUnreadMsgRes::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void GroupUnreadMsgRes::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupUnreadMsgRes::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupUnreadMsgRes.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupUnreadMsgRes::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Group.GroupUnreadMsgRes.attach_data)
}
inline std::string* GroupUnreadMsgRes::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupUnreadMsgRes.attach_data)
  return _s;
}
inline const std::string& GroupUnreadMsgRes::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void GroupUnreadMsgRes::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupUnreadMsgRes::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupUnreadMsgRes::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Group.GroupUnreadMsgRes.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupUnreadMsgRes::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Group.GroupUnreadMsgRes.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool GroupUnreadMsgRes::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GroupUnreadMsgRes::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void GroupUnreadMsgRes::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t GroupUnreadMsgRes::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t GroupUnreadMsgRes::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupUnreadMsgRes.auth_uid)
  return _internal_auth_uid();
}
inline void GroupUnreadMsgRes::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.auth_uid_ = value;
}
inline void GroupUnreadMsgRes::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupUnreadMsgRes.auth_uid)
}

// -------------------------------------------------------------------

// GroupRemoveSessionReq

// required uint32 group_id = 2;
inline bool GroupRemoveSessionReq::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupRemoveSessionReq::has_group_id() const {
  return _internal_has_group_id();
}
inline void GroupRemoveSessionReq::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t GroupRemoveSessionReq::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t GroupRemoveSessionReq::group_id() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupRemoveSessionReq.group_id)
  return _internal_group_id();
}
inline void GroupRemoveSessionReq::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.group_id_ = value;
}
inline void GroupRemoveSessionReq::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupRemoveSessionReq.group_id)
}

// optional bytes attach_data = 20;
inline bool GroupRemoveSessionReq::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupRemoveSessionReq::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void GroupRemoveSessionReq::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupRemoveSessionReq::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupRemoveSessionReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupRemoveSessionReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Group.GroupRemoveSessionReq.attach_data)
}
inline std::string* GroupRemoveSessionReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupRemoveSessionReq.attach_data)
  return _s;
}
inline const std::string& GroupRemoveSessionReq::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void GroupRemoveSessionReq::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupRemoveSessionReq::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupRemoveSessionReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Group.GroupRemoveSessionReq.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupRemoveSessionReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Group.GroupRemoveSessionReq.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool GroupRemoveSessionReq::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GroupRemoveSessionReq::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void GroupRemoveSessionReq::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t GroupRemoveSessionReq::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t GroupRemoveSessionReq::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupRemoveSessionReq.auth_uid)
  return _internal_auth_uid();
}
inline void GroupRemoveSessionReq::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.auth_uid_ = value;
}
inline void GroupRemoveSessionReq::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupRemoveSessionReq.auth_uid)
}

// -------------------------------------------------------------------

// GroupRemoveSessionRes

// required .PTP.Common.ERR error = 1;
inline bool GroupRemoveSessionRes::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupRemoveSessionRes::has_error() const {
  return _internal_has_error();
}
inline void GroupRemoveSessionRes::clear_error() {
  _impl_.error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::PTP::Common::ERR GroupRemoveSessionRes::_internal_error() const {
  return static_cast< ::PTP::Common::ERR >(_impl_.error_);
}
inline ::PTP::Common::ERR GroupRemoveSessionRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupRemoveSessionRes.error)
  return _internal_error();
}
inline void GroupRemoveSessionRes::_internal_set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_ = value;
}
inline void GroupRemoveSessionRes::set_error(::PTP::Common::ERR value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupRemoveSessionRes.error)
}

// required uint32 group_id = 2;
inline bool GroupRemoveSessionRes::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GroupRemoveSessionRes::has_group_id() const {
  return _internal_has_group_id();
}
inline void GroupRemoveSessionRes::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t GroupRemoveSessionRes::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t GroupRemoveSessionRes::group_id() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupRemoveSessionRes.group_id)
  return _internal_group_id();
}
inline void GroupRemoveSessionRes::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.group_id_ = value;
}
inline void GroupRemoveSessionRes::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupRemoveSessionRes.group_id)
}

// optional bytes attach_data = 20;
inline bool GroupRemoveSessionRes::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupRemoveSessionRes::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void GroupRemoveSessionRes::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupRemoveSessionRes::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupRemoveSessionRes.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupRemoveSessionRes::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Group.GroupRemoveSessionRes.attach_data)
}
inline std::string* GroupRemoveSessionRes::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Group.GroupRemoveSessionRes.attach_data)
  return _s;
}
inline const std::string& GroupRemoveSessionRes::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void GroupRemoveSessionRes::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupRemoveSessionRes::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupRemoveSessionRes::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Group.GroupRemoveSessionRes.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupRemoveSessionRes::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Group.GroupRemoveSessionRes.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool GroupRemoveSessionRes::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GroupRemoveSessionRes::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void GroupRemoveSessionRes::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t GroupRemoveSessionRes::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t GroupRemoveSessionRes::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupRemoveSessionRes.auth_uid)
  return _internal_auth_uid();
}
inline void GroupRemoveSessionRes::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.auth_uid_ = value;
}
inline void GroupRemoveSessionRes::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupRemoveSessionRes.auth_uid)
}

// -------------------------------------------------------------------

// GroupRemoveSessionNotify

// required uint32 group_id = 1;
inline bool GroupRemoveSessionNotify::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupRemoveSessionNotify::has_group_id() const {
  return _internal_has_group_id();
}
inline void GroupRemoveSessionNotify::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t GroupRemoveSessionNotify::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t GroupRemoveSessionNotify::group_id() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupRemoveSessionNotify.group_id)
  return _internal_group_id();
}
inline void GroupRemoveSessionNotify::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.group_id_ = value;
}
inline void GroupRemoveSessionNotify::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupRemoveSessionNotify.group_id)
}

// required uint32 from_uid = 3;
inline bool GroupRemoveSessionNotify::_internal_has_from_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupRemoveSessionNotify::has_from_uid() const {
  return _internal_has_from_uid();
}
inline void GroupRemoveSessionNotify::clear_from_uid() {
  _impl_.from_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t GroupRemoveSessionNotify::_internal_from_uid() const {
  return _impl_.from_uid_;
}
inline uint32_t GroupRemoveSessionNotify::from_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Group.GroupRemoveSessionNotify.from_uid)
  return _internal_from_uid();
}
inline void GroupRemoveSessionNotify::_internal_set_from_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.from_uid_ = value;
}
inline void GroupRemoveSessionNotify::set_from_uid(uint32_t value) {
  _internal_set_from_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Group.GroupRemoveSessionNotify.from_uid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Group
}  // namespace PTP

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PTP_2eGroup_2eproto
