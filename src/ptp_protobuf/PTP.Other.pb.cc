// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PTP.Other.proto

#include "PTP.Other.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace PTP {
namespace Other {
class HeartBeatNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeartBeatNotify>
      _instance;
} _HeartBeatNotify_default_instance_;
class CaptchaReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CaptchaReq>
      _instance;
} _CaptchaReq_default_instance_;
class CaptchaResDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CaptchaRes>
      _instance;
} _CaptchaRes_default_instance_;
}  // namespace Other
}  // namespace PTP
namespace protobuf_PTP_2eOther_2eproto {
static void InitDefaultsHeartBeatNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PTP::Other::_HeartBeatNotify_default_instance_;
    new (ptr) ::PTP::Other::HeartBeatNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PTP::Other::HeartBeatNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HeartBeatNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeartBeatNotify}, {}};

static void InitDefaultsCaptchaReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PTP::Other::_CaptchaReq_default_instance_;
    new (ptr) ::PTP::Other::CaptchaReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PTP::Other::CaptchaReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CaptchaReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCaptchaReq}, {}};

static void InitDefaultsCaptchaRes() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PTP::Other::_CaptchaRes_default_instance_;
    new (ptr) ::PTP::Other::CaptchaRes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PTP::Other::CaptchaRes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CaptchaRes =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCaptchaRes}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_HeartBeatNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CaptchaReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CaptchaRes.base);
}

}  // namespace protobuf_PTP_2eOther_2eproto
namespace PTP {
namespace Other {

// ===================================================================

void HeartBeatNotify::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartBeatNotify::HeartBeatNotify()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PTP_2eOther_2eproto::scc_info_HeartBeatNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PTP.Other.HeartBeatNotify)
}
HeartBeatNotify::HeartBeatNotify(const HeartBeatNotify& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PTP.Other.HeartBeatNotify)
}

void HeartBeatNotify::SharedCtor() {
}

HeartBeatNotify::~HeartBeatNotify() {
  // @@protoc_insertion_point(destructor:PTP.Other.HeartBeatNotify)
  SharedDtor();
}

void HeartBeatNotify::SharedDtor() {
}

void HeartBeatNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeartBeatNotify& HeartBeatNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PTP_2eOther_2eproto::scc_info_HeartBeatNotify.base);
  return *internal_default_instance();
}


void HeartBeatNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.Other.HeartBeatNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HeartBeatNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PTP.Other.HeartBeatNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:PTP.Other.HeartBeatNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PTP.Other.HeartBeatNotify)
  return false;
#undef DO_
}

void HeartBeatNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PTP.Other.HeartBeatNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PTP.Other.HeartBeatNotify)
}

size_t HeartBeatNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.Other.HeartBeatNotify)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartBeatNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HeartBeatNotify*>(&from));
}

void HeartBeatNotify::MergeFrom(const HeartBeatNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PTP.Other.HeartBeatNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HeartBeatNotify::CopyFrom(const HeartBeatNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.Other.HeartBeatNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatNotify::IsInitialized() const {
  return true;
}

void HeartBeatNotify::Swap(HeartBeatNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartBeatNotify::InternalSwap(HeartBeatNotify* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string HeartBeatNotify::GetTypeName() const {
  return "PTP.Other.HeartBeatNotify";
}


// ===================================================================

void CaptchaReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CaptchaReq::CaptchaReq()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PTP_2eOther_2eproto::scc_info_CaptchaReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PTP.Other.CaptchaReq)
}
CaptchaReq::CaptchaReq(const CaptchaReq& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PTP.Other.CaptchaReq)
}

void CaptchaReq::SharedCtor() {
}

CaptchaReq::~CaptchaReq() {
  // @@protoc_insertion_point(destructor:PTP.Other.CaptchaReq)
  SharedDtor();
}

void CaptchaReq::SharedDtor() {
}

void CaptchaReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CaptchaReq& CaptchaReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PTP_2eOther_2eproto::scc_info_CaptchaReq.base);
  return *internal_default_instance();
}


void CaptchaReq::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.Other.CaptchaReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CaptchaReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PTP.Other.CaptchaReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:PTP.Other.CaptchaReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PTP.Other.CaptchaReq)
  return false;
#undef DO_
}

void CaptchaReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PTP.Other.CaptchaReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PTP.Other.CaptchaReq)
}

size_t CaptchaReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.Other.CaptchaReq)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CaptchaReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CaptchaReq*>(&from));
}

void CaptchaReq::MergeFrom(const CaptchaReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PTP.Other.CaptchaReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CaptchaReq::CopyFrom(const CaptchaReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.Other.CaptchaReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptchaReq::IsInitialized() const {
  return true;
}

void CaptchaReq::Swap(CaptchaReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CaptchaReq::InternalSwap(CaptchaReq* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string CaptchaReq::GetTypeName() const {
  return "PTP.Other.CaptchaReq";
}


// ===================================================================

void CaptchaRes::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CaptchaRes::kCaptchaFieldNumber;
const int CaptchaRes::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CaptchaRes::CaptchaRes()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PTP_2eOther_2eproto::scc_info_CaptchaRes.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PTP.Other.CaptchaRes)
}
CaptchaRes::CaptchaRes(const CaptchaRes& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  captcha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_captcha()) {
    captcha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.captcha_);
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:PTP.Other.CaptchaRes)
}

void CaptchaRes::SharedCtor() {
  captcha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = 0;
}

CaptchaRes::~CaptchaRes() {
  // @@protoc_insertion_point(destructor:PTP.Other.CaptchaRes)
  SharedDtor();
}

void CaptchaRes::SharedDtor() {
  captcha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CaptchaRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CaptchaRes& CaptchaRes::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PTP_2eOther_2eproto::scc_info_CaptchaRes.base);
  return *internal_default_instance();
}


void CaptchaRes::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.Other.CaptchaRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    captcha_.ClearNonDefaultToEmptyNoArena();
  }
  error_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CaptchaRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PTP.Other.CaptchaRes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string captcha = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_captcha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .PTP.Common.ERR error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PTP::Common::ERR_IsValid(value)) {
            set_error(static_cast< ::PTP::Common::ERR >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PTP.Other.CaptchaRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PTP.Other.CaptchaRes)
  return false;
#undef DO_
}

void CaptchaRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PTP.Other.CaptchaRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string captcha = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->captcha(), output);
  }

  // required .PTP.Common.ERR error = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PTP.Other.CaptchaRes)
}

size_t CaptchaRes::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PTP.Other.CaptchaRes)
  size_t total_size = 0;

  if (has_captcha()) {
    // required string captcha = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->captcha());
  }

  if (has_error()) {
    // required .PTP.Common.ERR error = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
  }

  return total_size;
}
size_t CaptchaRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.Other.CaptchaRes)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string captcha = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->captcha());

    // required .PTP.Common.ERR error = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CaptchaRes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CaptchaRes*>(&from));
}

void CaptchaRes::MergeFrom(const CaptchaRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PTP.Other.CaptchaRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_captcha();
      captcha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.captcha_);
    }
    if (cached_has_bits & 0x00000002u) {
      error_ = from.error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CaptchaRes::CopyFrom(const CaptchaRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.Other.CaptchaRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptchaRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CaptchaRes::Swap(CaptchaRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CaptchaRes::InternalSwap(CaptchaRes* other) {
  using std::swap;
  captcha_.Swap(&other->captcha_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_, other->error_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string CaptchaRes::GetTypeName() const {
  return "PTP.Other.CaptchaRes";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Other
}  // namespace PTP
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PTP::Other::HeartBeatNotify* Arena::CreateMaybeMessage< ::PTP::Other::HeartBeatNotify >(Arena* arena) {
  return Arena::CreateInternal< ::PTP::Other::HeartBeatNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PTP::Other::CaptchaReq* Arena::CreateMaybeMessage< ::PTP::Other::CaptchaReq >(Arena* arena) {
  return Arena::CreateInternal< ::PTP::Other::CaptchaReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PTP::Other::CaptchaRes* Arena::CreateMaybeMessage< ::PTP::Other::CaptchaRes >(Arena* arena) {
  return Arena::CreateInternal< ::PTP::Other::CaptchaRes >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
