// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PB.Group.proto

#include "PB.Group.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace PB {
class GroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Group>
      _instance;
} _Group_default_instance_;
}  // namespace PB
namespace protobuf_PB_2eGroup_2eproto {
static void InitDefaultsGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PB::_Group_default_instance_;
    new (ptr) ::PB::Group();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PB::Group::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Group =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGroup}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Group.base);
}

}  // namespace protobuf_PB_2eGroup_2eproto
namespace PB {

// ===================================================================

void Group::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Group::kIsOnlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Group::Group()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PB_2eGroup_2eproto::scc_info_Group.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PB.Group)
}
Group::Group(const Group& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_online_ = from.is_online_;
  // @@protoc_insertion_point(copy_constructor:PB.Group)
}

void Group::SharedCtor() {
  is_online_ = false;
}

Group::~Group() {
  // @@protoc_insertion_point(destructor:PB.Group)
  SharedDtor();
}

void Group::SharedDtor() {
}

void Group::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Group& Group::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PB_2eGroup_2eproto::scc_info_Group.base);
  return *internal_default_instance();
}


void Group::Clear() {
// @@protoc_insertion_point(message_clear_start:PB.Group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_online_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PB.Group)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_online = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_is_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PB.Group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PB.Group)
  return false;
#undef DO_
}

void Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PB.Group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool is_online = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_online(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PB.Group)
}

size_t Group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PB.Group)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required bool is_online = 12;
  if (has_is_online()) {
    total_size += 1 + 1;
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Group::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Group*>(&from));
}

void Group::MergeFrom(const Group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PB.Group)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_is_online()) {
    set_is_online(from.is_online());
  }
}

void Group::CopyFrom(const Group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PB.Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Group::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Group::Swap(Group* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Group::InternalSwap(Group* other) {
  using std::swap;
  swap(is_online_, other->is_online_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Group::GetTypeName() const {
  return "PB.Group";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace PB
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PB::Group* Arena::CreateMaybeMessage< ::PB::Group >(Arena* arena) {
  return Arena::CreateInternal< ::PB::Group >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
