// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PTP.Buddy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PTP_2eBuddy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PTP_2eBuddy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "PTP.Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PTP_2eBuddy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PTP_2eBuddy_2eproto {
  static const uint32_t offsets[];
};
namespace PTP {
namespace Buddy {
class BuddyGetALLReq;
struct BuddyGetALLReqDefaultTypeInternal;
extern BuddyGetALLReqDefaultTypeInternal _BuddyGetALLReq_default_instance_;
class BuddyGetALLRes;
struct BuddyGetALLResDefaultTypeInternal;
extern BuddyGetALLResDefaultTypeInternal _BuddyGetALLRes_default_instance_;
class BuddyGetListReq;
struct BuddyGetListReqDefaultTypeInternal;
extern BuddyGetListReqDefaultTypeInternal _BuddyGetListReq_default_instance_;
class BuddyGetListRes;
struct BuddyGetListResDefaultTypeInternal;
extern BuddyGetListResDefaultTypeInternal _BuddyGetListRes_default_instance_;
class BuddyGetStatReq;
struct BuddyGetStatReqDefaultTypeInternal;
extern BuddyGetStatReqDefaultTypeInternal _BuddyGetStatReq_default_instance_;
class BuddyGetStatRes;
struct BuddyGetStatResDefaultTypeInternal;
extern BuddyGetStatResDefaultTypeInternal _BuddyGetStatRes_default_instance_;
class BuddyImportContactsReq;
struct BuddyImportContactsReqDefaultTypeInternal;
extern BuddyImportContactsReqDefaultTypeInternal _BuddyImportContactsReq_default_instance_;
class BuddyImportContactsRes;
struct BuddyImportContactsResDefaultTypeInternal;
extern BuddyImportContactsResDefaultTypeInternal _BuddyImportContactsRes_default_instance_;
class BuddyModifyNotify;
struct BuddyModifyNotifyDefaultTypeInternal;
extern BuddyModifyNotifyDefaultTypeInternal _BuddyModifyNotify_default_instance_;
class BuddyModifyReq;
struct BuddyModifyReqDefaultTypeInternal;
extern BuddyModifyReqDefaultTypeInternal _BuddyModifyReq_default_instance_;
class BuddyModifyRes;
struct BuddyModifyResDefaultTypeInternal;
extern BuddyModifyResDefaultTypeInternal _BuddyModifyRes_default_instance_;
class BuddyModifyUpdatePair;
struct BuddyModifyUpdatePairDefaultTypeInternal;
extern BuddyModifyUpdatePairDefaultTypeInternal _BuddyModifyUpdatePair_default_instance_;
class BuddyQueryListReq;
struct BuddyQueryListReqDefaultTypeInternal;
extern BuddyQueryListReqDefaultTypeInternal _BuddyQueryListReq_default_instance_;
class BuddyQueryListRes;
struct BuddyQueryListResDefaultTypeInternal;
extern BuddyQueryListResDefaultTypeInternal _BuddyQueryListRes_default_instance_;
class BuddyStatNotify;
struct BuddyStatNotifyDefaultTypeInternal;
extern BuddyStatNotifyDefaultTypeInternal _BuddyStatNotify_default_instance_;
}  // namespace Buddy
}  // namespace PTP
PROTOBUF_NAMESPACE_OPEN
template<> ::PTP::Buddy::BuddyGetALLReq* Arena::CreateMaybeMessage<::PTP::Buddy::BuddyGetALLReq>(Arena*);
template<> ::PTP::Buddy::BuddyGetALLRes* Arena::CreateMaybeMessage<::PTP::Buddy::BuddyGetALLRes>(Arena*);
template<> ::PTP::Buddy::BuddyGetListReq* Arena::CreateMaybeMessage<::PTP::Buddy::BuddyGetListReq>(Arena*);
template<> ::PTP::Buddy::BuddyGetListRes* Arena::CreateMaybeMessage<::PTP::Buddy::BuddyGetListRes>(Arena*);
template<> ::PTP::Buddy::BuddyGetStatReq* Arena::CreateMaybeMessage<::PTP::Buddy::BuddyGetStatReq>(Arena*);
template<> ::PTP::Buddy::BuddyGetStatRes* Arena::CreateMaybeMessage<::PTP::Buddy::BuddyGetStatRes>(Arena*);
template<> ::PTP::Buddy::BuddyImportContactsReq* Arena::CreateMaybeMessage<::PTP::Buddy::BuddyImportContactsReq>(Arena*);
template<> ::PTP::Buddy::BuddyImportContactsRes* Arena::CreateMaybeMessage<::PTP::Buddy::BuddyImportContactsRes>(Arena*);
template<> ::PTP::Buddy::BuddyModifyNotify* Arena::CreateMaybeMessage<::PTP::Buddy::BuddyModifyNotify>(Arena*);
template<> ::PTP::Buddy::BuddyModifyReq* Arena::CreateMaybeMessage<::PTP::Buddy::BuddyModifyReq>(Arena*);
template<> ::PTP::Buddy::BuddyModifyRes* Arena::CreateMaybeMessage<::PTP::Buddy::BuddyModifyRes>(Arena*);
template<> ::PTP::Buddy::BuddyModifyUpdatePair* Arena::CreateMaybeMessage<::PTP::Buddy::BuddyModifyUpdatePair>(Arena*);
template<> ::PTP::Buddy::BuddyQueryListReq* Arena::CreateMaybeMessage<::PTP::Buddy::BuddyQueryListReq>(Arena*);
template<> ::PTP::Buddy::BuddyQueryListRes* Arena::CreateMaybeMessage<::PTP::Buddy::BuddyQueryListRes>(Arena*);
template<> ::PTP::Buddy::BuddyStatNotify* Arena::CreateMaybeMessage<::PTP::Buddy::BuddyStatNotify>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PTP {
namespace Buddy {

// ===================================================================

class BuddyGetListReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Buddy.BuddyGetListReq) */ {
 public:
  inline BuddyGetListReq() : BuddyGetListReq(nullptr) {}
  ~BuddyGetListReq() override;
  explicit PROTOBUF_CONSTEXPR BuddyGetListReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuddyGetListReq(const BuddyGetListReq& from);
  BuddyGetListReq(BuddyGetListReq&& from) noexcept
    : BuddyGetListReq() {
    *this = ::std::move(from);
  }

  inline BuddyGetListReq& operator=(const BuddyGetListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuddyGetListReq& operator=(BuddyGetListReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BuddyGetListReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuddyGetListReq* internal_default_instance() {
    return reinterpret_cast<const BuddyGetListReq*>(
               &_BuddyGetListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BuddyGetListReq& a, BuddyGetListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(BuddyGetListReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuddyGetListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuddyGetListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuddyGetListReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BuddyGetListReq& from);
  void MergeFrom(const BuddyGetListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BuddyGetListReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Buddy.BuddyGetListReq";
  }
  protected:
  explicit BuddyGetListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdsFieldNumber = 1,
    kAttachDataFieldNumber = 20,
    kAuthUidFieldNumber = 21,
  };
  // repeated uint32 user_ids = 1;
  int user_ids_size() const;
  private:
  int _internal_user_ids_size() const;
  public:
  void clear_user_ids();
  private:
  uint32_t _internal_user_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_user_ids() const;
  void _internal_add_user_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_user_ids();
  public:
  uint32_t user_ids(int index) const;
  void set_user_ids(int index, uint32_t value);
  void add_user_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_user_ids();

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Buddy.BuddyGetListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > user_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t auth_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class BuddyGetListRes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Buddy.BuddyGetListRes) */ {
 public:
  inline BuddyGetListRes() : BuddyGetListRes(nullptr) {}
  ~BuddyGetListRes() override;
  explicit PROTOBUF_CONSTEXPR BuddyGetListRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuddyGetListRes(const BuddyGetListRes& from);
  BuddyGetListRes(BuddyGetListRes&& from) noexcept
    : BuddyGetListRes() {
    *this = ::std::move(from);
  }

  inline BuddyGetListRes& operator=(const BuddyGetListRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuddyGetListRes& operator=(BuddyGetListRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BuddyGetListRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuddyGetListRes* internal_default_instance() {
    return reinterpret_cast<const BuddyGetListRes*>(
               &_BuddyGetListRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BuddyGetListRes& a, BuddyGetListRes& b) {
    a.Swap(&b);
  }
  inline void Swap(BuddyGetListRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuddyGetListRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuddyGetListRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuddyGetListRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BuddyGetListRes& from);
  void MergeFrom(const BuddyGetListRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BuddyGetListRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Buddy.BuddyGetListRes";
  }
  protected:
  explicit BuddyGetListRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuddyListFieldNumber = 2,
    kAttachDataFieldNumber = 20,
    kErrorFieldNumber = 1,
    kAuthUidFieldNumber = 21,
  };
  // repeated .PTP.Common.UserInfo buddy_list = 2;
  int buddy_list_size() const;
  private:
  int _internal_buddy_list_size() const;
  public:
  void clear_buddy_list();
  ::PTP::Common::UserInfo* mutable_buddy_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::UserInfo >*
      mutable_buddy_list();
  private:
  const ::PTP::Common::UserInfo& _internal_buddy_list(int index) const;
  ::PTP::Common::UserInfo* _internal_add_buddy_list();
  public:
  const ::PTP::Common::UserInfo& buddy_list(int index) const;
  ::PTP::Common::UserInfo* add_buddy_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::UserInfo >&
      buddy_list() const;

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required .PTP.Common.ERR error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);
  private:
  ::PTP::Common::ERR _internal_error() const;
  void _internal_set_error(::PTP::Common::ERR value);
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Buddy.BuddyGetListRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::UserInfo > buddy_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    int error_;
    uint32_t auth_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class BuddyGetALLReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Buddy.BuddyGetALLReq) */ {
 public:
  inline BuddyGetALLReq() : BuddyGetALLReq(nullptr) {}
  ~BuddyGetALLReq() override;
  explicit PROTOBUF_CONSTEXPR BuddyGetALLReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuddyGetALLReq(const BuddyGetALLReq& from);
  BuddyGetALLReq(BuddyGetALLReq&& from) noexcept
    : BuddyGetALLReq() {
    *this = ::std::move(from);
  }

  inline BuddyGetALLReq& operator=(const BuddyGetALLReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuddyGetALLReq& operator=(BuddyGetALLReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BuddyGetALLReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuddyGetALLReq* internal_default_instance() {
    return reinterpret_cast<const BuddyGetALLReq*>(
               &_BuddyGetALLReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BuddyGetALLReq& a, BuddyGetALLReq& b) {
    a.Swap(&b);
  }
  inline void Swap(BuddyGetALLReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuddyGetALLReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuddyGetALLReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuddyGetALLReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BuddyGetALLReq& from);
  void MergeFrom(const BuddyGetALLReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BuddyGetALLReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Buddy.BuddyGetALLReq";
  }
  protected:
  explicit BuddyGetALLReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kBuddyUpdatedTimeFieldNumber = 1,
    kAuthUidFieldNumber = 21,
  };
  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required uint32 buddy_updated_time = 1;
  bool has_buddy_updated_time() const;
  private:
  bool _internal_has_buddy_updated_time() const;
  public:
  void clear_buddy_updated_time();
  uint32_t buddy_updated_time() const;
  void set_buddy_updated_time(uint32_t value);
  private:
  uint32_t _internal_buddy_updated_time() const;
  void _internal_set_buddy_updated_time(uint32_t value);
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Buddy.BuddyGetALLReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t buddy_updated_time_;
    uint32_t auth_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class BuddyGetALLRes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Buddy.BuddyGetALLRes) */ {
 public:
  inline BuddyGetALLRes() : BuddyGetALLRes(nullptr) {}
  ~BuddyGetALLRes() override;
  explicit PROTOBUF_CONSTEXPR BuddyGetALLRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuddyGetALLRes(const BuddyGetALLRes& from);
  BuddyGetALLRes(BuddyGetALLRes&& from) noexcept
    : BuddyGetALLRes() {
    *this = ::std::move(from);
  }

  inline BuddyGetALLRes& operator=(const BuddyGetALLRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuddyGetALLRes& operator=(BuddyGetALLRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BuddyGetALLRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuddyGetALLRes* internal_default_instance() {
    return reinterpret_cast<const BuddyGetALLRes*>(
               &_BuddyGetALLRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BuddyGetALLRes& a, BuddyGetALLRes& b) {
    a.Swap(&b);
  }
  inline void Swap(BuddyGetALLRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuddyGetALLRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuddyGetALLRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuddyGetALLRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BuddyGetALLRes& from);
  void MergeFrom(const BuddyGetALLRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BuddyGetALLRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Buddy.BuddyGetALLRes";
  }
  protected:
  explicit BuddyGetALLRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuddyListFieldNumber = 3,
    kAttachDataFieldNumber = 20,
    kBuddyUpdatedTimeFieldNumber = 1,
    kErrorFieldNumber = 2,
    kAuthUidFieldNumber = 21,
  };
  // repeated .PTP.Common.UserInfo buddy_list = 3;
  int buddy_list_size() const;
  private:
  int _internal_buddy_list_size() const;
  public:
  void clear_buddy_list();
  ::PTP::Common::UserInfo* mutable_buddy_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::UserInfo >*
      mutable_buddy_list();
  private:
  const ::PTP::Common::UserInfo& _internal_buddy_list(int index) const;
  ::PTP::Common::UserInfo* _internal_add_buddy_list();
  public:
  const ::PTP::Common::UserInfo& buddy_list(int index) const;
  ::PTP::Common::UserInfo* add_buddy_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::UserInfo >&
      buddy_list() const;

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required uint32 buddy_updated_time = 1;
  bool has_buddy_updated_time() const;
  private:
  bool _internal_has_buddy_updated_time() const;
  public:
  void clear_buddy_updated_time();
  uint32_t buddy_updated_time() const;
  void set_buddy_updated_time(uint32_t value);
  private:
  uint32_t _internal_buddy_updated_time() const;
  void _internal_set_buddy_updated_time(uint32_t value);
  public:

  // required .PTP.Common.ERR error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);
  private:
  ::PTP::Common::ERR _internal_error() const;
  void _internal_set_error(::PTP::Common::ERR value);
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Buddy.BuddyGetALLRes)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::UserInfo > buddy_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t buddy_updated_time_;
    int error_;
    uint32_t auth_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class BuddyGetStatReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Buddy.BuddyGetStatReq) */ {
 public:
  inline BuddyGetStatReq() : BuddyGetStatReq(nullptr) {}
  ~BuddyGetStatReq() override;
  explicit PROTOBUF_CONSTEXPR BuddyGetStatReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuddyGetStatReq(const BuddyGetStatReq& from);
  BuddyGetStatReq(BuddyGetStatReq&& from) noexcept
    : BuddyGetStatReq() {
    *this = ::std::move(from);
  }

  inline BuddyGetStatReq& operator=(const BuddyGetStatReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuddyGetStatReq& operator=(BuddyGetStatReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BuddyGetStatReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuddyGetStatReq* internal_default_instance() {
    return reinterpret_cast<const BuddyGetStatReq*>(
               &_BuddyGetStatReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BuddyGetStatReq& a, BuddyGetStatReq& b) {
    a.Swap(&b);
  }
  inline void Swap(BuddyGetStatReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuddyGetStatReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuddyGetStatReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuddyGetStatReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BuddyGetStatReq& from);
  void MergeFrom(const BuddyGetStatReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BuddyGetStatReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Buddy.BuddyGetStatReq";
  }
  protected:
  explicit BuddyGetStatReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdsFieldNumber = 1,
    kAttachDataFieldNumber = 20,
    kAuthUidFieldNumber = 21,
  };
  // repeated uint32 user_ids = 1;
  int user_ids_size() const;
  private:
  int _internal_user_ids_size() const;
  public:
  void clear_user_ids();
  private:
  uint32_t _internal_user_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_user_ids() const;
  void _internal_add_user_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_user_ids();
  public:
  uint32_t user_ids(int index) const;
  void set_user_ids(int index, uint32_t value);
  void add_user_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_user_ids();

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Buddy.BuddyGetStatReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > user_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t auth_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class BuddyGetStatRes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Buddy.BuddyGetStatRes) */ {
 public:
  inline BuddyGetStatRes() : BuddyGetStatRes(nullptr) {}
  ~BuddyGetStatRes() override;
  explicit PROTOBUF_CONSTEXPR BuddyGetStatRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuddyGetStatRes(const BuddyGetStatRes& from);
  BuddyGetStatRes(BuddyGetStatRes&& from) noexcept
    : BuddyGetStatRes() {
    *this = ::std::move(from);
  }

  inline BuddyGetStatRes& operator=(const BuddyGetStatRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuddyGetStatRes& operator=(BuddyGetStatRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BuddyGetStatRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuddyGetStatRes* internal_default_instance() {
    return reinterpret_cast<const BuddyGetStatRes*>(
               &_BuddyGetStatRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BuddyGetStatRes& a, BuddyGetStatRes& b) {
    a.Swap(&b);
  }
  inline void Swap(BuddyGetStatRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuddyGetStatRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuddyGetStatRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuddyGetStatRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BuddyGetStatRes& from);
  void MergeFrom(const BuddyGetStatRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BuddyGetStatRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Buddy.BuddyGetStatRes";
  }
  protected:
  explicit BuddyGetStatRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserStatListFieldNumber = 2,
    kAttachDataFieldNumber = 20,
    kErrorFieldNumber = 1,
    kAuthUidFieldNumber = 21,
  };
  // repeated .PTP.Common.UserStat user_stat_list = 2;
  int user_stat_list_size() const;
  private:
  int _internal_user_stat_list_size() const;
  public:
  void clear_user_stat_list();
  private:
  ::PTP::Common::UserStat _internal_user_stat_list(int index) const;
  void _internal_add_user_stat_list(::PTP::Common::UserStat value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_user_stat_list();
  public:
  ::PTP::Common::UserStat user_stat_list(int index) const;
  void set_user_stat_list(int index, ::PTP::Common::UserStat value);
  void add_user_stat_list(::PTP::Common::UserStat value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& user_stat_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_user_stat_list();

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required .PTP.Common.ERR error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);
  private:
  ::PTP::Common::ERR _internal_error() const;
  void _internal_set_error(::PTP::Common::ERR value);
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Buddy.BuddyGetStatRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> user_stat_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    int error_;
    uint32_t auth_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class BuddyStatNotify final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Buddy.BuddyStatNotify) */ {
 public:
  inline BuddyStatNotify() : BuddyStatNotify(nullptr) {}
  ~BuddyStatNotify() override;
  explicit PROTOBUF_CONSTEXPR BuddyStatNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuddyStatNotify(const BuddyStatNotify& from);
  BuddyStatNotify(BuddyStatNotify&& from) noexcept
    : BuddyStatNotify() {
    *this = ::std::move(from);
  }

  inline BuddyStatNotify& operator=(const BuddyStatNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuddyStatNotify& operator=(BuddyStatNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BuddyStatNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuddyStatNotify* internal_default_instance() {
    return reinterpret_cast<const BuddyStatNotify*>(
               &_BuddyStatNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BuddyStatNotify& a, BuddyStatNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(BuddyStatNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuddyStatNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuddyStatNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuddyStatNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BuddyStatNotify& from);
  void MergeFrom(const BuddyStatNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BuddyStatNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Buddy.BuddyStatNotify";
  }
  protected:
  explicit BuddyStatNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserStatFieldNumber = 1,
  };
  // required .PTP.Common.UserStat user_stat = 1;
  bool has_user_stat() const;
  private:
  bool _internal_has_user_stat() const;
  public:
  void clear_user_stat();
  ::PTP::Common::UserStat user_stat() const;
  void set_user_stat(::PTP::Common::UserStat value);
  private:
  ::PTP::Common::UserStat _internal_user_stat() const;
  void _internal_set_user_stat(::PTP::Common::UserStat value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Buddy.BuddyStatNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int user_stat_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class BuddyModifyReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Buddy.BuddyModifyReq) */ {
 public:
  inline BuddyModifyReq() : BuddyModifyReq(nullptr) {}
  ~BuddyModifyReq() override;
  explicit PROTOBUF_CONSTEXPR BuddyModifyReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuddyModifyReq(const BuddyModifyReq& from);
  BuddyModifyReq(BuddyModifyReq&& from) noexcept
    : BuddyModifyReq() {
    *this = ::std::move(from);
  }

  inline BuddyModifyReq& operator=(const BuddyModifyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuddyModifyReq& operator=(BuddyModifyReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BuddyModifyReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuddyModifyReq* internal_default_instance() {
    return reinterpret_cast<const BuddyModifyReq*>(
               &_BuddyModifyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BuddyModifyReq& a, BuddyModifyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(BuddyModifyReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuddyModifyReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuddyModifyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuddyModifyReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BuddyModifyReq& from);
  void MergeFrom(const BuddyModifyReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BuddyModifyReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Buddy.BuddyModifyReq";
  }
  protected:
  explicit BuddyModifyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 4,
    kAttachDataFieldNumber = 20,
    kAuthUidFieldNumber = 21,
    kBuddyModifyActionFieldNumber = 2,
  };
  // required string value = 4;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // required .PTP.Common.BuddyModifyAction buddy_modify_action = 2;
  bool has_buddy_modify_action() const;
  private:
  bool _internal_has_buddy_modify_action() const;
  public:
  void clear_buddy_modify_action();
  ::PTP::Common::BuddyModifyAction buddy_modify_action() const;
  void set_buddy_modify_action(::PTP::Common::BuddyModifyAction value);
  private:
  ::PTP::Common::BuddyModifyAction _internal_buddy_modify_action() const;
  void _internal_set_buddy_modify_action(::PTP::Common::BuddyModifyAction value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Buddy.BuddyModifyReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t auth_uid_;
    int buddy_modify_action_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class BuddyModifyRes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Buddy.BuddyModifyRes) */ {
 public:
  inline BuddyModifyRes() : BuddyModifyRes(nullptr) {}
  ~BuddyModifyRes() override;
  explicit PROTOBUF_CONSTEXPR BuddyModifyRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuddyModifyRes(const BuddyModifyRes& from);
  BuddyModifyRes(BuddyModifyRes&& from) noexcept
    : BuddyModifyRes() {
    *this = ::std::move(from);
  }

  inline BuddyModifyRes& operator=(const BuddyModifyRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuddyModifyRes& operator=(BuddyModifyRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BuddyModifyRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuddyModifyRes* internal_default_instance() {
    return reinterpret_cast<const BuddyModifyRes*>(
               &_BuddyModifyRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BuddyModifyRes& a, BuddyModifyRes& b) {
    a.Swap(&b);
  }
  inline void Swap(BuddyModifyRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuddyModifyRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuddyModifyRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuddyModifyRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BuddyModifyRes& from);
  void MergeFrom(const BuddyModifyRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BuddyModifyRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Buddy.BuddyModifyRes";
  }
  protected:
  explicit BuddyModifyRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotifyPairsFieldNumber = 5,
    kValueFieldNumber = 3,
    kAttachDataFieldNumber = 20,
    kErrorFieldNumber = 1,
    kAuthUidFieldNumber = 21,
    kBuddyModifyActionFieldNumber = 2,
  };
  // repeated uint32 notify_pairs = 5;
  int notify_pairs_size() const;
  private:
  int _internal_notify_pairs_size() const;
  public:
  void clear_notify_pairs();
  private:
  uint32_t _internal_notify_pairs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_notify_pairs() const;
  void _internal_add_notify_pairs(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_notify_pairs();
  public:
  uint32_t notify_pairs(int index) const;
  void set_notify_pairs(int index, uint32_t value);
  void add_notify_pairs(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      notify_pairs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_notify_pairs();

  // required string value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required .PTP.Common.ERR error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);
  private:
  ::PTP::Common::ERR _internal_error() const;
  void _internal_set_error(::PTP::Common::ERR value);
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // required .PTP.Common.BuddyModifyAction buddy_modify_action = 2;
  bool has_buddy_modify_action() const;
  private:
  bool _internal_has_buddy_modify_action() const;
  public:
  void clear_buddy_modify_action();
  ::PTP::Common::BuddyModifyAction buddy_modify_action() const;
  void set_buddy_modify_action(::PTP::Common::BuddyModifyAction value);
  private:
  ::PTP::Common::BuddyModifyAction _internal_buddy_modify_action() const;
  void _internal_set_buddy_modify_action(::PTP::Common::BuddyModifyAction value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Buddy.BuddyModifyRes)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > notify_pairs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    int error_;
    uint32_t auth_uid_;
    int buddy_modify_action_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class BuddyModifyNotify final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Buddy.BuddyModifyNotify) */ {
 public:
  inline BuddyModifyNotify() : BuddyModifyNotify(nullptr) {}
  ~BuddyModifyNotify() override;
  explicit PROTOBUF_CONSTEXPR BuddyModifyNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuddyModifyNotify(const BuddyModifyNotify& from);
  BuddyModifyNotify(BuddyModifyNotify&& from) noexcept
    : BuddyModifyNotify() {
    *this = ::std::move(from);
  }

  inline BuddyModifyNotify& operator=(const BuddyModifyNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuddyModifyNotify& operator=(BuddyModifyNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BuddyModifyNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuddyModifyNotify* internal_default_instance() {
    return reinterpret_cast<const BuddyModifyNotify*>(
               &_BuddyModifyNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BuddyModifyNotify& a, BuddyModifyNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(BuddyModifyNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuddyModifyNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuddyModifyNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuddyModifyNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BuddyModifyNotify& from);
  void MergeFrom(const BuddyModifyNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BuddyModifyNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Buddy.BuddyModifyNotify";
  }
  protected:
  explicit BuddyModifyNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 4,
    kUidFieldNumber = 2,
    kBuddyModifyActionFieldNumber = 1,
  };
  // required string value = 4;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // required uint32 uid = 2;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  uint32_t uid() const;
  void set_uid(uint32_t value);
  private:
  uint32_t _internal_uid() const;
  void _internal_set_uid(uint32_t value);
  public:

  // required .PTP.Common.BuddyModifyAction buddy_modify_action = 1;
  bool has_buddy_modify_action() const;
  private:
  bool _internal_has_buddy_modify_action() const;
  public:
  void clear_buddy_modify_action();
  ::PTP::Common::BuddyModifyAction buddy_modify_action() const;
  void set_buddy_modify_action(::PTP::Common::BuddyModifyAction value);
  private:
  ::PTP::Common::BuddyModifyAction _internal_buddy_modify_action() const;
  void _internal_set_buddy_modify_action(::PTP::Common::BuddyModifyAction value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Buddy.BuddyModifyNotify)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    uint32_t uid_;
    int buddy_modify_action_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class BuddyModifyUpdatePair final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Buddy.BuddyModifyUpdatePair) */ {
 public:
  inline BuddyModifyUpdatePair() : BuddyModifyUpdatePair(nullptr) {}
  ~BuddyModifyUpdatePair() override;
  explicit PROTOBUF_CONSTEXPR BuddyModifyUpdatePair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuddyModifyUpdatePair(const BuddyModifyUpdatePair& from);
  BuddyModifyUpdatePair(BuddyModifyUpdatePair&& from) noexcept
    : BuddyModifyUpdatePair() {
    *this = ::std::move(from);
  }

  inline BuddyModifyUpdatePair& operator=(const BuddyModifyUpdatePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuddyModifyUpdatePair& operator=(BuddyModifyUpdatePair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BuddyModifyUpdatePair& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuddyModifyUpdatePair* internal_default_instance() {
    return reinterpret_cast<const BuddyModifyUpdatePair*>(
               &_BuddyModifyUpdatePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BuddyModifyUpdatePair& a, BuddyModifyUpdatePair& b) {
    a.Swap(&b);
  }
  inline void Swap(BuddyModifyUpdatePair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuddyModifyUpdatePair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuddyModifyUpdatePair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuddyModifyUpdatePair>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BuddyModifyUpdatePair& from);
  void MergeFrom(const BuddyModifyUpdatePair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BuddyModifyUpdatePair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Buddy.BuddyModifyUpdatePair";
  }
  protected:
  explicit BuddyModifyUpdatePair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPairUidListFieldNumber = 1,
    kAuthUidFieldNumber = 2,
  };
  // repeated uint32 pair_uid_list = 1;
  int pair_uid_list_size() const;
  private:
  int _internal_pair_uid_list_size() const;
  public:
  void clear_pair_uid_list();
  private:
  uint32_t _internal_pair_uid_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_pair_uid_list() const;
  void _internal_add_pair_uid_list(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_pair_uid_list();
  public:
  uint32_t pair_uid_list(int index) const;
  void set_pair_uid_list(int index, uint32_t value);
  void add_pair_uid_list(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      pair_uid_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_pair_uid_list();

  // required uint32 auth_uid = 2;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Buddy.BuddyModifyUpdatePair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > pair_uid_list_;
    uint32_t auth_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class BuddyImportContactsReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Buddy.BuddyImportContactsReq) */ {
 public:
  inline BuddyImportContactsReq() : BuddyImportContactsReq(nullptr) {}
  ~BuddyImportContactsReq() override;
  explicit PROTOBUF_CONSTEXPR BuddyImportContactsReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuddyImportContactsReq(const BuddyImportContactsReq& from);
  BuddyImportContactsReq(BuddyImportContactsReq&& from) noexcept
    : BuddyImportContactsReq() {
    *this = ::std::move(from);
  }

  inline BuddyImportContactsReq& operator=(const BuddyImportContactsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuddyImportContactsReq& operator=(BuddyImportContactsReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BuddyImportContactsReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuddyImportContactsReq* internal_default_instance() {
    return reinterpret_cast<const BuddyImportContactsReq*>(
               &_BuddyImportContactsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BuddyImportContactsReq& a, BuddyImportContactsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(BuddyImportContactsReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuddyImportContactsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuddyImportContactsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuddyImportContactsReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BuddyImportContactsReq& from);
  void MergeFrom(const BuddyImportContactsReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BuddyImportContactsReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Buddy.BuddyImportContactsReq";
  }
  protected:
  explicit BuddyImportContactsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneContactsFieldNumber = 1,
    kAttachDataFieldNumber = 20,
    kAuthUidFieldNumber = 21,
  };
  // repeated .PTP.Common.InputPhoneContact phone_contacts = 1;
  int phone_contacts_size() const;
  private:
  int _internal_phone_contacts_size() const;
  public:
  void clear_phone_contacts();
  ::PTP::Common::InputPhoneContact* mutable_phone_contacts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::InputPhoneContact >*
      mutable_phone_contacts();
  private:
  const ::PTP::Common::InputPhoneContact& _internal_phone_contacts(int index) const;
  ::PTP::Common::InputPhoneContact* _internal_add_phone_contacts();
  public:
  const ::PTP::Common::InputPhoneContact& phone_contacts(int index) const;
  ::PTP::Common::InputPhoneContact* add_phone_contacts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::InputPhoneContact >&
      phone_contacts() const;

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Buddy.BuddyImportContactsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::InputPhoneContact > phone_contacts_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t auth_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class BuddyImportContactsRes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Buddy.BuddyImportContactsRes) */ {
 public:
  inline BuddyImportContactsRes() : BuddyImportContactsRes(nullptr) {}
  ~BuddyImportContactsRes() override;
  explicit PROTOBUF_CONSTEXPR BuddyImportContactsRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuddyImportContactsRes(const BuddyImportContactsRes& from);
  BuddyImportContactsRes(BuddyImportContactsRes&& from) noexcept
    : BuddyImportContactsRes() {
    *this = ::std::move(from);
  }

  inline BuddyImportContactsRes& operator=(const BuddyImportContactsRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuddyImportContactsRes& operator=(BuddyImportContactsRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BuddyImportContactsRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuddyImportContactsRes* internal_default_instance() {
    return reinterpret_cast<const BuddyImportContactsRes*>(
               &_BuddyImportContactsRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(BuddyImportContactsRes& a, BuddyImportContactsRes& b) {
    a.Swap(&b);
  }
  inline void Swap(BuddyImportContactsRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuddyImportContactsRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuddyImportContactsRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuddyImportContactsRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BuddyImportContactsRes& from);
  void MergeFrom(const BuddyImportContactsRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BuddyImportContactsRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Buddy.BuddyImportContactsRes";
  }
  protected:
  explicit BuddyImportContactsRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kErrorFieldNumber = 1,
    kAuthUidFieldNumber = 21,
  };
  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required .PTP.Common.ERR error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);
  private:
  ::PTP::Common::ERR _internal_error() const;
  void _internal_set_error(::PTP::Common::ERR value);
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Buddy.BuddyImportContactsRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    int error_;
    uint32_t auth_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class BuddyQueryListReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Buddy.BuddyQueryListReq) */ {
 public:
  inline BuddyQueryListReq() : BuddyQueryListReq(nullptr) {}
  ~BuddyQueryListReq() override;
  explicit PROTOBUF_CONSTEXPR BuddyQueryListReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuddyQueryListReq(const BuddyQueryListReq& from);
  BuddyQueryListReq(BuddyQueryListReq&& from) noexcept
    : BuddyQueryListReq() {
    *this = ::std::move(from);
  }

  inline BuddyQueryListReq& operator=(const BuddyQueryListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuddyQueryListReq& operator=(BuddyQueryListReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BuddyQueryListReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuddyQueryListReq* internal_default_instance() {
    return reinterpret_cast<const BuddyQueryListReq*>(
               &_BuddyQueryListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(BuddyQueryListReq& a, BuddyQueryListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(BuddyQueryListReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuddyQueryListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuddyQueryListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuddyQueryListReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BuddyQueryListReq& from);
  void MergeFrom(const BuddyQueryListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BuddyQueryListReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Buddy.BuddyQueryListReq";
  }
  protected:
  explicit BuddyQueryListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kParamsFieldNumber = 1,
    kAuthUidFieldNumber = 21,
  };
  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required .PTP.Common.BuddyQueryParam params = 1;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::PTP::Common::BuddyQueryParam& params() const;
  PROTOBUF_NODISCARD ::PTP::Common::BuddyQueryParam* release_params();
  ::PTP::Common::BuddyQueryParam* mutable_params();
  void set_allocated_params(::PTP::Common::BuddyQueryParam* params);
  private:
  const ::PTP::Common::BuddyQueryParam& _internal_params() const;
  ::PTP::Common::BuddyQueryParam* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::PTP::Common::BuddyQueryParam* params);
  ::PTP::Common::BuddyQueryParam* unsafe_arena_release_params();

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Buddy.BuddyQueryListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    ::PTP::Common::BuddyQueryParam* params_;
    uint32_t auth_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class BuddyQueryListRes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Buddy.BuddyQueryListRes) */ {
 public:
  inline BuddyQueryListRes() : BuddyQueryListRes(nullptr) {}
  ~BuddyQueryListRes() override;
  explicit PROTOBUF_CONSTEXPR BuddyQueryListRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuddyQueryListRes(const BuddyQueryListRes& from);
  BuddyQueryListRes(BuddyQueryListRes&& from) noexcept
    : BuddyQueryListRes() {
    *this = ::std::move(from);
  }

  inline BuddyQueryListRes& operator=(const BuddyQueryListRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuddyQueryListRes& operator=(BuddyQueryListRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BuddyQueryListRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuddyQueryListRes* internal_default_instance() {
    return reinterpret_cast<const BuddyQueryListRes*>(
               &_BuddyQueryListRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(BuddyQueryListRes& a, BuddyQueryListRes& b) {
    a.Swap(&b);
  }
  inline void Swap(BuddyQueryListRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuddyQueryListRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuddyQueryListRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuddyQueryListRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BuddyQueryListRes& from);
  void MergeFrom(const BuddyQueryListRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BuddyQueryListRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Buddy.BuddyQueryListRes";
  }
  protected:
  explicit BuddyQueryListRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuddyListFieldNumber = 2,
    kAttachDataFieldNumber = 20,
    kErrorFieldNumber = 1,
    kAuthUidFieldNumber = 21,
  };
  // repeated .PTP.Common.UserInfo buddy_list = 2;
  int buddy_list_size() const;
  private:
  int _internal_buddy_list_size() const;
  public:
  void clear_buddy_list();
  ::PTP::Common::UserInfo* mutable_buddy_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::UserInfo >*
      mutable_buddy_list();
  private:
  const ::PTP::Common::UserInfo& _internal_buddy_list(int index) const;
  ::PTP::Common::UserInfo* _internal_add_buddy_list();
  public:
  const ::PTP::Common::UserInfo& buddy_list(int index) const;
  ::PTP::Common::UserInfo* add_buddy_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::UserInfo >&
      buddy_list() const;

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required .PTP.Common.ERR error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);
  private:
  ::PTP::Common::ERR _internal_error() const;
  void _internal_set_error(::PTP::Common::ERR value);
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Buddy.BuddyQueryListRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::UserInfo > buddy_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    int error_;
    uint32_t auth_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eBuddy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BuddyGetListReq

// repeated uint32 user_ids = 1;
inline int BuddyGetListReq::_internal_user_ids_size() const {
  return _impl_.user_ids_.size();
}
inline int BuddyGetListReq::user_ids_size() const {
  return _internal_user_ids_size();
}
inline void BuddyGetListReq::clear_user_ids() {
  _impl_.user_ids_.Clear();
}
inline uint32_t BuddyGetListReq::_internal_user_ids(int index) const {
  return _impl_.user_ids_.Get(index);
}
inline uint32_t BuddyGetListReq::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyGetListReq.user_ids)
  return _internal_user_ids(index);
}
inline void BuddyGetListReq::set_user_ids(int index, uint32_t value) {
  _impl_.user_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyGetListReq.user_ids)
}
inline void BuddyGetListReq::_internal_add_user_ids(uint32_t value) {
  _impl_.user_ids_.Add(value);
}
inline void BuddyGetListReq::add_user_ids(uint32_t value) {
  _internal_add_user_ids(value);
  // @@protoc_insertion_point(field_add:PTP.Buddy.BuddyGetListReq.user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
BuddyGetListReq::_internal_user_ids() const {
  return _impl_.user_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
BuddyGetListReq::user_ids() const {
  // @@protoc_insertion_point(field_list:PTP.Buddy.BuddyGetListReq.user_ids)
  return _internal_user_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
BuddyGetListReq::_internal_mutable_user_ids() {
  return &_impl_.user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
BuddyGetListReq::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:PTP.Buddy.BuddyGetListReq.user_ids)
  return _internal_mutable_user_ids();
}

// optional bytes attach_data = 20;
inline bool BuddyGetListReq::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BuddyGetListReq::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void BuddyGetListReq::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BuddyGetListReq::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyGetListReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuddyGetListReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyGetListReq.attach_data)
}
inline std::string* BuddyGetListReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Buddy.BuddyGetListReq.attach_data)
  return _s;
}
inline const std::string& BuddyGetListReq::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void BuddyGetListReq::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* BuddyGetListReq::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* BuddyGetListReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Buddy.BuddyGetListReq.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BuddyGetListReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Buddy.BuddyGetListReq.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool BuddyGetListReq::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BuddyGetListReq::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void BuddyGetListReq::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t BuddyGetListReq::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t BuddyGetListReq::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyGetListReq.auth_uid)
  return _internal_auth_uid();
}
inline void BuddyGetListReq::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.auth_uid_ = value;
}
inline void BuddyGetListReq::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyGetListReq.auth_uid)
}

// -------------------------------------------------------------------

// BuddyGetListRes

// required .PTP.Common.ERR error = 1;
inline bool BuddyGetListRes::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BuddyGetListRes::has_error() const {
  return _internal_has_error();
}
inline void BuddyGetListRes::clear_error() {
  _impl_.error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::PTP::Common::ERR BuddyGetListRes::_internal_error() const {
  return static_cast< ::PTP::Common::ERR >(_impl_.error_);
}
inline ::PTP::Common::ERR BuddyGetListRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyGetListRes.error)
  return _internal_error();
}
inline void BuddyGetListRes::_internal_set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_ = value;
}
inline void BuddyGetListRes::set_error(::PTP::Common::ERR value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyGetListRes.error)
}

// repeated .PTP.Common.UserInfo buddy_list = 2;
inline int BuddyGetListRes::_internal_buddy_list_size() const {
  return _impl_.buddy_list_.size();
}
inline int BuddyGetListRes::buddy_list_size() const {
  return _internal_buddy_list_size();
}
inline ::PTP::Common::UserInfo* BuddyGetListRes::mutable_buddy_list(int index) {
  // @@protoc_insertion_point(field_mutable:PTP.Buddy.BuddyGetListRes.buddy_list)
  return _impl_.buddy_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::UserInfo >*
BuddyGetListRes::mutable_buddy_list() {
  // @@protoc_insertion_point(field_mutable_list:PTP.Buddy.BuddyGetListRes.buddy_list)
  return &_impl_.buddy_list_;
}
inline const ::PTP::Common::UserInfo& BuddyGetListRes::_internal_buddy_list(int index) const {
  return _impl_.buddy_list_.Get(index);
}
inline const ::PTP::Common::UserInfo& BuddyGetListRes::buddy_list(int index) const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyGetListRes.buddy_list)
  return _internal_buddy_list(index);
}
inline ::PTP::Common::UserInfo* BuddyGetListRes::_internal_add_buddy_list() {
  return _impl_.buddy_list_.Add();
}
inline ::PTP::Common::UserInfo* BuddyGetListRes::add_buddy_list() {
  ::PTP::Common::UserInfo* _add = _internal_add_buddy_list();
  // @@protoc_insertion_point(field_add:PTP.Buddy.BuddyGetListRes.buddy_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::UserInfo >&
BuddyGetListRes::buddy_list() const {
  // @@protoc_insertion_point(field_list:PTP.Buddy.BuddyGetListRes.buddy_list)
  return _impl_.buddy_list_;
}

// optional bytes attach_data = 20;
inline bool BuddyGetListRes::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BuddyGetListRes::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void BuddyGetListRes::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BuddyGetListRes::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyGetListRes.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuddyGetListRes::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyGetListRes.attach_data)
}
inline std::string* BuddyGetListRes::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Buddy.BuddyGetListRes.attach_data)
  return _s;
}
inline const std::string& BuddyGetListRes::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void BuddyGetListRes::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* BuddyGetListRes::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* BuddyGetListRes::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Buddy.BuddyGetListRes.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BuddyGetListRes::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Buddy.BuddyGetListRes.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool BuddyGetListRes::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BuddyGetListRes::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void BuddyGetListRes::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t BuddyGetListRes::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t BuddyGetListRes::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyGetListRes.auth_uid)
  return _internal_auth_uid();
}
inline void BuddyGetListRes::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.auth_uid_ = value;
}
inline void BuddyGetListRes::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyGetListRes.auth_uid)
}

// -------------------------------------------------------------------

// BuddyGetALLReq

// required uint32 buddy_updated_time = 1;
inline bool BuddyGetALLReq::_internal_has_buddy_updated_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BuddyGetALLReq::has_buddy_updated_time() const {
  return _internal_has_buddy_updated_time();
}
inline void BuddyGetALLReq::clear_buddy_updated_time() {
  _impl_.buddy_updated_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t BuddyGetALLReq::_internal_buddy_updated_time() const {
  return _impl_.buddy_updated_time_;
}
inline uint32_t BuddyGetALLReq::buddy_updated_time() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyGetALLReq.buddy_updated_time)
  return _internal_buddy_updated_time();
}
inline void BuddyGetALLReq::_internal_set_buddy_updated_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.buddy_updated_time_ = value;
}
inline void BuddyGetALLReq::set_buddy_updated_time(uint32_t value) {
  _internal_set_buddy_updated_time(value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyGetALLReq.buddy_updated_time)
}

// optional bytes attach_data = 20;
inline bool BuddyGetALLReq::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BuddyGetALLReq::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void BuddyGetALLReq::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BuddyGetALLReq::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyGetALLReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuddyGetALLReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyGetALLReq.attach_data)
}
inline std::string* BuddyGetALLReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Buddy.BuddyGetALLReq.attach_data)
  return _s;
}
inline const std::string& BuddyGetALLReq::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void BuddyGetALLReq::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* BuddyGetALLReq::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* BuddyGetALLReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Buddy.BuddyGetALLReq.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BuddyGetALLReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Buddy.BuddyGetALLReq.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool BuddyGetALLReq::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BuddyGetALLReq::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void BuddyGetALLReq::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t BuddyGetALLReq::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t BuddyGetALLReq::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyGetALLReq.auth_uid)
  return _internal_auth_uid();
}
inline void BuddyGetALLReq::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.auth_uid_ = value;
}
inline void BuddyGetALLReq::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyGetALLReq.auth_uid)
}

// -------------------------------------------------------------------

// BuddyGetALLRes

// required uint32 buddy_updated_time = 1;
inline bool BuddyGetALLRes::_internal_has_buddy_updated_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BuddyGetALLRes::has_buddy_updated_time() const {
  return _internal_has_buddy_updated_time();
}
inline void BuddyGetALLRes::clear_buddy_updated_time() {
  _impl_.buddy_updated_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t BuddyGetALLRes::_internal_buddy_updated_time() const {
  return _impl_.buddy_updated_time_;
}
inline uint32_t BuddyGetALLRes::buddy_updated_time() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyGetALLRes.buddy_updated_time)
  return _internal_buddy_updated_time();
}
inline void BuddyGetALLRes::_internal_set_buddy_updated_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.buddy_updated_time_ = value;
}
inline void BuddyGetALLRes::set_buddy_updated_time(uint32_t value) {
  _internal_set_buddy_updated_time(value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyGetALLRes.buddy_updated_time)
}

// required .PTP.Common.ERR error = 2;
inline bool BuddyGetALLRes::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BuddyGetALLRes::has_error() const {
  return _internal_has_error();
}
inline void BuddyGetALLRes::clear_error() {
  _impl_.error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::PTP::Common::ERR BuddyGetALLRes::_internal_error() const {
  return static_cast< ::PTP::Common::ERR >(_impl_.error_);
}
inline ::PTP::Common::ERR BuddyGetALLRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyGetALLRes.error)
  return _internal_error();
}
inline void BuddyGetALLRes::_internal_set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.error_ = value;
}
inline void BuddyGetALLRes::set_error(::PTP::Common::ERR value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyGetALLRes.error)
}

// repeated .PTP.Common.UserInfo buddy_list = 3;
inline int BuddyGetALLRes::_internal_buddy_list_size() const {
  return _impl_.buddy_list_.size();
}
inline int BuddyGetALLRes::buddy_list_size() const {
  return _internal_buddy_list_size();
}
inline ::PTP::Common::UserInfo* BuddyGetALLRes::mutable_buddy_list(int index) {
  // @@protoc_insertion_point(field_mutable:PTP.Buddy.BuddyGetALLRes.buddy_list)
  return _impl_.buddy_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::UserInfo >*
BuddyGetALLRes::mutable_buddy_list() {
  // @@protoc_insertion_point(field_mutable_list:PTP.Buddy.BuddyGetALLRes.buddy_list)
  return &_impl_.buddy_list_;
}
inline const ::PTP::Common::UserInfo& BuddyGetALLRes::_internal_buddy_list(int index) const {
  return _impl_.buddy_list_.Get(index);
}
inline const ::PTP::Common::UserInfo& BuddyGetALLRes::buddy_list(int index) const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyGetALLRes.buddy_list)
  return _internal_buddy_list(index);
}
inline ::PTP::Common::UserInfo* BuddyGetALLRes::_internal_add_buddy_list() {
  return _impl_.buddy_list_.Add();
}
inline ::PTP::Common::UserInfo* BuddyGetALLRes::add_buddy_list() {
  ::PTP::Common::UserInfo* _add = _internal_add_buddy_list();
  // @@protoc_insertion_point(field_add:PTP.Buddy.BuddyGetALLRes.buddy_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::UserInfo >&
BuddyGetALLRes::buddy_list() const {
  // @@protoc_insertion_point(field_list:PTP.Buddy.BuddyGetALLRes.buddy_list)
  return _impl_.buddy_list_;
}

// optional bytes attach_data = 20;
inline bool BuddyGetALLRes::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BuddyGetALLRes::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void BuddyGetALLRes::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BuddyGetALLRes::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyGetALLRes.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuddyGetALLRes::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyGetALLRes.attach_data)
}
inline std::string* BuddyGetALLRes::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Buddy.BuddyGetALLRes.attach_data)
  return _s;
}
inline const std::string& BuddyGetALLRes::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void BuddyGetALLRes::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* BuddyGetALLRes::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* BuddyGetALLRes::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Buddy.BuddyGetALLRes.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BuddyGetALLRes::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Buddy.BuddyGetALLRes.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool BuddyGetALLRes::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BuddyGetALLRes::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void BuddyGetALLRes::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t BuddyGetALLRes::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t BuddyGetALLRes::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyGetALLRes.auth_uid)
  return _internal_auth_uid();
}
inline void BuddyGetALLRes::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.auth_uid_ = value;
}
inline void BuddyGetALLRes::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyGetALLRes.auth_uid)
}

// -------------------------------------------------------------------

// BuddyGetStatReq

// repeated uint32 user_ids = 1;
inline int BuddyGetStatReq::_internal_user_ids_size() const {
  return _impl_.user_ids_.size();
}
inline int BuddyGetStatReq::user_ids_size() const {
  return _internal_user_ids_size();
}
inline void BuddyGetStatReq::clear_user_ids() {
  _impl_.user_ids_.Clear();
}
inline uint32_t BuddyGetStatReq::_internal_user_ids(int index) const {
  return _impl_.user_ids_.Get(index);
}
inline uint32_t BuddyGetStatReq::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyGetStatReq.user_ids)
  return _internal_user_ids(index);
}
inline void BuddyGetStatReq::set_user_ids(int index, uint32_t value) {
  _impl_.user_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyGetStatReq.user_ids)
}
inline void BuddyGetStatReq::_internal_add_user_ids(uint32_t value) {
  _impl_.user_ids_.Add(value);
}
inline void BuddyGetStatReq::add_user_ids(uint32_t value) {
  _internal_add_user_ids(value);
  // @@protoc_insertion_point(field_add:PTP.Buddy.BuddyGetStatReq.user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
BuddyGetStatReq::_internal_user_ids() const {
  return _impl_.user_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
BuddyGetStatReq::user_ids() const {
  // @@protoc_insertion_point(field_list:PTP.Buddy.BuddyGetStatReq.user_ids)
  return _internal_user_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
BuddyGetStatReq::_internal_mutable_user_ids() {
  return &_impl_.user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
BuddyGetStatReq::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:PTP.Buddy.BuddyGetStatReq.user_ids)
  return _internal_mutable_user_ids();
}

// optional bytes attach_data = 20;
inline bool BuddyGetStatReq::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BuddyGetStatReq::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void BuddyGetStatReq::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BuddyGetStatReq::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyGetStatReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuddyGetStatReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyGetStatReq.attach_data)
}
inline std::string* BuddyGetStatReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Buddy.BuddyGetStatReq.attach_data)
  return _s;
}
inline const std::string& BuddyGetStatReq::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void BuddyGetStatReq::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* BuddyGetStatReq::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* BuddyGetStatReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Buddy.BuddyGetStatReq.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BuddyGetStatReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Buddy.BuddyGetStatReq.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool BuddyGetStatReq::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BuddyGetStatReq::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void BuddyGetStatReq::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t BuddyGetStatReq::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t BuddyGetStatReq::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyGetStatReq.auth_uid)
  return _internal_auth_uid();
}
inline void BuddyGetStatReq::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.auth_uid_ = value;
}
inline void BuddyGetStatReq::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyGetStatReq.auth_uid)
}

// -------------------------------------------------------------------

// BuddyGetStatRes

// required .PTP.Common.ERR error = 1;
inline bool BuddyGetStatRes::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BuddyGetStatRes::has_error() const {
  return _internal_has_error();
}
inline void BuddyGetStatRes::clear_error() {
  _impl_.error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::PTP::Common::ERR BuddyGetStatRes::_internal_error() const {
  return static_cast< ::PTP::Common::ERR >(_impl_.error_);
}
inline ::PTP::Common::ERR BuddyGetStatRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyGetStatRes.error)
  return _internal_error();
}
inline void BuddyGetStatRes::_internal_set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_ = value;
}
inline void BuddyGetStatRes::set_error(::PTP::Common::ERR value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyGetStatRes.error)
}

// repeated .PTP.Common.UserStat user_stat_list = 2;
inline int BuddyGetStatRes::_internal_user_stat_list_size() const {
  return _impl_.user_stat_list_.size();
}
inline int BuddyGetStatRes::user_stat_list_size() const {
  return _internal_user_stat_list_size();
}
inline void BuddyGetStatRes::clear_user_stat_list() {
  _impl_.user_stat_list_.Clear();
}
inline ::PTP::Common::UserStat BuddyGetStatRes::_internal_user_stat_list(int index) const {
  return static_cast< ::PTP::Common::UserStat >(_impl_.user_stat_list_.Get(index));
}
inline ::PTP::Common::UserStat BuddyGetStatRes::user_stat_list(int index) const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyGetStatRes.user_stat_list)
  return _internal_user_stat_list(index);
}
inline void BuddyGetStatRes::set_user_stat_list(int index, ::PTP::Common::UserStat value) {
  assert(::PTP::Common::UserStat_IsValid(value));
  _impl_.user_stat_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyGetStatRes.user_stat_list)
}
inline void BuddyGetStatRes::_internal_add_user_stat_list(::PTP::Common::UserStat value) {
  assert(::PTP::Common::UserStat_IsValid(value));
  _impl_.user_stat_list_.Add(value);
}
inline void BuddyGetStatRes::add_user_stat_list(::PTP::Common::UserStat value) {
  _internal_add_user_stat_list(value);
  // @@protoc_insertion_point(field_add:PTP.Buddy.BuddyGetStatRes.user_stat_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
BuddyGetStatRes::user_stat_list() const {
  // @@protoc_insertion_point(field_list:PTP.Buddy.BuddyGetStatRes.user_stat_list)
  return _impl_.user_stat_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
BuddyGetStatRes::_internal_mutable_user_stat_list() {
  return &_impl_.user_stat_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
BuddyGetStatRes::mutable_user_stat_list() {
  // @@protoc_insertion_point(field_mutable_list:PTP.Buddy.BuddyGetStatRes.user_stat_list)
  return _internal_mutable_user_stat_list();
}

// optional bytes attach_data = 20;
inline bool BuddyGetStatRes::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BuddyGetStatRes::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void BuddyGetStatRes::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BuddyGetStatRes::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyGetStatRes.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuddyGetStatRes::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyGetStatRes.attach_data)
}
inline std::string* BuddyGetStatRes::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Buddy.BuddyGetStatRes.attach_data)
  return _s;
}
inline const std::string& BuddyGetStatRes::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void BuddyGetStatRes::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* BuddyGetStatRes::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* BuddyGetStatRes::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Buddy.BuddyGetStatRes.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BuddyGetStatRes::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Buddy.BuddyGetStatRes.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool BuddyGetStatRes::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BuddyGetStatRes::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void BuddyGetStatRes::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t BuddyGetStatRes::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t BuddyGetStatRes::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyGetStatRes.auth_uid)
  return _internal_auth_uid();
}
inline void BuddyGetStatRes::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.auth_uid_ = value;
}
inline void BuddyGetStatRes::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyGetStatRes.auth_uid)
}

// -------------------------------------------------------------------

// BuddyStatNotify

// required .PTP.Common.UserStat user_stat = 1;
inline bool BuddyStatNotify::_internal_has_user_stat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BuddyStatNotify::has_user_stat() const {
  return _internal_has_user_stat();
}
inline void BuddyStatNotify::clear_user_stat() {
  _impl_.user_stat_ = 1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::PTP::Common::UserStat BuddyStatNotify::_internal_user_stat() const {
  return static_cast< ::PTP::Common::UserStat >(_impl_.user_stat_);
}
inline ::PTP::Common::UserStat BuddyStatNotify::user_stat() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyStatNotify.user_stat)
  return _internal_user_stat();
}
inline void BuddyStatNotify::_internal_set_user_stat(::PTP::Common::UserStat value) {
  assert(::PTP::Common::UserStat_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_stat_ = value;
}
inline void BuddyStatNotify::set_user_stat(::PTP::Common::UserStat value) {
  _internal_set_user_stat(value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyStatNotify.user_stat)
}

// -------------------------------------------------------------------

// BuddyModifyReq

// required .PTP.Common.BuddyModifyAction buddy_modify_action = 2;
inline bool BuddyModifyReq::_internal_has_buddy_modify_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BuddyModifyReq::has_buddy_modify_action() const {
  return _internal_has_buddy_modify_action();
}
inline void BuddyModifyReq::clear_buddy_modify_action() {
  _impl_.buddy_modify_action_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::PTP::Common::BuddyModifyAction BuddyModifyReq::_internal_buddy_modify_action() const {
  return static_cast< ::PTP::Common::BuddyModifyAction >(_impl_.buddy_modify_action_);
}
inline ::PTP::Common::BuddyModifyAction BuddyModifyReq::buddy_modify_action() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyModifyReq.buddy_modify_action)
  return _internal_buddy_modify_action();
}
inline void BuddyModifyReq::_internal_set_buddy_modify_action(::PTP::Common::BuddyModifyAction value) {
  assert(::PTP::Common::BuddyModifyAction_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.buddy_modify_action_ = value;
}
inline void BuddyModifyReq::set_buddy_modify_action(::PTP::Common::BuddyModifyAction value) {
  _internal_set_buddy_modify_action(value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyModifyReq.buddy_modify_action)
}

// required string value = 4;
inline bool BuddyModifyReq::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BuddyModifyReq::has_value() const {
  return _internal_has_value();
}
inline void BuddyModifyReq::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BuddyModifyReq::value() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyModifyReq.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuddyModifyReq::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyModifyReq.value)
}
inline std::string* BuddyModifyReq::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:PTP.Buddy.BuddyModifyReq.value)
  return _s;
}
inline const std::string& BuddyModifyReq::_internal_value() const {
  return _impl_.value_.Get();
}
inline void BuddyModifyReq::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* BuddyModifyReq::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* BuddyModifyReq::release_value() {
  // @@protoc_insertion_point(field_release:PTP.Buddy.BuddyModifyReq.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BuddyModifyReq::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Buddy.BuddyModifyReq.value)
}

// optional bytes attach_data = 20;
inline bool BuddyModifyReq::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BuddyModifyReq::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void BuddyModifyReq::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BuddyModifyReq::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyModifyReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuddyModifyReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyModifyReq.attach_data)
}
inline std::string* BuddyModifyReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Buddy.BuddyModifyReq.attach_data)
  return _s;
}
inline const std::string& BuddyModifyReq::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void BuddyModifyReq::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* BuddyModifyReq::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* BuddyModifyReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Buddy.BuddyModifyReq.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BuddyModifyReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Buddy.BuddyModifyReq.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool BuddyModifyReq::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BuddyModifyReq::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void BuddyModifyReq::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t BuddyModifyReq::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t BuddyModifyReq::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyModifyReq.auth_uid)
  return _internal_auth_uid();
}
inline void BuddyModifyReq::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.auth_uid_ = value;
}
inline void BuddyModifyReq::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyModifyReq.auth_uid)
}

// -------------------------------------------------------------------

// BuddyModifyRes

// required .PTP.Common.ERR error = 1;
inline bool BuddyModifyRes::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BuddyModifyRes::has_error() const {
  return _internal_has_error();
}
inline void BuddyModifyRes::clear_error() {
  _impl_.error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::PTP::Common::ERR BuddyModifyRes::_internal_error() const {
  return static_cast< ::PTP::Common::ERR >(_impl_.error_);
}
inline ::PTP::Common::ERR BuddyModifyRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyModifyRes.error)
  return _internal_error();
}
inline void BuddyModifyRes::_internal_set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.error_ = value;
}
inline void BuddyModifyRes::set_error(::PTP::Common::ERR value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyModifyRes.error)
}

// required .PTP.Common.BuddyModifyAction buddy_modify_action = 2;
inline bool BuddyModifyRes::_internal_has_buddy_modify_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BuddyModifyRes::has_buddy_modify_action() const {
  return _internal_has_buddy_modify_action();
}
inline void BuddyModifyRes::clear_buddy_modify_action() {
  _impl_.buddy_modify_action_ = 1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::PTP::Common::BuddyModifyAction BuddyModifyRes::_internal_buddy_modify_action() const {
  return static_cast< ::PTP::Common::BuddyModifyAction >(_impl_.buddy_modify_action_);
}
inline ::PTP::Common::BuddyModifyAction BuddyModifyRes::buddy_modify_action() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyModifyRes.buddy_modify_action)
  return _internal_buddy_modify_action();
}
inline void BuddyModifyRes::_internal_set_buddy_modify_action(::PTP::Common::BuddyModifyAction value) {
  assert(::PTP::Common::BuddyModifyAction_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.buddy_modify_action_ = value;
}
inline void BuddyModifyRes::set_buddy_modify_action(::PTP::Common::BuddyModifyAction value) {
  _internal_set_buddy_modify_action(value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyModifyRes.buddy_modify_action)
}

// required string value = 3;
inline bool BuddyModifyRes::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BuddyModifyRes::has_value() const {
  return _internal_has_value();
}
inline void BuddyModifyRes::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BuddyModifyRes::value() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyModifyRes.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuddyModifyRes::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyModifyRes.value)
}
inline std::string* BuddyModifyRes::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:PTP.Buddy.BuddyModifyRes.value)
  return _s;
}
inline const std::string& BuddyModifyRes::_internal_value() const {
  return _impl_.value_.Get();
}
inline void BuddyModifyRes::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* BuddyModifyRes::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* BuddyModifyRes::release_value() {
  // @@protoc_insertion_point(field_release:PTP.Buddy.BuddyModifyRes.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BuddyModifyRes::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Buddy.BuddyModifyRes.value)
}

// repeated uint32 notify_pairs = 5;
inline int BuddyModifyRes::_internal_notify_pairs_size() const {
  return _impl_.notify_pairs_.size();
}
inline int BuddyModifyRes::notify_pairs_size() const {
  return _internal_notify_pairs_size();
}
inline void BuddyModifyRes::clear_notify_pairs() {
  _impl_.notify_pairs_.Clear();
}
inline uint32_t BuddyModifyRes::_internal_notify_pairs(int index) const {
  return _impl_.notify_pairs_.Get(index);
}
inline uint32_t BuddyModifyRes::notify_pairs(int index) const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyModifyRes.notify_pairs)
  return _internal_notify_pairs(index);
}
inline void BuddyModifyRes::set_notify_pairs(int index, uint32_t value) {
  _impl_.notify_pairs_.Set(index, value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyModifyRes.notify_pairs)
}
inline void BuddyModifyRes::_internal_add_notify_pairs(uint32_t value) {
  _impl_.notify_pairs_.Add(value);
}
inline void BuddyModifyRes::add_notify_pairs(uint32_t value) {
  _internal_add_notify_pairs(value);
  // @@protoc_insertion_point(field_add:PTP.Buddy.BuddyModifyRes.notify_pairs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
BuddyModifyRes::_internal_notify_pairs() const {
  return _impl_.notify_pairs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
BuddyModifyRes::notify_pairs() const {
  // @@protoc_insertion_point(field_list:PTP.Buddy.BuddyModifyRes.notify_pairs)
  return _internal_notify_pairs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
BuddyModifyRes::_internal_mutable_notify_pairs() {
  return &_impl_.notify_pairs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
BuddyModifyRes::mutable_notify_pairs() {
  // @@protoc_insertion_point(field_mutable_list:PTP.Buddy.BuddyModifyRes.notify_pairs)
  return _internal_mutable_notify_pairs();
}

// optional bytes attach_data = 20;
inline bool BuddyModifyRes::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BuddyModifyRes::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void BuddyModifyRes::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BuddyModifyRes::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyModifyRes.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuddyModifyRes::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyModifyRes.attach_data)
}
inline std::string* BuddyModifyRes::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Buddy.BuddyModifyRes.attach_data)
  return _s;
}
inline const std::string& BuddyModifyRes::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void BuddyModifyRes::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* BuddyModifyRes::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* BuddyModifyRes::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Buddy.BuddyModifyRes.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BuddyModifyRes::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Buddy.BuddyModifyRes.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool BuddyModifyRes::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BuddyModifyRes::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void BuddyModifyRes::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t BuddyModifyRes::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t BuddyModifyRes::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyModifyRes.auth_uid)
  return _internal_auth_uid();
}
inline void BuddyModifyRes::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.auth_uid_ = value;
}
inline void BuddyModifyRes::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyModifyRes.auth_uid)
}

// -------------------------------------------------------------------

// BuddyModifyNotify

// required .PTP.Common.BuddyModifyAction buddy_modify_action = 1;
inline bool BuddyModifyNotify::_internal_has_buddy_modify_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BuddyModifyNotify::has_buddy_modify_action() const {
  return _internal_has_buddy_modify_action();
}
inline void BuddyModifyNotify::clear_buddy_modify_action() {
  _impl_.buddy_modify_action_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::PTP::Common::BuddyModifyAction BuddyModifyNotify::_internal_buddy_modify_action() const {
  return static_cast< ::PTP::Common::BuddyModifyAction >(_impl_.buddy_modify_action_);
}
inline ::PTP::Common::BuddyModifyAction BuddyModifyNotify::buddy_modify_action() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyModifyNotify.buddy_modify_action)
  return _internal_buddy_modify_action();
}
inline void BuddyModifyNotify::_internal_set_buddy_modify_action(::PTP::Common::BuddyModifyAction value) {
  assert(::PTP::Common::BuddyModifyAction_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.buddy_modify_action_ = value;
}
inline void BuddyModifyNotify::set_buddy_modify_action(::PTP::Common::BuddyModifyAction value) {
  _internal_set_buddy_modify_action(value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyModifyNotify.buddy_modify_action)
}

// required uint32 uid = 2;
inline bool BuddyModifyNotify::_internal_has_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BuddyModifyNotify::has_uid() const {
  return _internal_has_uid();
}
inline void BuddyModifyNotify::clear_uid() {
  _impl_.uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t BuddyModifyNotify::_internal_uid() const {
  return _impl_.uid_;
}
inline uint32_t BuddyModifyNotify::uid() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyModifyNotify.uid)
  return _internal_uid();
}
inline void BuddyModifyNotify::_internal_set_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.uid_ = value;
}
inline void BuddyModifyNotify::set_uid(uint32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyModifyNotify.uid)
}

// required string value = 4;
inline bool BuddyModifyNotify::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BuddyModifyNotify::has_value() const {
  return _internal_has_value();
}
inline void BuddyModifyNotify::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BuddyModifyNotify::value() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyModifyNotify.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuddyModifyNotify::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyModifyNotify.value)
}
inline std::string* BuddyModifyNotify::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:PTP.Buddy.BuddyModifyNotify.value)
  return _s;
}
inline const std::string& BuddyModifyNotify::_internal_value() const {
  return _impl_.value_.Get();
}
inline void BuddyModifyNotify::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* BuddyModifyNotify::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* BuddyModifyNotify::release_value() {
  // @@protoc_insertion_point(field_release:PTP.Buddy.BuddyModifyNotify.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BuddyModifyNotify::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Buddy.BuddyModifyNotify.value)
}

// -------------------------------------------------------------------

// BuddyModifyUpdatePair

// repeated uint32 pair_uid_list = 1;
inline int BuddyModifyUpdatePair::_internal_pair_uid_list_size() const {
  return _impl_.pair_uid_list_.size();
}
inline int BuddyModifyUpdatePair::pair_uid_list_size() const {
  return _internal_pair_uid_list_size();
}
inline void BuddyModifyUpdatePair::clear_pair_uid_list() {
  _impl_.pair_uid_list_.Clear();
}
inline uint32_t BuddyModifyUpdatePair::_internal_pair_uid_list(int index) const {
  return _impl_.pair_uid_list_.Get(index);
}
inline uint32_t BuddyModifyUpdatePair::pair_uid_list(int index) const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyModifyUpdatePair.pair_uid_list)
  return _internal_pair_uid_list(index);
}
inline void BuddyModifyUpdatePair::set_pair_uid_list(int index, uint32_t value) {
  _impl_.pair_uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyModifyUpdatePair.pair_uid_list)
}
inline void BuddyModifyUpdatePair::_internal_add_pair_uid_list(uint32_t value) {
  _impl_.pair_uid_list_.Add(value);
}
inline void BuddyModifyUpdatePair::add_pair_uid_list(uint32_t value) {
  _internal_add_pair_uid_list(value);
  // @@protoc_insertion_point(field_add:PTP.Buddy.BuddyModifyUpdatePair.pair_uid_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
BuddyModifyUpdatePair::_internal_pair_uid_list() const {
  return _impl_.pair_uid_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
BuddyModifyUpdatePair::pair_uid_list() const {
  // @@protoc_insertion_point(field_list:PTP.Buddy.BuddyModifyUpdatePair.pair_uid_list)
  return _internal_pair_uid_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
BuddyModifyUpdatePair::_internal_mutable_pair_uid_list() {
  return &_impl_.pair_uid_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
BuddyModifyUpdatePair::mutable_pair_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:PTP.Buddy.BuddyModifyUpdatePair.pair_uid_list)
  return _internal_mutable_pair_uid_list();
}

// required uint32 auth_uid = 2;
inline bool BuddyModifyUpdatePair::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BuddyModifyUpdatePair::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void BuddyModifyUpdatePair::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t BuddyModifyUpdatePair::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t BuddyModifyUpdatePair::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyModifyUpdatePair.auth_uid)
  return _internal_auth_uid();
}
inline void BuddyModifyUpdatePair::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.auth_uid_ = value;
}
inline void BuddyModifyUpdatePair::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyModifyUpdatePair.auth_uid)
}

// -------------------------------------------------------------------

// BuddyImportContactsReq

// repeated .PTP.Common.InputPhoneContact phone_contacts = 1;
inline int BuddyImportContactsReq::_internal_phone_contacts_size() const {
  return _impl_.phone_contacts_.size();
}
inline int BuddyImportContactsReq::phone_contacts_size() const {
  return _internal_phone_contacts_size();
}
inline ::PTP::Common::InputPhoneContact* BuddyImportContactsReq::mutable_phone_contacts(int index) {
  // @@protoc_insertion_point(field_mutable:PTP.Buddy.BuddyImportContactsReq.phone_contacts)
  return _impl_.phone_contacts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::InputPhoneContact >*
BuddyImportContactsReq::mutable_phone_contacts() {
  // @@protoc_insertion_point(field_mutable_list:PTP.Buddy.BuddyImportContactsReq.phone_contacts)
  return &_impl_.phone_contacts_;
}
inline const ::PTP::Common::InputPhoneContact& BuddyImportContactsReq::_internal_phone_contacts(int index) const {
  return _impl_.phone_contacts_.Get(index);
}
inline const ::PTP::Common::InputPhoneContact& BuddyImportContactsReq::phone_contacts(int index) const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyImportContactsReq.phone_contacts)
  return _internal_phone_contacts(index);
}
inline ::PTP::Common::InputPhoneContact* BuddyImportContactsReq::_internal_add_phone_contacts() {
  return _impl_.phone_contacts_.Add();
}
inline ::PTP::Common::InputPhoneContact* BuddyImportContactsReq::add_phone_contacts() {
  ::PTP::Common::InputPhoneContact* _add = _internal_add_phone_contacts();
  // @@protoc_insertion_point(field_add:PTP.Buddy.BuddyImportContactsReq.phone_contacts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::InputPhoneContact >&
BuddyImportContactsReq::phone_contacts() const {
  // @@protoc_insertion_point(field_list:PTP.Buddy.BuddyImportContactsReq.phone_contacts)
  return _impl_.phone_contacts_;
}

// optional bytes attach_data = 20;
inline bool BuddyImportContactsReq::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BuddyImportContactsReq::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void BuddyImportContactsReq::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BuddyImportContactsReq::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyImportContactsReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuddyImportContactsReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyImportContactsReq.attach_data)
}
inline std::string* BuddyImportContactsReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Buddy.BuddyImportContactsReq.attach_data)
  return _s;
}
inline const std::string& BuddyImportContactsReq::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void BuddyImportContactsReq::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* BuddyImportContactsReq::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* BuddyImportContactsReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Buddy.BuddyImportContactsReq.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BuddyImportContactsReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Buddy.BuddyImportContactsReq.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool BuddyImportContactsReq::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BuddyImportContactsReq::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void BuddyImportContactsReq::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t BuddyImportContactsReq::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t BuddyImportContactsReq::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyImportContactsReq.auth_uid)
  return _internal_auth_uid();
}
inline void BuddyImportContactsReq::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.auth_uid_ = value;
}
inline void BuddyImportContactsReq::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyImportContactsReq.auth_uid)
}

// -------------------------------------------------------------------

// BuddyImportContactsRes

// required .PTP.Common.ERR error = 1;
inline bool BuddyImportContactsRes::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BuddyImportContactsRes::has_error() const {
  return _internal_has_error();
}
inline void BuddyImportContactsRes::clear_error() {
  _impl_.error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::PTP::Common::ERR BuddyImportContactsRes::_internal_error() const {
  return static_cast< ::PTP::Common::ERR >(_impl_.error_);
}
inline ::PTP::Common::ERR BuddyImportContactsRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyImportContactsRes.error)
  return _internal_error();
}
inline void BuddyImportContactsRes::_internal_set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_ = value;
}
inline void BuddyImportContactsRes::set_error(::PTP::Common::ERR value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyImportContactsRes.error)
}

// optional bytes attach_data = 20;
inline bool BuddyImportContactsRes::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BuddyImportContactsRes::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void BuddyImportContactsRes::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BuddyImportContactsRes::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyImportContactsRes.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuddyImportContactsRes::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyImportContactsRes.attach_data)
}
inline std::string* BuddyImportContactsRes::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Buddy.BuddyImportContactsRes.attach_data)
  return _s;
}
inline const std::string& BuddyImportContactsRes::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void BuddyImportContactsRes::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* BuddyImportContactsRes::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* BuddyImportContactsRes::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Buddy.BuddyImportContactsRes.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BuddyImportContactsRes::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Buddy.BuddyImportContactsRes.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool BuddyImportContactsRes::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BuddyImportContactsRes::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void BuddyImportContactsRes::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t BuddyImportContactsRes::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t BuddyImportContactsRes::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyImportContactsRes.auth_uid)
  return _internal_auth_uid();
}
inline void BuddyImportContactsRes::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.auth_uid_ = value;
}
inline void BuddyImportContactsRes::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyImportContactsRes.auth_uid)
}

// -------------------------------------------------------------------

// BuddyQueryListReq

// required .PTP.Common.BuddyQueryParam params = 1;
inline bool BuddyQueryListReq::_internal_has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline bool BuddyQueryListReq::has_params() const {
  return _internal_has_params();
}
inline const ::PTP::Common::BuddyQueryParam& BuddyQueryListReq::_internal_params() const {
  const ::PTP::Common::BuddyQueryParam* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::PTP::Common::BuddyQueryParam&>(
      ::PTP::Common::_BuddyQueryParam_default_instance_);
}
inline const ::PTP::Common::BuddyQueryParam& BuddyQueryListReq::params() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyQueryListReq.params)
  return _internal_params();
}
inline void BuddyQueryListReq::unsafe_arena_set_allocated_params(
    ::PTP::Common::BuddyQueryParam* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PTP.Buddy.BuddyQueryListReq.params)
}
inline ::PTP::Common::BuddyQueryParam* BuddyQueryListReq::release_params() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PTP::Common::BuddyQueryParam* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PTP::Common::BuddyQueryParam* BuddyQueryListReq::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:PTP.Buddy.BuddyQueryListReq.params)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PTP::Common::BuddyQueryParam* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::PTP::Common::BuddyQueryParam* BuddyQueryListReq::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::PTP::Common::BuddyQueryParam>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::PTP::Common::BuddyQueryParam* BuddyQueryListReq::mutable_params() {
  ::PTP::Common::BuddyQueryParam* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:PTP.Buddy.BuddyQueryListReq.params)
  return _msg;
}
inline void BuddyQueryListReq::set_allocated_params(::PTP::Common::BuddyQueryParam* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:PTP.Buddy.BuddyQueryListReq.params)
}

// optional bytes attach_data = 20;
inline bool BuddyQueryListReq::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BuddyQueryListReq::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void BuddyQueryListReq::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BuddyQueryListReq::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyQueryListReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuddyQueryListReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyQueryListReq.attach_data)
}
inline std::string* BuddyQueryListReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Buddy.BuddyQueryListReq.attach_data)
  return _s;
}
inline const std::string& BuddyQueryListReq::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void BuddyQueryListReq::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* BuddyQueryListReq::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* BuddyQueryListReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Buddy.BuddyQueryListReq.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BuddyQueryListReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Buddy.BuddyQueryListReq.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool BuddyQueryListReq::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BuddyQueryListReq::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void BuddyQueryListReq::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t BuddyQueryListReq::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t BuddyQueryListReq::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyQueryListReq.auth_uid)
  return _internal_auth_uid();
}
inline void BuddyQueryListReq::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.auth_uid_ = value;
}
inline void BuddyQueryListReq::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyQueryListReq.auth_uid)
}

// -------------------------------------------------------------------

// BuddyQueryListRes

// required .PTP.Common.ERR error = 1;
inline bool BuddyQueryListRes::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BuddyQueryListRes::has_error() const {
  return _internal_has_error();
}
inline void BuddyQueryListRes::clear_error() {
  _impl_.error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::PTP::Common::ERR BuddyQueryListRes::_internal_error() const {
  return static_cast< ::PTP::Common::ERR >(_impl_.error_);
}
inline ::PTP::Common::ERR BuddyQueryListRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyQueryListRes.error)
  return _internal_error();
}
inline void BuddyQueryListRes::_internal_set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_ = value;
}
inline void BuddyQueryListRes::set_error(::PTP::Common::ERR value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyQueryListRes.error)
}

// repeated .PTP.Common.UserInfo buddy_list = 2;
inline int BuddyQueryListRes::_internal_buddy_list_size() const {
  return _impl_.buddy_list_.size();
}
inline int BuddyQueryListRes::buddy_list_size() const {
  return _internal_buddy_list_size();
}
inline ::PTP::Common::UserInfo* BuddyQueryListRes::mutable_buddy_list(int index) {
  // @@protoc_insertion_point(field_mutable:PTP.Buddy.BuddyQueryListRes.buddy_list)
  return _impl_.buddy_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::UserInfo >*
BuddyQueryListRes::mutable_buddy_list() {
  // @@protoc_insertion_point(field_mutable_list:PTP.Buddy.BuddyQueryListRes.buddy_list)
  return &_impl_.buddy_list_;
}
inline const ::PTP::Common::UserInfo& BuddyQueryListRes::_internal_buddy_list(int index) const {
  return _impl_.buddy_list_.Get(index);
}
inline const ::PTP::Common::UserInfo& BuddyQueryListRes::buddy_list(int index) const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyQueryListRes.buddy_list)
  return _internal_buddy_list(index);
}
inline ::PTP::Common::UserInfo* BuddyQueryListRes::_internal_add_buddy_list() {
  return _impl_.buddy_list_.Add();
}
inline ::PTP::Common::UserInfo* BuddyQueryListRes::add_buddy_list() {
  ::PTP::Common::UserInfo* _add = _internal_add_buddy_list();
  // @@protoc_insertion_point(field_add:PTP.Buddy.BuddyQueryListRes.buddy_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTP::Common::UserInfo >&
BuddyQueryListRes::buddy_list() const {
  // @@protoc_insertion_point(field_list:PTP.Buddy.BuddyQueryListRes.buddy_list)
  return _impl_.buddy_list_;
}

// optional bytes attach_data = 20;
inline bool BuddyQueryListRes::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BuddyQueryListRes::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void BuddyQueryListRes::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BuddyQueryListRes::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyQueryListRes.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuddyQueryListRes::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyQueryListRes.attach_data)
}
inline std::string* BuddyQueryListRes::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.Buddy.BuddyQueryListRes.attach_data)
  return _s;
}
inline const std::string& BuddyQueryListRes::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void BuddyQueryListRes::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* BuddyQueryListRes::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* BuddyQueryListRes::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.Buddy.BuddyQueryListRes.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BuddyQueryListRes::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Buddy.BuddyQueryListRes.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool BuddyQueryListRes::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BuddyQueryListRes::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void BuddyQueryListRes::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t BuddyQueryListRes::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t BuddyQueryListRes::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.Buddy.BuddyQueryListRes.auth_uid)
  return _internal_auth_uid();
}
inline void BuddyQueryListRes::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.auth_uid_ = value;
}
inline void BuddyQueryListRes::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.Buddy.BuddyQueryListRes.auth_uid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Buddy
}  // namespace PTP

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PTP_2eBuddy_2eproto
