// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PTP.Other.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PTP_2eOther_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PTP_2eOther_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "PTP.Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PTP_2eOther_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PTP_2eOther_2eproto {
  static const uint32_t offsets[];
};
namespace PTP {
namespace Other {
class CaptchaReq;
struct CaptchaReqDefaultTypeInternal;
extern CaptchaReqDefaultTypeInternal _CaptchaReq_default_instance_;
class CaptchaRes;
struct CaptchaResDefaultTypeInternal;
extern CaptchaResDefaultTypeInternal _CaptchaRes_default_instance_;
class HeartBeatNotify;
struct HeartBeatNotifyDefaultTypeInternal;
extern HeartBeatNotifyDefaultTypeInternal _HeartBeatNotify_default_instance_;
}  // namespace Other
}  // namespace PTP
PROTOBUF_NAMESPACE_OPEN
template<> ::PTP::Other::CaptchaReq* Arena::CreateMaybeMessage<::PTP::Other::CaptchaReq>(Arena*);
template<> ::PTP::Other::CaptchaRes* Arena::CreateMaybeMessage<::PTP::Other::CaptchaRes>(Arena*);
template<> ::PTP::Other::HeartBeatNotify* Arena::CreateMaybeMessage<::PTP::Other::HeartBeatNotify>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PTP {
namespace Other {

// ===================================================================

class HeartBeatNotify final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Other.HeartBeatNotify) */ {
 public:
  inline HeartBeatNotify() : HeartBeatNotify(nullptr) {}
  ~HeartBeatNotify() override;
  explicit PROTOBUF_CONSTEXPR HeartBeatNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartBeatNotify(const HeartBeatNotify& from);
  HeartBeatNotify(HeartBeatNotify&& from) noexcept
    : HeartBeatNotify() {
    *this = ::std::move(from);
  }

  inline HeartBeatNotify& operator=(const HeartBeatNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartBeatNotify& operator=(HeartBeatNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HeartBeatNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartBeatNotify* internal_default_instance() {
    return reinterpret_cast<const HeartBeatNotify*>(
               &_HeartBeatNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HeartBeatNotify& a, HeartBeatNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartBeatNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartBeatNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartBeatNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeartBeatNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HeartBeatNotify& from);
  void MergeFrom(const HeartBeatNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeartBeatNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Other.HeartBeatNotify";
  }
  protected:
  explicit HeartBeatNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PTP.Other.HeartBeatNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eOther_2eproto;
};
// -------------------------------------------------------------------

class CaptchaReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Other.CaptchaReq) */ {
 public:
  inline CaptchaReq() : CaptchaReq(nullptr) {}
  ~CaptchaReq() override;
  explicit PROTOBUF_CONSTEXPR CaptchaReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CaptchaReq(const CaptchaReq& from);
  CaptchaReq(CaptchaReq&& from) noexcept
    : CaptchaReq() {
    *this = ::std::move(from);
  }

  inline CaptchaReq& operator=(const CaptchaReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptchaReq& operator=(CaptchaReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CaptchaReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CaptchaReq* internal_default_instance() {
    return reinterpret_cast<const CaptchaReq*>(
               &_CaptchaReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CaptchaReq& a, CaptchaReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptchaReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaptchaReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CaptchaReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CaptchaReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CaptchaReq& from);
  void MergeFrom(const CaptchaReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CaptchaReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Other.CaptchaReq";
  }
  protected:
  explicit CaptchaReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PTP.Other.CaptchaReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eOther_2eproto;
};
// -------------------------------------------------------------------

class CaptchaRes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Other.CaptchaRes) */ {
 public:
  inline CaptchaRes() : CaptchaRes(nullptr) {}
  ~CaptchaRes() override;
  explicit PROTOBUF_CONSTEXPR CaptchaRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CaptchaRes(const CaptchaRes& from);
  CaptchaRes(CaptchaRes&& from) noexcept
    : CaptchaRes() {
    *this = ::std::move(from);
  }

  inline CaptchaRes& operator=(const CaptchaRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptchaRes& operator=(CaptchaRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CaptchaRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const CaptchaRes* internal_default_instance() {
    return reinterpret_cast<const CaptchaRes*>(
               &_CaptchaRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CaptchaRes& a, CaptchaRes& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptchaRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaptchaRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CaptchaRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CaptchaRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CaptchaRes& from);
  void MergeFrom(const CaptchaRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CaptchaRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Other.CaptchaRes";
  }
  protected:
  explicit CaptchaRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaptchaFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // required string captcha = 1;
  bool has_captcha() const;
  private:
  bool _internal_has_captcha() const;
  public:
  void clear_captcha();
  const std::string& captcha() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_captcha(ArgT0&& arg0, ArgT... args);
  std::string* mutable_captcha();
  PROTOBUF_NODISCARD std::string* release_captcha();
  void set_allocated_captcha(std::string* captcha);
  private:
  const std::string& _internal_captcha() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_captcha(const std::string& value);
  std::string* _internal_mutable_captcha();
  public:

  // required .PTP.Common.ERR error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);
  private:
  ::PTP::Common::ERR _internal_error() const;
  void _internal_set_error(::PTP::Common::ERR value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Other.CaptchaRes)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr captcha_;
    int error_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eOther_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HeartBeatNotify

// -------------------------------------------------------------------

// CaptchaReq

// -------------------------------------------------------------------

// CaptchaRes

// required string captcha = 1;
inline bool CaptchaRes::_internal_has_captcha() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CaptchaRes::has_captcha() const {
  return _internal_has_captcha();
}
inline void CaptchaRes::clear_captcha() {
  _impl_.captcha_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CaptchaRes::captcha() const {
  // @@protoc_insertion_point(field_get:PTP.Other.CaptchaRes.captcha)
  return _internal_captcha();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CaptchaRes::set_captcha(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.captcha_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Other.CaptchaRes.captcha)
}
inline std::string* CaptchaRes::mutable_captcha() {
  std::string* _s = _internal_mutable_captcha();
  // @@protoc_insertion_point(field_mutable:PTP.Other.CaptchaRes.captcha)
  return _s;
}
inline const std::string& CaptchaRes::_internal_captcha() const {
  return _impl_.captcha_.Get();
}
inline void CaptchaRes::_internal_set_captcha(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.captcha_.Set(value, GetArenaForAllocation());
}
inline std::string* CaptchaRes::_internal_mutable_captcha() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.captcha_.Mutable(GetArenaForAllocation());
}
inline std::string* CaptchaRes::release_captcha() {
  // @@protoc_insertion_point(field_release:PTP.Other.CaptchaRes.captcha)
  if (!_internal_has_captcha()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.captcha_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.captcha_.IsDefault()) {
    _impl_.captcha_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CaptchaRes::set_allocated_captcha(std::string* captcha) {
  if (captcha != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.captcha_.SetAllocated(captcha, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.captcha_.IsDefault()) {
    _impl_.captcha_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Other.CaptchaRes.captcha)
}

// required .PTP.Common.ERR error = 2;
inline bool CaptchaRes::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CaptchaRes::has_error() const {
  return _internal_has_error();
}
inline void CaptchaRes::clear_error() {
  _impl_.error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::PTP::Common::ERR CaptchaRes::_internal_error() const {
  return static_cast< ::PTP::Common::ERR >(_impl_.error_);
}
inline ::PTP::Common::ERR CaptchaRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.Other.CaptchaRes.error)
  return _internal_error();
}
inline void CaptchaRes::_internal_set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_ = value;
}
inline void CaptchaRes::set_error(::PTP::Common::ERR value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:PTP.Other.CaptchaRes.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Other
}  // namespace PTP

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PTP_2eOther_2eproto
