// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PTP.File.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PTP_2eFile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PTP_2eFile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "PTP.Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PTP_2eFile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PTP_2eFile_2eproto {
  static const uint32_t offsets[];
};
namespace PTP {
namespace File {
class FileImgDownloadReq;
struct FileImgDownloadReqDefaultTypeInternal;
extern FileImgDownloadReqDefaultTypeInternal _FileImgDownloadReq_default_instance_;
class FileImgDownloadRes;
struct FileImgDownloadResDefaultTypeInternal;
extern FileImgDownloadResDefaultTypeInternal _FileImgDownloadRes_default_instance_;
class FileImgUploadReq;
struct FileImgUploadReqDefaultTypeInternal;
extern FileImgUploadReqDefaultTypeInternal _FileImgUploadReq_default_instance_;
class FileImgUploadRes;
struct FileImgUploadResDefaultTypeInternal;
extern FileImgUploadResDefaultTypeInternal _FileImgUploadRes_default_instance_;
}  // namespace File
}  // namespace PTP
PROTOBUF_NAMESPACE_OPEN
template<> ::PTP::File::FileImgDownloadReq* Arena::CreateMaybeMessage<::PTP::File::FileImgDownloadReq>(Arena*);
template<> ::PTP::File::FileImgDownloadRes* Arena::CreateMaybeMessage<::PTP::File::FileImgDownloadRes>(Arena*);
template<> ::PTP::File::FileImgUploadReq* Arena::CreateMaybeMessage<::PTP::File::FileImgUploadReq>(Arena*);
template<> ::PTP::File::FileImgUploadRes* Arena::CreateMaybeMessage<::PTP::File::FileImgUploadRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PTP {
namespace File {

// ===================================================================

class FileImgUploadReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.File.FileImgUploadReq) */ {
 public:
  inline FileImgUploadReq() : FileImgUploadReq(nullptr) {}
  ~FileImgUploadReq() override;
  explicit PROTOBUF_CONSTEXPR FileImgUploadReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileImgUploadReq(const FileImgUploadReq& from);
  FileImgUploadReq(FileImgUploadReq&& from) noexcept
    : FileImgUploadReq() {
    *this = ::std::move(from);
  }

  inline FileImgUploadReq& operator=(const FileImgUploadReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileImgUploadReq& operator=(FileImgUploadReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FileImgUploadReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileImgUploadReq* internal_default_instance() {
    return reinterpret_cast<const FileImgUploadReq*>(
               &_FileImgUploadReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileImgUploadReq& a, FileImgUploadReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FileImgUploadReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileImgUploadReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileImgUploadReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileImgUploadReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FileImgUploadReq& from);
  void MergeFrom(const FileImgUploadReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileImgUploadReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.File.FileImgUploadReq";
  }
  protected:
  explicit FileImgUploadReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileIdFieldNumber = 1,
    kFileDataFieldNumber = 4,
    kAttachDataFieldNumber = 20,
    kFilePartFieldNumber = 2,
    kFileTotalPartsFieldNumber = 3,
    kAuthUidFieldNumber = 21,
  };
  // required string file_id = 1;
  bool has_file_id() const;
  private:
  bool _internal_has_file_id() const;
  public:
  void clear_file_id();
  const std::string& file_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_id();
  PROTOBUF_NODISCARD std::string* release_file_id();
  void set_allocated_file_id(std::string* file_id);
  private:
  const std::string& _internal_file_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_id(const std::string& value);
  std::string* _internal_mutable_file_id();
  public:

  // required bytes file_data = 4;
  bool has_file_data() const;
  private:
  bool _internal_has_file_data() const;
  public:
  void clear_file_data();
  const std::string& file_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_data();
  PROTOBUF_NODISCARD std::string* release_file_data();
  void set_allocated_file_data(std::string* file_data);
  private:
  const std::string& _internal_file_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_data(const std::string& value);
  std::string* _internal_mutable_file_data();
  public:

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required uint32 file_part = 2;
  bool has_file_part() const;
  private:
  bool _internal_has_file_part() const;
  public:
  void clear_file_part();
  uint32_t file_part() const;
  void set_file_part(uint32_t value);
  private:
  uint32_t _internal_file_part() const;
  void _internal_set_file_part(uint32_t value);
  public:

  // required uint32 file_total_parts = 3;
  bool has_file_total_parts() const;
  private:
  bool _internal_has_file_total_parts() const;
  public:
  void clear_file_total_parts();
  uint32_t file_total_parts() const;
  void set_file_total_parts(uint32_t value);
  private:
  uint32_t _internal_file_total_parts() const;
  void _internal_set_file_total_parts(uint32_t value);
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.File.FileImgUploadReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t file_part_;
    uint32_t file_total_parts_;
    uint32_t auth_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eFile_2eproto;
};
// -------------------------------------------------------------------

class FileImgUploadRes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.File.FileImgUploadRes) */ {
 public:
  inline FileImgUploadRes() : FileImgUploadRes(nullptr) {}
  ~FileImgUploadRes() override;
  explicit PROTOBUF_CONSTEXPR FileImgUploadRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileImgUploadRes(const FileImgUploadRes& from);
  FileImgUploadRes(FileImgUploadRes&& from) noexcept
    : FileImgUploadRes() {
    *this = ::std::move(from);
  }

  inline FileImgUploadRes& operator=(const FileImgUploadRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileImgUploadRes& operator=(FileImgUploadRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FileImgUploadRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileImgUploadRes* internal_default_instance() {
    return reinterpret_cast<const FileImgUploadRes*>(
               &_FileImgUploadRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileImgUploadRes& a, FileImgUploadRes& b) {
    a.Swap(&b);
  }
  inline void Swap(FileImgUploadRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileImgUploadRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileImgUploadRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileImgUploadRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FileImgUploadRes& from);
  void MergeFrom(const FileImgUploadRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileImgUploadRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.File.FileImgUploadRes";
  }
  protected:
  explicit FileImgUploadRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePathFieldNumber = 2,
    kAttachDataFieldNumber = 20,
    kErrorFieldNumber = 1,
    kAuthUidFieldNumber = 21,
  };
  // required string file_path = 2;
  bool has_file_path() const;
  private:
  bool _internal_has_file_path() const;
  public:
  void clear_file_path();
  const std::string& file_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_path();
  PROTOBUF_NODISCARD std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);
  private:
  const std::string& _internal_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_path(const std::string& value);
  std::string* _internal_mutable_file_path();
  public:

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // optional .PTP.Common.ERR error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);
  private:
  ::PTP::Common::ERR _internal_error() const;
  void _internal_set_error(::PTP::Common::ERR value);
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.File.FileImgUploadRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    int error_;
    uint32_t auth_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eFile_2eproto;
};
// -------------------------------------------------------------------

class FileImgDownloadReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.File.FileImgDownloadReq) */ {
 public:
  inline FileImgDownloadReq() : FileImgDownloadReq(nullptr) {}
  ~FileImgDownloadReq() override;
  explicit PROTOBUF_CONSTEXPR FileImgDownloadReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileImgDownloadReq(const FileImgDownloadReq& from);
  FileImgDownloadReq(FileImgDownloadReq&& from) noexcept
    : FileImgDownloadReq() {
    *this = ::std::move(from);
  }

  inline FileImgDownloadReq& operator=(const FileImgDownloadReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileImgDownloadReq& operator=(FileImgDownloadReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FileImgDownloadReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileImgDownloadReq* internal_default_instance() {
    return reinterpret_cast<const FileImgDownloadReq*>(
               &_FileImgDownloadReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileImgDownloadReq& a, FileImgDownloadReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FileImgDownloadReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileImgDownloadReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileImgDownloadReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileImgDownloadReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FileImgDownloadReq& from);
  void MergeFrom(const FileImgDownloadReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileImgDownloadReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.File.FileImgDownloadReq";
  }
  protected:
  explicit FileImgDownloadReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePathFieldNumber = 1,
    kAttachDataFieldNumber = 20,
    kAuthUidFieldNumber = 21,
  };
  // required string file_path = 1;
  bool has_file_path() const;
  private:
  bool _internal_has_file_path() const;
  public:
  void clear_file_path();
  const std::string& file_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_path();
  PROTOBUF_NODISCARD std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);
  private:
  const std::string& _internal_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_path(const std::string& value);
  std::string* _internal_mutable_file_path();
  public:

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.File.FileImgDownloadReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t auth_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eFile_2eproto;
};
// -------------------------------------------------------------------

class FileImgDownloadRes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.File.FileImgDownloadRes) */ {
 public:
  inline FileImgDownloadRes() : FileImgDownloadRes(nullptr) {}
  ~FileImgDownloadRes() override;
  explicit PROTOBUF_CONSTEXPR FileImgDownloadRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileImgDownloadRes(const FileImgDownloadRes& from);
  FileImgDownloadRes(FileImgDownloadRes&& from) noexcept
    : FileImgDownloadRes() {
    *this = ::std::move(from);
  }

  inline FileImgDownloadRes& operator=(const FileImgDownloadRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileImgDownloadRes& operator=(FileImgDownloadRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FileImgDownloadRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileImgDownloadRes* internal_default_instance() {
    return reinterpret_cast<const FileImgDownloadRes*>(
               &_FileImgDownloadRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FileImgDownloadRes& a, FileImgDownloadRes& b) {
    a.Swap(&b);
  }
  inline void Swap(FileImgDownloadRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileImgDownloadRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileImgDownloadRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileImgDownloadRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FileImgDownloadRes& from);
  void MergeFrom(const FileImgDownloadRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileImgDownloadRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.File.FileImgDownloadRes";
  }
  protected:
  explicit FileImgDownloadRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileDataFieldNumber = 2,
    kAttachDataFieldNumber = 20,
    kErrorFieldNumber = 1,
    kAuthUidFieldNumber = 21,
  };
  // optional bytes file_data = 2;
  bool has_file_data() const;
  private:
  bool _internal_has_file_data() const;
  public:
  void clear_file_data();
  const std::string& file_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_data();
  PROTOBUF_NODISCARD std::string* release_file_data();
  void set_allocated_file_data(std::string* file_data);
  private:
  const std::string& _internal_file_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_data(const std::string& value);
  std::string* _internal_mutable_file_data();
  public:

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // optional .PTP.Common.ERR error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);
  private:
  ::PTP::Common::ERR _internal_error() const;
  void _internal_set_error(::PTP::Common::ERR value);
  public:

  // optional uint32 auth_uid = 21;
  bool has_auth_uid() const;
  private:
  bool _internal_has_auth_uid() const;
  public:
  void clear_auth_uid();
  uint32_t auth_uid() const;
  void set_auth_uid(uint32_t value);
  private:
  uint32_t _internal_auth_uid() const;
  void _internal_set_auth_uid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.File.FileImgDownloadRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    int error_;
    uint32_t auth_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eFile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileImgUploadReq

// required string file_id = 1;
inline bool FileImgUploadReq::_internal_has_file_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileImgUploadReq::has_file_id() const {
  return _internal_has_file_id();
}
inline void FileImgUploadReq::clear_file_id() {
  _impl_.file_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileImgUploadReq::file_id() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgUploadReq.file_id)
  return _internal_file_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileImgUploadReq::set_file_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.file_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.File.FileImgUploadReq.file_id)
}
inline std::string* FileImgUploadReq::mutable_file_id() {
  std::string* _s = _internal_mutable_file_id();
  // @@protoc_insertion_point(field_mutable:PTP.File.FileImgUploadReq.file_id)
  return _s;
}
inline const std::string& FileImgUploadReq::_internal_file_id() const {
  return _impl_.file_id_.Get();
}
inline void FileImgUploadReq::_internal_set_file_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.file_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FileImgUploadReq::_internal_mutable_file_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.file_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FileImgUploadReq::release_file_id() {
  // @@protoc_insertion_point(field_release:PTP.File.FileImgUploadReq.file_id)
  if (!_internal_has_file_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.file_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_id_.IsDefault()) {
    _impl_.file_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FileImgUploadReq::set_allocated_file_id(std::string* file_id) {
  if (file_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.file_id_.SetAllocated(file_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_id_.IsDefault()) {
    _impl_.file_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.File.FileImgUploadReq.file_id)
}

// required uint32 file_part = 2;
inline bool FileImgUploadReq::_internal_has_file_part() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FileImgUploadReq::has_file_part() const {
  return _internal_has_file_part();
}
inline void FileImgUploadReq::clear_file_part() {
  _impl_.file_part_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t FileImgUploadReq::_internal_file_part() const {
  return _impl_.file_part_;
}
inline uint32_t FileImgUploadReq::file_part() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgUploadReq.file_part)
  return _internal_file_part();
}
inline void FileImgUploadReq::_internal_set_file_part(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.file_part_ = value;
}
inline void FileImgUploadReq::set_file_part(uint32_t value) {
  _internal_set_file_part(value);
  // @@protoc_insertion_point(field_set:PTP.File.FileImgUploadReq.file_part)
}

// required uint32 file_total_parts = 3;
inline bool FileImgUploadReq::_internal_has_file_total_parts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FileImgUploadReq::has_file_total_parts() const {
  return _internal_has_file_total_parts();
}
inline void FileImgUploadReq::clear_file_total_parts() {
  _impl_.file_total_parts_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t FileImgUploadReq::_internal_file_total_parts() const {
  return _impl_.file_total_parts_;
}
inline uint32_t FileImgUploadReq::file_total_parts() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgUploadReq.file_total_parts)
  return _internal_file_total_parts();
}
inline void FileImgUploadReq::_internal_set_file_total_parts(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.file_total_parts_ = value;
}
inline void FileImgUploadReq::set_file_total_parts(uint32_t value) {
  _internal_set_file_total_parts(value);
  // @@protoc_insertion_point(field_set:PTP.File.FileImgUploadReq.file_total_parts)
}

// required bytes file_data = 4;
inline bool FileImgUploadReq::_internal_has_file_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FileImgUploadReq::has_file_data() const {
  return _internal_has_file_data();
}
inline void FileImgUploadReq::clear_file_data() {
  _impl_.file_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FileImgUploadReq::file_data() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgUploadReq.file_data)
  return _internal_file_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileImgUploadReq::set_file_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.file_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.File.FileImgUploadReq.file_data)
}
inline std::string* FileImgUploadReq::mutable_file_data() {
  std::string* _s = _internal_mutable_file_data();
  // @@protoc_insertion_point(field_mutable:PTP.File.FileImgUploadReq.file_data)
  return _s;
}
inline const std::string& FileImgUploadReq::_internal_file_data() const {
  return _impl_.file_data_.Get();
}
inline void FileImgUploadReq::_internal_set_file_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.file_data_.Set(value, GetArenaForAllocation());
}
inline std::string* FileImgUploadReq::_internal_mutable_file_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.file_data_.Mutable(GetArenaForAllocation());
}
inline std::string* FileImgUploadReq::release_file_data() {
  // @@protoc_insertion_point(field_release:PTP.File.FileImgUploadReq.file_data)
  if (!_internal_has_file_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.file_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_data_.IsDefault()) {
    _impl_.file_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FileImgUploadReq::set_allocated_file_data(std::string* file_data) {
  if (file_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.file_data_.SetAllocated(file_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_data_.IsDefault()) {
    _impl_.file_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.File.FileImgUploadReq.file_data)
}

// optional bytes attach_data = 20;
inline bool FileImgUploadReq::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FileImgUploadReq::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void FileImgUploadReq::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FileImgUploadReq::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgUploadReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileImgUploadReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.File.FileImgUploadReq.attach_data)
}
inline std::string* FileImgUploadReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.File.FileImgUploadReq.attach_data)
  return _s;
}
inline const std::string& FileImgUploadReq::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void FileImgUploadReq::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* FileImgUploadReq::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* FileImgUploadReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.File.FileImgUploadReq.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FileImgUploadReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.File.FileImgUploadReq.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool FileImgUploadReq::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FileImgUploadReq::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void FileImgUploadReq::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t FileImgUploadReq::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t FileImgUploadReq::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgUploadReq.auth_uid)
  return _internal_auth_uid();
}
inline void FileImgUploadReq::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.auth_uid_ = value;
}
inline void FileImgUploadReq::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.File.FileImgUploadReq.auth_uid)
}

// -------------------------------------------------------------------

// FileImgUploadRes

// optional .PTP.Common.ERR error = 1;
inline bool FileImgUploadRes::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FileImgUploadRes::has_error() const {
  return _internal_has_error();
}
inline void FileImgUploadRes::clear_error() {
  _impl_.error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::PTP::Common::ERR FileImgUploadRes::_internal_error() const {
  return static_cast< ::PTP::Common::ERR >(_impl_.error_);
}
inline ::PTP::Common::ERR FileImgUploadRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgUploadRes.error)
  return _internal_error();
}
inline void FileImgUploadRes::_internal_set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.error_ = value;
}
inline void FileImgUploadRes::set_error(::PTP::Common::ERR value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:PTP.File.FileImgUploadRes.error)
}

// required string file_path = 2;
inline bool FileImgUploadRes::_internal_has_file_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileImgUploadRes::has_file_path() const {
  return _internal_has_file_path();
}
inline void FileImgUploadRes::clear_file_path() {
  _impl_.file_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileImgUploadRes::file_path() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgUploadRes.file_path)
  return _internal_file_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileImgUploadRes::set_file_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.file_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.File.FileImgUploadRes.file_path)
}
inline std::string* FileImgUploadRes::mutable_file_path() {
  std::string* _s = _internal_mutable_file_path();
  // @@protoc_insertion_point(field_mutable:PTP.File.FileImgUploadRes.file_path)
  return _s;
}
inline const std::string& FileImgUploadRes::_internal_file_path() const {
  return _impl_.file_path_.Get();
}
inline void FileImgUploadRes::_internal_set_file_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.file_path_.Set(value, GetArenaForAllocation());
}
inline std::string* FileImgUploadRes::_internal_mutable_file_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.file_path_.Mutable(GetArenaForAllocation());
}
inline std::string* FileImgUploadRes::release_file_path() {
  // @@protoc_insertion_point(field_release:PTP.File.FileImgUploadRes.file_path)
  if (!_internal_has_file_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.file_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_path_.IsDefault()) {
    _impl_.file_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FileImgUploadRes::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.file_path_.SetAllocated(file_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_path_.IsDefault()) {
    _impl_.file_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.File.FileImgUploadRes.file_path)
}

// optional bytes attach_data = 20;
inline bool FileImgUploadRes::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FileImgUploadRes::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void FileImgUploadRes::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FileImgUploadRes::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgUploadRes.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileImgUploadRes::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.File.FileImgUploadRes.attach_data)
}
inline std::string* FileImgUploadRes::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.File.FileImgUploadRes.attach_data)
  return _s;
}
inline const std::string& FileImgUploadRes::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void FileImgUploadRes::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* FileImgUploadRes::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* FileImgUploadRes::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.File.FileImgUploadRes.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FileImgUploadRes::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.File.FileImgUploadRes.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool FileImgUploadRes::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FileImgUploadRes::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void FileImgUploadRes::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t FileImgUploadRes::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t FileImgUploadRes::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgUploadRes.auth_uid)
  return _internal_auth_uid();
}
inline void FileImgUploadRes::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.auth_uid_ = value;
}
inline void FileImgUploadRes::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.File.FileImgUploadRes.auth_uid)
}

// -------------------------------------------------------------------

// FileImgDownloadReq

// required string file_path = 1;
inline bool FileImgDownloadReq::_internal_has_file_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileImgDownloadReq::has_file_path() const {
  return _internal_has_file_path();
}
inline void FileImgDownloadReq::clear_file_path() {
  _impl_.file_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileImgDownloadReq::file_path() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgDownloadReq.file_path)
  return _internal_file_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileImgDownloadReq::set_file_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.file_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.File.FileImgDownloadReq.file_path)
}
inline std::string* FileImgDownloadReq::mutable_file_path() {
  std::string* _s = _internal_mutable_file_path();
  // @@protoc_insertion_point(field_mutable:PTP.File.FileImgDownloadReq.file_path)
  return _s;
}
inline const std::string& FileImgDownloadReq::_internal_file_path() const {
  return _impl_.file_path_.Get();
}
inline void FileImgDownloadReq::_internal_set_file_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.file_path_.Set(value, GetArenaForAllocation());
}
inline std::string* FileImgDownloadReq::_internal_mutable_file_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.file_path_.Mutable(GetArenaForAllocation());
}
inline std::string* FileImgDownloadReq::release_file_path() {
  // @@protoc_insertion_point(field_release:PTP.File.FileImgDownloadReq.file_path)
  if (!_internal_has_file_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.file_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_path_.IsDefault()) {
    _impl_.file_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FileImgDownloadReq::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.file_path_.SetAllocated(file_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_path_.IsDefault()) {
    _impl_.file_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.File.FileImgDownloadReq.file_path)
}

// optional bytes attach_data = 20;
inline bool FileImgDownloadReq::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FileImgDownloadReq::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void FileImgDownloadReq::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FileImgDownloadReq::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgDownloadReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileImgDownloadReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.File.FileImgDownloadReq.attach_data)
}
inline std::string* FileImgDownloadReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.File.FileImgDownloadReq.attach_data)
  return _s;
}
inline const std::string& FileImgDownloadReq::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void FileImgDownloadReq::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* FileImgDownloadReq::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* FileImgDownloadReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.File.FileImgDownloadReq.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FileImgDownloadReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.File.FileImgDownloadReq.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool FileImgDownloadReq::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FileImgDownloadReq::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void FileImgDownloadReq::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t FileImgDownloadReq::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t FileImgDownloadReq::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgDownloadReq.auth_uid)
  return _internal_auth_uid();
}
inline void FileImgDownloadReq::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.auth_uid_ = value;
}
inline void FileImgDownloadReq::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.File.FileImgDownloadReq.auth_uid)
}

// -------------------------------------------------------------------

// FileImgDownloadRes

// optional .PTP.Common.ERR error = 1;
inline bool FileImgDownloadRes::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FileImgDownloadRes::has_error() const {
  return _internal_has_error();
}
inline void FileImgDownloadRes::clear_error() {
  _impl_.error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::PTP::Common::ERR FileImgDownloadRes::_internal_error() const {
  return static_cast< ::PTP::Common::ERR >(_impl_.error_);
}
inline ::PTP::Common::ERR FileImgDownloadRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgDownloadRes.error)
  return _internal_error();
}
inline void FileImgDownloadRes::_internal_set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.error_ = value;
}
inline void FileImgDownloadRes::set_error(::PTP::Common::ERR value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:PTP.File.FileImgDownloadRes.error)
}

// optional bytes file_data = 2;
inline bool FileImgDownloadRes::_internal_has_file_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileImgDownloadRes::has_file_data() const {
  return _internal_has_file_data();
}
inline void FileImgDownloadRes::clear_file_data() {
  _impl_.file_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileImgDownloadRes::file_data() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgDownloadRes.file_data)
  return _internal_file_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileImgDownloadRes::set_file_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.file_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.File.FileImgDownloadRes.file_data)
}
inline std::string* FileImgDownloadRes::mutable_file_data() {
  std::string* _s = _internal_mutable_file_data();
  // @@protoc_insertion_point(field_mutable:PTP.File.FileImgDownloadRes.file_data)
  return _s;
}
inline const std::string& FileImgDownloadRes::_internal_file_data() const {
  return _impl_.file_data_.Get();
}
inline void FileImgDownloadRes::_internal_set_file_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.file_data_.Set(value, GetArenaForAllocation());
}
inline std::string* FileImgDownloadRes::_internal_mutable_file_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.file_data_.Mutable(GetArenaForAllocation());
}
inline std::string* FileImgDownloadRes::release_file_data() {
  // @@protoc_insertion_point(field_release:PTP.File.FileImgDownloadRes.file_data)
  if (!_internal_has_file_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.file_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_data_.IsDefault()) {
    _impl_.file_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FileImgDownloadRes::set_allocated_file_data(std::string* file_data) {
  if (file_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.file_data_.SetAllocated(file_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_data_.IsDefault()) {
    _impl_.file_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.File.FileImgDownloadRes.file_data)
}

// optional bytes attach_data = 20;
inline bool FileImgDownloadRes::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FileImgDownloadRes::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void FileImgDownloadRes::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FileImgDownloadRes::attach_data() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgDownloadRes.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileImgDownloadRes::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.File.FileImgDownloadRes.attach_data)
}
inline std::string* FileImgDownloadRes::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:PTP.File.FileImgDownloadRes.attach_data)
  return _s;
}
inline const std::string& FileImgDownloadRes::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void FileImgDownloadRes::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* FileImgDownloadRes::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* FileImgDownloadRes::release_attach_data() {
  // @@protoc_insertion_point(field_release:PTP.File.FileImgDownloadRes.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FileImgDownloadRes::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.File.FileImgDownloadRes.attach_data)
}

// optional uint32 auth_uid = 21;
inline bool FileImgDownloadRes::_internal_has_auth_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FileImgDownloadRes::has_auth_uid() const {
  return _internal_has_auth_uid();
}
inline void FileImgDownloadRes::clear_auth_uid() {
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t FileImgDownloadRes::_internal_auth_uid() const {
  return _impl_.auth_uid_;
}
inline uint32_t FileImgDownloadRes::auth_uid() const {
  // @@protoc_insertion_point(field_get:PTP.File.FileImgDownloadRes.auth_uid)
  return _internal_auth_uid();
}
inline void FileImgDownloadRes::_internal_set_auth_uid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.auth_uid_ = value;
}
inline void FileImgDownloadRes::set_auth_uid(uint32_t value) {
  _internal_set_auth_uid(value);
  // @@protoc_insertion_point(field_set:PTP.File.FileImgDownloadRes.auth_uid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace File
}  // namespace PTP

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PTP_2eFile_2eproto
