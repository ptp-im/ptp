// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PTP.Auth.proto

#ifndef PROTOBUF_INCLUDED_PTP_2eAuth_2eproto
#define PROTOBUF_INCLUDED_PTP_2eAuth_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "PTP.Common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_PTP_2eAuth_2eproto 

namespace protobuf_PTP_2eAuth_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_PTP_2eAuth_2eproto
namespace PTP {
namespace Auth {
class AuthCaptchaReq;
class AuthCaptchaReqDefaultTypeInternal;
extern AuthCaptchaReqDefaultTypeInternal _AuthCaptchaReq_default_instance_;
class AuthCaptchaRes;
class AuthCaptchaResDefaultTypeInternal;
extern AuthCaptchaResDefaultTypeInternal _AuthCaptchaRes_default_instance_;
class AuthLoginReq;
class AuthLoginReqDefaultTypeInternal;
extern AuthLoginReqDefaultTypeInternal _AuthLoginReq_default_instance_;
class AuthLoginRes;
class AuthLoginResDefaultTypeInternal;
extern AuthLoginResDefaultTypeInternal _AuthLoginRes_default_instance_;
class AuthLogoutReq;
class AuthLogoutReqDefaultTypeInternal;
extern AuthLogoutReqDefaultTypeInternal _AuthLogoutReq_default_instance_;
class AuthLogoutRes;
class AuthLogoutResDefaultTypeInternal;
extern AuthLogoutResDefaultTypeInternal _AuthLogoutRes_default_instance_;
}  // namespace Auth
}  // namespace PTP
namespace google {
namespace protobuf {
template<> ::PTP::Auth::AuthCaptchaReq* Arena::CreateMaybeMessage<::PTP::Auth::AuthCaptchaReq>(Arena*);
template<> ::PTP::Auth::AuthCaptchaRes* Arena::CreateMaybeMessage<::PTP::Auth::AuthCaptchaRes>(Arena*);
template<> ::PTP::Auth::AuthLoginReq* Arena::CreateMaybeMessage<::PTP::Auth::AuthLoginReq>(Arena*);
template<> ::PTP::Auth::AuthLoginRes* Arena::CreateMaybeMessage<::PTP::Auth::AuthLoginRes>(Arena*);
template<> ::PTP::Auth::AuthLogoutReq* Arena::CreateMaybeMessage<::PTP::Auth::AuthLogoutReq>(Arena*);
template<> ::PTP::Auth::AuthLogoutRes* Arena::CreateMaybeMessage<::PTP::Auth::AuthLogoutRes>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace PTP {
namespace Auth {

// ===================================================================

class AuthCaptchaReq : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Auth.AuthCaptchaReq) */ {
 public:
  AuthCaptchaReq();
  virtual ~AuthCaptchaReq();

  AuthCaptchaReq(const AuthCaptchaReq& from);

  inline AuthCaptchaReq& operator=(const AuthCaptchaReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthCaptchaReq(AuthCaptchaReq&& from) noexcept
    : AuthCaptchaReq() {
    *this = ::std::move(from);
  }

  inline AuthCaptchaReq& operator=(AuthCaptchaReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AuthCaptchaReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthCaptchaReq* internal_default_instance() {
    return reinterpret_cast<const AuthCaptchaReq*>(
               &_AuthCaptchaReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AuthCaptchaReq* other);
  friend void swap(AuthCaptchaReq& a, AuthCaptchaReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthCaptchaReq* New() const final {
    return CreateMaybeMessage<AuthCaptchaReq>(NULL);
  }

  AuthCaptchaReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthCaptchaReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AuthCaptchaReq& from);
  void MergeFrom(const AuthCaptchaReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthCaptchaReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PTP.Auth.AuthCaptchaReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_PTP_2eAuth_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthCaptchaRes : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Auth.AuthCaptchaRes) */ {
 public:
  AuthCaptchaRes();
  virtual ~AuthCaptchaRes();

  AuthCaptchaRes(const AuthCaptchaRes& from);

  inline AuthCaptchaRes& operator=(const AuthCaptchaRes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthCaptchaRes(AuthCaptchaRes&& from) noexcept
    : AuthCaptchaRes() {
    *this = ::std::move(from);
  }

  inline AuthCaptchaRes& operator=(AuthCaptchaRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AuthCaptchaRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthCaptchaRes* internal_default_instance() {
    return reinterpret_cast<const AuthCaptchaRes*>(
               &_AuthCaptchaRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AuthCaptchaRes* other);
  friend void swap(AuthCaptchaRes& a, AuthCaptchaRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthCaptchaRes* New() const final {
    return CreateMaybeMessage<AuthCaptchaRes>(NULL);
  }

  AuthCaptchaRes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthCaptchaRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AuthCaptchaRes& from);
  void MergeFrom(const AuthCaptchaRes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthCaptchaRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string captcha = 1;
  bool has_captcha() const;
  void clear_captcha();
  static const int kCaptchaFieldNumber = 1;
  const ::std::string& captcha() const;
  void set_captcha(const ::std::string& value);
  #if LANG_CXX11
  void set_captcha(::std::string&& value);
  #endif
  void set_captcha(const char* value);
  void set_captcha(const char* value, size_t size);
  ::std::string* mutable_captcha();
  ::std::string* release_captcha();
  void set_allocated_captcha(::std::string* captcha);

  // required bytes address = 2;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // required bytes iv = 3;
  bool has_iv() const;
  void clear_iv();
  static const int kIvFieldNumber = 3;
  const ::std::string& iv() const;
  void set_iv(const ::std::string& value);
  #if LANG_CXX11
  void set_iv(::std::string&& value);
  #endif
  void set_iv(const char* value);
  void set_iv(const void* value, size_t size);
  ::std::string* mutable_iv();
  ::std::string* release_iv();
  void set_allocated_iv(::std::string* iv);

  // required bytes aad = 4;
  bool has_aad() const;
  void clear_aad();
  static const int kAadFieldNumber = 4;
  const ::std::string& aad() const;
  void set_aad(const ::std::string& value);
  #if LANG_CXX11
  void set_aad(::std::string&& value);
  #endif
  void set_aad(const char* value);
  void set_aad(const void* value, size_t size);
  ::std::string* mutable_aad();
  ::std::string* release_aad();
  void set_allocated_aad(::std::string* aad);

  // required bytes sign = 5;
  bool has_sign() const;
  void clear_sign();
  static const int kSignFieldNumber = 5;
  const ::std::string& sign() const;
  void set_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_sign(::std::string&& value);
  #endif
  void set_sign(const char* value);
  void set_sign(const void* value, size_t size);
  ::std::string* mutable_sign();
  ::std::string* release_sign();
  void set_allocated_sign(::std::string* sign);

  // required .PTP.Common.ERR error = 6;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 6;
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);

  // @@protoc_insertion_point(class_scope:PTP.Auth.AuthCaptchaRes)
 private:
  void set_has_captcha();
  void clear_has_captcha();
  void set_has_address();
  void clear_has_address();
  void set_has_iv();
  void clear_has_iv();
  void set_has_aad();
  void clear_has_aad();
  void set_has_sign();
  void clear_has_sign();
  void set_has_error();
  void clear_has_error();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr captcha_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr iv_;
  ::google::protobuf::internal::ArenaStringPtr aad_;
  ::google::protobuf::internal::ArenaStringPtr sign_;
  int error_;
  friend struct ::protobuf_PTP_2eAuth_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthLoginReq : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Auth.AuthLoginReq) */ {
 public:
  AuthLoginReq();
  virtual ~AuthLoginReq();

  AuthLoginReq(const AuthLoginReq& from);

  inline AuthLoginReq& operator=(const AuthLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthLoginReq(AuthLoginReq&& from) noexcept
    : AuthLoginReq() {
    *this = ::std::move(from);
  }

  inline AuthLoginReq& operator=(AuthLoginReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AuthLoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthLoginReq* internal_default_instance() {
    return reinterpret_cast<const AuthLoginReq*>(
               &_AuthLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AuthLoginReq* other);
  friend void swap(AuthLoginReq& a, AuthLoginReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthLoginReq* New() const final {
    return CreateMaybeMessage<AuthLoginReq>(NULL);
  }

  AuthLoginReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthLoginReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AuthLoginReq& from);
  void MergeFrom(const AuthLoginReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthLoginReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string address = 1;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // required string captcha = 2;
  bool has_captcha() const;
  void clear_captcha();
  static const int kCaptchaFieldNumber = 2;
  const ::std::string& captcha() const;
  void set_captcha(const ::std::string& value);
  #if LANG_CXX11
  void set_captcha(::std::string&& value);
  #endif
  void set_captcha(const char* value);
  void set_captcha(const char* value, size_t size);
  ::std::string* mutable_captcha();
  ::std::string* release_captcha();
  void set_allocated_captcha(::std::string* captcha);

  // optional string client_version = 5;
  bool has_client_version() const;
  void clear_client_version();
  static const int kClientVersionFieldNumber = 5;
  const ::std::string& client_version() const;
  void set_client_version(const ::std::string& value);
  #if LANG_CXX11
  void set_client_version(::std::string&& value);
  #endif
  void set_client_version(const char* value);
  void set_client_version(const char* value, size_t size);
  ::std::string* mutable_client_version();
  ::std::string* release_client_version();
  void set_allocated_client_version(::std::string* client_version);

  // required bytes sign = 6;
  bool has_sign() const;
  void clear_sign();
  static const int kSignFieldNumber = 6;
  const ::std::string& sign() const;
  void set_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_sign(::std::string&& value);
  #endif
  void set_sign(const char* value);
  void set_sign(const void* value, size_t size);
  ::std::string* mutable_sign();
  ::std::string* release_sign();
  void set_allocated_sign(::std::string* sign);

  // required .PTP.Common.ClientType client_type = 3;
  bool has_client_type() const;
  void clear_client_type();
  static const int kClientTypeFieldNumber = 3;
  ::PTP::Common::ClientType client_type() const;
  void set_client_type(::PTP::Common::ClientType value);

  // @@protoc_insertion_point(class_scope:PTP.Auth.AuthLoginReq)
 private:
  void set_has_address();
  void clear_has_address();
  void set_has_captcha();
  void clear_has_captcha();
  void set_has_client_type();
  void clear_has_client_type();
  void set_has_client_version();
  void clear_has_client_version();
  void set_has_sign();
  void clear_has_sign();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr captcha_;
  ::google::protobuf::internal::ArenaStringPtr client_version_;
  ::google::protobuf::internal::ArenaStringPtr sign_;
  int client_type_;
  friend struct ::protobuf_PTP_2eAuth_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthLoginRes : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Auth.AuthLoginRes) */ {
 public:
  AuthLoginRes();
  virtual ~AuthLoginRes();

  AuthLoginRes(const AuthLoginRes& from);

  inline AuthLoginRes& operator=(const AuthLoginRes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthLoginRes(AuthLoginRes&& from) noexcept
    : AuthLoginRes() {
    *this = ::std::move(from);
  }

  inline AuthLoginRes& operator=(AuthLoginRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AuthLoginRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthLoginRes* internal_default_instance() {
    return reinterpret_cast<const AuthLoginRes*>(
               &_AuthLoginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AuthLoginRes* other);
  friend void swap(AuthLoginRes& a, AuthLoginRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthLoginRes* New() const final {
    return CreateMaybeMessage<AuthLoginRes>(NULL);
  }

  AuthLoginRes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthLoginRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AuthLoginRes& from);
  void MergeFrom(const AuthLoginRes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthLoginRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PTP.Common.UserInfo user_info = 5;
  bool has_user_info() const;
  void clear_user_info();
  static const int kUserInfoFieldNumber = 5;
  private:
  const ::PTP::Common::UserInfo& _internal_user_info() const;
  public:
  const ::PTP::Common::UserInfo& user_info() const;
  ::PTP::Common::UserInfo* release_user_info();
  ::PTP::Common::UserInfo* mutable_user_info();
  void set_allocated_user_info(::PTP::Common::UserInfo* user_info);

  // required .PTP.Common.ERR error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);

  // @@protoc_insertion_point(class_scope:PTP.Auth.AuthLoginRes)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_user_info();
  void clear_has_user_info();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::PTP::Common::UserInfo* user_info_;
  int error_;
  friend struct ::protobuf_PTP_2eAuth_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthLogoutReq : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Auth.AuthLogoutReq) */ {
 public:
  AuthLogoutReq();
  virtual ~AuthLogoutReq();

  AuthLogoutReq(const AuthLogoutReq& from);

  inline AuthLogoutReq& operator=(const AuthLogoutReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthLogoutReq(AuthLogoutReq&& from) noexcept
    : AuthLogoutReq() {
    *this = ::std::move(from);
  }

  inline AuthLogoutReq& operator=(AuthLogoutReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AuthLogoutReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthLogoutReq* internal_default_instance() {
    return reinterpret_cast<const AuthLogoutReq*>(
               &_AuthLogoutReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(AuthLogoutReq* other);
  friend void swap(AuthLogoutReq& a, AuthLogoutReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthLogoutReq* New() const final {
    return CreateMaybeMessage<AuthLogoutReq>(NULL);
  }

  AuthLogoutReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthLogoutReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AuthLogoutReq& from);
  void MergeFrom(const AuthLogoutReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthLogoutReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PTP.Auth.AuthLogoutReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_PTP_2eAuth_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthLogoutRes : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Auth.AuthLogoutRes) */ {
 public:
  AuthLogoutRes();
  virtual ~AuthLogoutRes();

  AuthLogoutRes(const AuthLogoutRes& from);

  inline AuthLogoutRes& operator=(const AuthLogoutRes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthLogoutRes(AuthLogoutRes&& from) noexcept
    : AuthLogoutRes() {
    *this = ::std::move(from);
  }

  inline AuthLogoutRes& operator=(AuthLogoutRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AuthLogoutRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthLogoutRes* internal_default_instance() {
    return reinterpret_cast<const AuthLogoutRes*>(
               &_AuthLogoutRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(AuthLogoutRes* other);
  friend void swap(AuthLogoutRes& a, AuthLogoutRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthLogoutRes* New() const final {
    return CreateMaybeMessage<AuthLogoutRes>(NULL);
  }

  AuthLogoutRes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthLogoutRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AuthLogoutRes& from);
  void MergeFrom(const AuthLogoutRes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthLogoutRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .PTP.Common.ERR error = 3;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 3;
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);

  // @@protoc_insertion_point(class_scope:PTP.Auth.AuthLogoutRes)
 private:
  void set_has_error();
  void clear_has_error();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int error_;
  friend struct ::protobuf_PTP_2eAuth_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuthCaptchaReq

// -------------------------------------------------------------------

// AuthCaptchaRes

// required string captcha = 1;
inline bool AuthCaptchaRes::has_captcha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthCaptchaRes::set_has_captcha() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthCaptchaRes::clear_has_captcha() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthCaptchaRes::clear_captcha() {
  captcha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_captcha();
}
inline const ::std::string& AuthCaptchaRes::captcha() const {
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthCaptchaRes.captcha)
  return captcha_.GetNoArena();
}
inline void AuthCaptchaRes::set_captcha(const ::std::string& value) {
  set_has_captcha();
  captcha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.Auth.AuthCaptchaRes.captcha)
}
#if LANG_CXX11
inline void AuthCaptchaRes::set_captcha(::std::string&& value) {
  set_has_captcha();
  captcha_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.Auth.AuthCaptchaRes.captcha)
}
#endif
inline void AuthCaptchaRes::set_captcha(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_captcha();
  captcha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.Auth.AuthCaptchaRes.captcha)
}
inline void AuthCaptchaRes::set_captcha(const char* value, size_t size) {
  set_has_captcha();
  captcha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.Auth.AuthCaptchaRes.captcha)
}
inline ::std::string* AuthCaptchaRes::mutable_captcha() {
  set_has_captcha();
  // @@protoc_insertion_point(field_mutable:PTP.Auth.AuthCaptchaRes.captcha)
  return captcha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthCaptchaRes::release_captcha() {
  // @@protoc_insertion_point(field_release:PTP.Auth.AuthCaptchaRes.captcha)
  if (!has_captcha()) {
    return NULL;
  }
  clear_has_captcha();
  return captcha_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthCaptchaRes::set_allocated_captcha(::std::string* captcha) {
  if (captcha != NULL) {
    set_has_captcha();
  } else {
    clear_has_captcha();
  }
  captcha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), captcha);
  // @@protoc_insertion_point(field_set_allocated:PTP.Auth.AuthCaptchaRes.captcha)
}

// required bytes address = 2;
inline bool AuthCaptchaRes::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuthCaptchaRes::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuthCaptchaRes::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuthCaptchaRes::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
inline const ::std::string& AuthCaptchaRes::address() const {
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthCaptchaRes.address)
  return address_.GetNoArena();
}
inline void AuthCaptchaRes::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.Auth.AuthCaptchaRes.address)
}
#if LANG_CXX11
inline void AuthCaptchaRes::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.Auth.AuthCaptchaRes.address)
}
#endif
inline void AuthCaptchaRes::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.Auth.AuthCaptchaRes.address)
}
inline void AuthCaptchaRes::set_address(const void* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.Auth.AuthCaptchaRes.address)
}
inline ::std::string* AuthCaptchaRes::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:PTP.Auth.AuthCaptchaRes.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthCaptchaRes::release_address() {
  // @@protoc_insertion_point(field_release:PTP.Auth.AuthCaptchaRes.address)
  if (!has_address()) {
    return NULL;
  }
  clear_has_address();
  return address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthCaptchaRes::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:PTP.Auth.AuthCaptchaRes.address)
}

// required bytes iv = 3;
inline bool AuthCaptchaRes::has_iv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuthCaptchaRes::set_has_iv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AuthCaptchaRes::clear_has_iv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AuthCaptchaRes::clear_iv() {
  iv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_iv();
}
inline const ::std::string& AuthCaptchaRes::iv() const {
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthCaptchaRes.iv)
  return iv_.GetNoArena();
}
inline void AuthCaptchaRes::set_iv(const ::std::string& value) {
  set_has_iv();
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.Auth.AuthCaptchaRes.iv)
}
#if LANG_CXX11
inline void AuthCaptchaRes::set_iv(::std::string&& value) {
  set_has_iv();
  iv_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.Auth.AuthCaptchaRes.iv)
}
#endif
inline void AuthCaptchaRes::set_iv(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_iv();
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.Auth.AuthCaptchaRes.iv)
}
inline void AuthCaptchaRes::set_iv(const void* value, size_t size) {
  set_has_iv();
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.Auth.AuthCaptchaRes.iv)
}
inline ::std::string* AuthCaptchaRes::mutable_iv() {
  set_has_iv();
  // @@protoc_insertion_point(field_mutable:PTP.Auth.AuthCaptchaRes.iv)
  return iv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthCaptchaRes::release_iv() {
  // @@protoc_insertion_point(field_release:PTP.Auth.AuthCaptchaRes.iv)
  if (!has_iv()) {
    return NULL;
  }
  clear_has_iv();
  return iv_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthCaptchaRes::set_allocated_iv(::std::string* iv) {
  if (iv != NULL) {
    set_has_iv();
  } else {
    clear_has_iv();
  }
  iv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iv);
  // @@protoc_insertion_point(field_set_allocated:PTP.Auth.AuthCaptchaRes.iv)
}

// required bytes aad = 4;
inline bool AuthCaptchaRes::has_aad() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AuthCaptchaRes::set_has_aad() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AuthCaptchaRes::clear_has_aad() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AuthCaptchaRes::clear_aad() {
  aad_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aad();
}
inline const ::std::string& AuthCaptchaRes::aad() const {
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthCaptchaRes.aad)
  return aad_.GetNoArena();
}
inline void AuthCaptchaRes::set_aad(const ::std::string& value) {
  set_has_aad();
  aad_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.Auth.AuthCaptchaRes.aad)
}
#if LANG_CXX11
inline void AuthCaptchaRes::set_aad(::std::string&& value) {
  set_has_aad();
  aad_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.Auth.AuthCaptchaRes.aad)
}
#endif
inline void AuthCaptchaRes::set_aad(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aad();
  aad_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.Auth.AuthCaptchaRes.aad)
}
inline void AuthCaptchaRes::set_aad(const void* value, size_t size) {
  set_has_aad();
  aad_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.Auth.AuthCaptchaRes.aad)
}
inline ::std::string* AuthCaptchaRes::mutable_aad() {
  set_has_aad();
  // @@protoc_insertion_point(field_mutable:PTP.Auth.AuthCaptchaRes.aad)
  return aad_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthCaptchaRes::release_aad() {
  // @@protoc_insertion_point(field_release:PTP.Auth.AuthCaptchaRes.aad)
  if (!has_aad()) {
    return NULL;
  }
  clear_has_aad();
  return aad_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthCaptchaRes::set_allocated_aad(::std::string* aad) {
  if (aad != NULL) {
    set_has_aad();
  } else {
    clear_has_aad();
  }
  aad_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aad);
  // @@protoc_insertion_point(field_set_allocated:PTP.Auth.AuthCaptchaRes.aad)
}

// required bytes sign = 5;
inline bool AuthCaptchaRes::has_sign() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AuthCaptchaRes::set_has_sign() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AuthCaptchaRes::clear_has_sign() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AuthCaptchaRes::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sign();
}
inline const ::std::string& AuthCaptchaRes::sign() const {
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthCaptchaRes.sign)
  return sign_.GetNoArena();
}
inline void AuthCaptchaRes::set_sign(const ::std::string& value) {
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.Auth.AuthCaptchaRes.sign)
}
#if LANG_CXX11
inline void AuthCaptchaRes::set_sign(::std::string&& value) {
  set_has_sign();
  sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.Auth.AuthCaptchaRes.sign)
}
#endif
inline void AuthCaptchaRes::set_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.Auth.AuthCaptchaRes.sign)
}
inline void AuthCaptchaRes::set_sign(const void* value, size_t size) {
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.Auth.AuthCaptchaRes.sign)
}
inline ::std::string* AuthCaptchaRes::mutable_sign() {
  set_has_sign();
  // @@protoc_insertion_point(field_mutable:PTP.Auth.AuthCaptchaRes.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthCaptchaRes::release_sign() {
  // @@protoc_insertion_point(field_release:PTP.Auth.AuthCaptchaRes.sign)
  if (!has_sign()) {
    return NULL;
  }
  clear_has_sign();
  return sign_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthCaptchaRes::set_allocated_sign(::std::string* sign) {
  if (sign != NULL) {
    set_has_sign();
  } else {
    clear_has_sign();
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:PTP.Auth.AuthCaptchaRes.sign)
}

// required .PTP.Common.ERR error = 6;
inline bool AuthCaptchaRes::has_error() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AuthCaptchaRes::set_has_error() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AuthCaptchaRes::clear_has_error() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AuthCaptchaRes::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::PTP::Common::ERR AuthCaptchaRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthCaptchaRes.error)
  return static_cast< ::PTP::Common::ERR >(error_);
}
inline void AuthCaptchaRes::set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:PTP.Auth.AuthCaptchaRes.error)
}

// -------------------------------------------------------------------

// AuthLoginReq

// required string address = 1;
inline bool AuthLoginReq::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthLoginReq::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthLoginReq::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthLoginReq::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
inline const ::std::string& AuthLoginReq::address() const {
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthLoginReq.address)
  return address_.GetNoArena();
}
inline void AuthLoginReq::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.Auth.AuthLoginReq.address)
}
#if LANG_CXX11
inline void AuthLoginReq::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.Auth.AuthLoginReq.address)
}
#endif
inline void AuthLoginReq::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.Auth.AuthLoginReq.address)
}
inline void AuthLoginReq::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.Auth.AuthLoginReq.address)
}
inline ::std::string* AuthLoginReq::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:PTP.Auth.AuthLoginReq.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthLoginReq::release_address() {
  // @@protoc_insertion_point(field_release:PTP.Auth.AuthLoginReq.address)
  if (!has_address()) {
    return NULL;
  }
  clear_has_address();
  return address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthLoginReq::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:PTP.Auth.AuthLoginReq.address)
}

// required string captcha = 2;
inline bool AuthLoginReq::has_captcha() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuthLoginReq::set_has_captcha() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuthLoginReq::clear_has_captcha() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuthLoginReq::clear_captcha() {
  captcha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_captcha();
}
inline const ::std::string& AuthLoginReq::captcha() const {
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthLoginReq.captcha)
  return captcha_.GetNoArena();
}
inline void AuthLoginReq::set_captcha(const ::std::string& value) {
  set_has_captcha();
  captcha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.Auth.AuthLoginReq.captcha)
}
#if LANG_CXX11
inline void AuthLoginReq::set_captcha(::std::string&& value) {
  set_has_captcha();
  captcha_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.Auth.AuthLoginReq.captcha)
}
#endif
inline void AuthLoginReq::set_captcha(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_captcha();
  captcha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.Auth.AuthLoginReq.captcha)
}
inline void AuthLoginReq::set_captcha(const char* value, size_t size) {
  set_has_captcha();
  captcha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.Auth.AuthLoginReq.captcha)
}
inline ::std::string* AuthLoginReq::mutable_captcha() {
  set_has_captcha();
  // @@protoc_insertion_point(field_mutable:PTP.Auth.AuthLoginReq.captcha)
  return captcha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthLoginReq::release_captcha() {
  // @@protoc_insertion_point(field_release:PTP.Auth.AuthLoginReq.captcha)
  if (!has_captcha()) {
    return NULL;
  }
  clear_has_captcha();
  return captcha_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthLoginReq::set_allocated_captcha(::std::string* captcha) {
  if (captcha != NULL) {
    set_has_captcha();
  } else {
    clear_has_captcha();
  }
  captcha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), captcha);
  // @@protoc_insertion_point(field_set_allocated:PTP.Auth.AuthLoginReq.captcha)
}

// required .PTP.Common.ClientType client_type = 3;
inline bool AuthLoginReq::has_client_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AuthLoginReq::set_has_client_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AuthLoginReq::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AuthLoginReq::clear_client_type() {
  client_type_ = 1;
  clear_has_client_type();
}
inline ::PTP::Common::ClientType AuthLoginReq::client_type() const {
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthLoginReq.client_type)
  return static_cast< ::PTP::Common::ClientType >(client_type_);
}
inline void AuthLoginReq::set_client_type(::PTP::Common::ClientType value) {
  assert(::PTP::Common::ClientType_IsValid(value));
  set_has_client_type();
  client_type_ = value;
  // @@protoc_insertion_point(field_set:PTP.Auth.AuthLoginReq.client_type)
}

// optional string client_version = 5;
inline bool AuthLoginReq::has_client_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuthLoginReq::set_has_client_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AuthLoginReq::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AuthLoginReq::clear_client_version() {
  client_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_version();
}
inline const ::std::string& AuthLoginReq::client_version() const {
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthLoginReq.client_version)
  return client_version_.GetNoArena();
}
inline void AuthLoginReq::set_client_version(const ::std::string& value) {
  set_has_client_version();
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.Auth.AuthLoginReq.client_version)
}
#if LANG_CXX11
inline void AuthLoginReq::set_client_version(::std::string&& value) {
  set_has_client_version();
  client_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.Auth.AuthLoginReq.client_version)
}
#endif
inline void AuthLoginReq::set_client_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_version();
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.Auth.AuthLoginReq.client_version)
}
inline void AuthLoginReq::set_client_version(const char* value, size_t size) {
  set_has_client_version();
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.Auth.AuthLoginReq.client_version)
}
inline ::std::string* AuthLoginReq::mutable_client_version() {
  set_has_client_version();
  // @@protoc_insertion_point(field_mutable:PTP.Auth.AuthLoginReq.client_version)
  return client_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthLoginReq::release_client_version() {
  // @@protoc_insertion_point(field_release:PTP.Auth.AuthLoginReq.client_version)
  if (!has_client_version()) {
    return NULL;
  }
  clear_has_client_version();
  return client_version_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthLoginReq::set_allocated_client_version(::std::string* client_version) {
  if (client_version != NULL) {
    set_has_client_version();
  } else {
    clear_has_client_version();
  }
  client_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_version);
  // @@protoc_insertion_point(field_set_allocated:PTP.Auth.AuthLoginReq.client_version)
}

// required bytes sign = 6;
inline bool AuthLoginReq::has_sign() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AuthLoginReq::set_has_sign() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AuthLoginReq::clear_has_sign() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AuthLoginReq::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sign();
}
inline const ::std::string& AuthLoginReq::sign() const {
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthLoginReq.sign)
  return sign_.GetNoArena();
}
inline void AuthLoginReq::set_sign(const ::std::string& value) {
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PTP.Auth.AuthLoginReq.sign)
}
#if LANG_CXX11
inline void AuthLoginReq::set_sign(::std::string&& value) {
  set_has_sign();
  sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PTP.Auth.AuthLoginReq.sign)
}
#endif
inline void AuthLoginReq::set_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PTP.Auth.AuthLoginReq.sign)
}
inline void AuthLoginReq::set_sign(const void* value, size_t size) {
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PTP.Auth.AuthLoginReq.sign)
}
inline ::std::string* AuthLoginReq::mutable_sign() {
  set_has_sign();
  // @@protoc_insertion_point(field_mutable:PTP.Auth.AuthLoginReq.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthLoginReq::release_sign() {
  // @@protoc_insertion_point(field_release:PTP.Auth.AuthLoginReq.sign)
  if (!has_sign()) {
    return NULL;
  }
  clear_has_sign();
  return sign_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthLoginReq::set_allocated_sign(::std::string* sign) {
  if (sign != NULL) {
    set_has_sign();
  } else {
    clear_has_sign();
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:PTP.Auth.AuthLoginReq.sign)
}

// -------------------------------------------------------------------

// AuthLoginRes

// required .PTP.Common.ERR error = 2;
inline bool AuthLoginRes::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuthLoginRes::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuthLoginRes::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuthLoginRes::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::PTP::Common::ERR AuthLoginRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthLoginRes.error)
  return static_cast< ::PTP::Common::ERR >(error_);
}
inline void AuthLoginRes::set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:PTP.Auth.AuthLoginRes.error)
}

// optional .PTP.Common.UserInfo user_info = 5;
inline bool AuthLoginRes::has_user_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthLoginRes::set_has_user_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthLoginRes::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::PTP::Common::UserInfo& AuthLoginRes::_internal_user_info() const {
  return *user_info_;
}
inline const ::PTP::Common::UserInfo& AuthLoginRes::user_info() const {
  const ::PTP::Common::UserInfo* p = user_info_;
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthLoginRes.user_info)
  return p != NULL ? *p : *reinterpret_cast<const ::PTP::Common::UserInfo*>(
      &::PTP::Common::_UserInfo_default_instance_);
}
inline ::PTP::Common::UserInfo* AuthLoginRes::release_user_info() {
  // @@protoc_insertion_point(field_release:PTP.Auth.AuthLoginRes.user_info)
  clear_has_user_info();
  ::PTP::Common::UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline ::PTP::Common::UserInfo* AuthLoginRes::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) {
    auto* p = CreateMaybeMessage<::PTP::Common::UserInfo>(GetArenaNoVirtual());
    user_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:PTP.Auth.AuthLoginRes.user_info)
  return user_info_;
}
inline void AuthLoginRes::set_allocated_user_info(::PTP::Common::UserInfo* user_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(user_info_);
  }
  if (user_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:PTP.Auth.AuthLoginRes.user_info)
}

// -------------------------------------------------------------------

// AuthLogoutReq

// -------------------------------------------------------------------

// AuthLogoutRes

// required .PTP.Common.ERR error = 3;
inline bool AuthLogoutRes::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthLogoutRes::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthLogoutRes::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthLogoutRes::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::PTP::Common::ERR AuthLogoutRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthLogoutRes.error)
  return static_cast< ::PTP::Common::ERR >(error_);
}
inline void AuthLogoutRes::set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:PTP.Auth.AuthLogoutRes.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Auth
}  // namespace PTP

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_PTP_2eAuth_2eproto
