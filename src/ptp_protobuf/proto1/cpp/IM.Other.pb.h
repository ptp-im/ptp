// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Other.proto

#ifndef PROTOBUF_INCLUDED_IM_2eOther_2eproto
#define PROTOBUF_INCLUDED_IM_2eOther_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_IM_2eOther_2eproto 

namespace protobuf_IM_2eOther_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_IM_2eOther_2eproto
namespace IM {
namespace Other {
class IMHeartBeat;
class IMHeartBeatDefaultTypeInternal;
extern IMHeartBeatDefaultTypeInternal _IMHeartBeat_default_instance_;
class IMOtherSystemErrorRes;
class IMOtherSystemErrorResDefaultTypeInternal;
extern IMOtherSystemErrorResDefaultTypeInternal _IMOtherSystemErrorRes_default_instance_;
class IMRandomReq;
class IMRandomReqDefaultTypeInternal;
extern IMRandomReqDefaultTypeInternal _IMRandomReq_default_instance_;
class IMRandomRes;
class IMRandomResDefaultTypeInternal;
extern IMRandomResDefaultTypeInternal _IMRandomRes_default_instance_;
}  // namespace Other
}  // namespace IM
namespace google {
namespace protobuf {
template<> ::IM::Other::IMHeartBeat* Arena::CreateMaybeMessage<::IM::Other::IMHeartBeat>(Arena*);
template<> ::IM::Other::IMOtherSystemErrorRes* Arena::CreateMaybeMessage<::IM::Other::IMOtherSystemErrorRes>(Arena*);
template<> ::IM::Other::IMRandomReq* Arena::CreateMaybeMessage<::IM::Other::IMRandomReq>(Arena*);
template<> ::IM::Other::IMRandomRes* Arena::CreateMaybeMessage<::IM::Other::IMRandomRes>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace IM {
namespace Other {

// ===================================================================

class IMHeartBeat : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:IM.Other.IMHeartBeat) */ {
 public:
  IMHeartBeat();
  virtual ~IMHeartBeat();

  IMHeartBeat(const IMHeartBeat& from);

  inline IMHeartBeat& operator=(const IMHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMHeartBeat(IMHeartBeat&& from) noexcept
    : IMHeartBeat() {
    *this = ::std::move(from);
  }

  inline IMHeartBeat& operator=(IMHeartBeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IMHeartBeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMHeartBeat* internal_default_instance() {
    return reinterpret_cast<const IMHeartBeat*>(
               &_IMHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(IMHeartBeat* other);
  friend void swap(IMHeartBeat& a, IMHeartBeat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMHeartBeat* New() const final {
    return CreateMaybeMessage<IMHeartBeat>(NULL);
  }

  IMHeartBeat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMHeartBeat>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IMHeartBeat& from);
  void MergeFrom(const IMHeartBeat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMHeartBeat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IM.Other.IMHeartBeat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_IM_2eOther_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IMRandomReq : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:IM.Other.IMRandomReq) */ {
 public:
  IMRandomReq();
  virtual ~IMRandomReq();

  IMRandomReq(const IMRandomReq& from);

  inline IMRandomReq& operator=(const IMRandomReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMRandomReq(IMRandomReq&& from) noexcept
    : IMRandomReq() {
    *this = ::std::move(from);
  }

  inline IMRandomReq& operator=(IMRandomReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IMRandomReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMRandomReq* internal_default_instance() {
    return reinterpret_cast<const IMRandomReq*>(
               &_IMRandomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(IMRandomReq* other);
  friend void swap(IMRandomReq& a, IMRandomReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMRandomReq* New() const final {
    return CreateMaybeMessage<IMRandomReq>(NULL);
  }

  IMRandomReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMRandomReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IMRandomReq& from);
  void MergeFrom(const IMRandomReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMRandomReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IM.Other.IMRandomReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_IM_2eOther_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IMRandomRes : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:IM.Other.IMRandomRes) */ {
 public:
  IMRandomRes();
  virtual ~IMRandomRes();

  IMRandomRes(const IMRandomRes& from);

  inline IMRandomRes& operator=(const IMRandomRes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMRandomRes(IMRandomRes&& from) noexcept
    : IMRandomRes() {
    *this = ::std::move(from);
  }

  inline IMRandomRes& operator=(IMRandomRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IMRandomRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMRandomRes* internal_default_instance() {
    return reinterpret_cast<const IMRandomRes*>(
               &_IMRandomRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(IMRandomRes* other);
  friend void swap(IMRandomRes& a, IMRandomRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMRandomRes* New() const final {
    return CreateMaybeMessage<IMRandomRes>(NULL);
  }

  IMRandomRes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMRandomRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IMRandomRes& from);
  void MergeFrom(const IMRandomRes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMRandomRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:IM.Other.IMRandomRes)
 private:
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct ::protobuf_IM_2eOther_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IMOtherSystemErrorRes : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:IM.Other.IMOtherSystemErrorRes) */ {
 public:
  IMOtherSystemErrorRes();
  virtual ~IMOtherSystemErrorRes();

  IMOtherSystemErrorRes(const IMOtherSystemErrorRes& from);

  inline IMOtherSystemErrorRes& operator=(const IMOtherSystemErrorRes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMOtherSystemErrorRes(IMOtherSystemErrorRes&& from) noexcept
    : IMOtherSystemErrorRes() {
    *this = ::std::move(from);
  }

  inline IMOtherSystemErrorRes& operator=(IMOtherSystemErrorRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IMOtherSystemErrorRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMOtherSystemErrorRes* internal_default_instance() {
    return reinterpret_cast<const IMOtherSystemErrorRes*>(
               &_IMOtherSystemErrorRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(IMOtherSystemErrorRes* other);
  friend void swap(IMOtherSystemErrorRes& a, IMOtherSystemErrorRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMOtherSystemErrorRes* New() const final {
    return CreateMaybeMessage<IMOtherSystemErrorRes>(NULL);
  }

  IMOtherSystemErrorRes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMOtherSystemErrorRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IMOtherSystemErrorRes& from);
  void MergeFrom(const IMOtherSystemErrorRes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMOtherSystemErrorRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string result_string = 3;
  bool has_result_string() const;
  void clear_result_string();
  static const int kResultStringFieldNumber = 3;
  const ::std::string& result_string() const;
  void set_result_string(const ::std::string& value);
  #if LANG_CXX11
  void set_result_string(::std::string&& value);
  #endif
  void set_result_string(const char* value);
  void set_result_string(const char* value, size_t size);
  ::std::string* mutable_result_string();
  ::std::string* release_result_string();
  void set_allocated_result_string(::std::string* result_string);

  // required uint32 server_time = 1;
  bool has_server_time() const;
  void clear_server_time();
  static const int kServerTimeFieldNumber = 1;
  ::google::protobuf::uint32 server_time() const;
  void set_server_time(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.ResultType result_code = 2;
  bool has_result_code() const;
  void clear_result_code();
  static const int kResultCodeFieldNumber = 2;
  ::IM::BaseDefine::ResultType result_code() const;
  void set_result_code(::IM::BaseDefine::ResultType value);

  // @@protoc_insertion_point(class_scope:IM.Other.IMOtherSystemErrorRes)
 private:
  void set_has_server_time();
  void clear_has_server_time();
  void set_has_result_code();
  void clear_has_result_code();
  void set_has_result_string();
  void clear_has_result_string();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr result_string_;
  ::google::protobuf::uint32 server_time_;
  int result_code_;
  friend struct ::protobuf_IM_2eOther_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IMHeartBeat

// -------------------------------------------------------------------

// IMRandomReq

// -------------------------------------------------------------------

// IMRandomRes

// required string value = 1;
inline bool IMRandomRes::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMRandomRes::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMRandomRes::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMRandomRes::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& IMRandomRes::value() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMRandomRes.value)
  return value_.GetNoArena();
}
inline void IMRandomRes::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Other.IMRandomRes.value)
}
#if LANG_CXX11
inline void IMRandomRes::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Other.IMRandomRes.value)
}
#endif
inline void IMRandomRes::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Other.IMRandomRes.value)
}
inline void IMRandomRes::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Other.IMRandomRes.value)
}
inline ::std::string* IMRandomRes::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:IM.Other.IMRandomRes.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMRandomRes::release_value() {
  // @@protoc_insertion_point(field_release:IM.Other.IMRandomRes.value)
  if (!has_value()) {
    return NULL;
  }
  clear_has_value();
  return value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMRandomRes::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:IM.Other.IMRandomRes.value)
}

// -------------------------------------------------------------------

// IMOtherSystemErrorRes

// required uint32 server_time = 1;
inline bool IMOtherSystemErrorRes::has_server_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMOtherSystemErrorRes::set_has_server_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMOtherSystemErrorRes::clear_has_server_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMOtherSystemErrorRes::clear_server_time() {
  server_time_ = 0u;
  clear_has_server_time();
}
inline ::google::protobuf::uint32 IMOtherSystemErrorRes::server_time() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMOtherSystemErrorRes.server_time)
  return server_time_;
}
inline void IMOtherSystemErrorRes::set_server_time(::google::protobuf::uint32 value) {
  set_has_server_time();
  server_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Other.IMOtherSystemErrorRes.server_time)
}

// required .IM.BaseDefine.ResultType result_code = 2;
inline bool IMOtherSystemErrorRes::has_result_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMOtherSystemErrorRes::set_has_result_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMOtherSystemErrorRes::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMOtherSystemErrorRes::clear_result_code() {
  result_code_ = -4;
  clear_has_result_code();
}
inline ::IM::BaseDefine::ResultType IMOtherSystemErrorRes::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMOtherSystemErrorRes.result_code)
  return static_cast< ::IM::BaseDefine::ResultType >(result_code_);
}
inline void IMOtherSystemErrorRes::set_result_code(::IM::BaseDefine::ResultType value) {
  assert(::IM::BaseDefine::ResultType_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Other.IMOtherSystemErrorRes.result_code)
}

// optional string result_string = 3;
inline bool IMOtherSystemErrorRes::has_result_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMOtherSystemErrorRes::set_has_result_string() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMOtherSystemErrorRes::clear_has_result_string() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMOtherSystemErrorRes::clear_result_string() {
  result_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_result_string();
}
inline const ::std::string& IMOtherSystemErrorRes::result_string() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMOtherSystemErrorRes.result_string)
  return result_string_.GetNoArena();
}
inline void IMOtherSystemErrorRes::set_result_string(const ::std::string& value) {
  set_has_result_string();
  result_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Other.IMOtherSystemErrorRes.result_string)
}
#if LANG_CXX11
inline void IMOtherSystemErrorRes::set_result_string(::std::string&& value) {
  set_has_result_string();
  result_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Other.IMOtherSystemErrorRes.result_string)
}
#endif
inline void IMOtherSystemErrorRes::set_result_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_result_string();
  result_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Other.IMOtherSystemErrorRes.result_string)
}
inline void IMOtherSystemErrorRes::set_result_string(const char* value, size_t size) {
  set_has_result_string();
  result_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Other.IMOtherSystemErrorRes.result_string)
}
inline ::std::string* IMOtherSystemErrorRes::mutable_result_string() {
  set_has_result_string();
  // @@protoc_insertion_point(field_mutable:IM.Other.IMOtherSystemErrorRes.result_string)
  return result_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMOtherSystemErrorRes::release_result_string() {
  // @@protoc_insertion_point(field_release:IM.Other.IMOtherSystemErrorRes.result_string)
  if (!has_result_string()) {
    return NULL;
  }
  clear_has_result_string();
  return result_string_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMOtherSystemErrorRes::set_allocated_result_string(::std::string* result_string) {
  if (result_string != NULL) {
    set_has_result_string();
  } else {
    clear_has_result_string();
  }
  result_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result_string);
  // @@protoc_insertion_point(field_set_allocated:IM.Other.IMOtherSystemErrorRes.result_string)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Other
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_IM_2eOther_2eproto
