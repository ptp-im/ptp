// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PTP.Buddy.proto

#include "PTP.Buddy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace PTP {
namespace Buddy {
PROTOBUF_CONSTEXPR BuddyGetListReq::BuddyGetListReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_ids_)*/{}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.auth_uid_)*/0u} {}
struct BuddyGetListReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuddyGetListReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuddyGetListReqDefaultTypeInternal() {}
  union {
    BuddyGetListReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuddyGetListReqDefaultTypeInternal _BuddyGetListReq_default_instance_;
PROTOBUF_CONSTEXPR BuddyGetListRes::BuddyGetListRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.buddy_list_)*/{}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_.auth_uid_)*/0u} {}
struct BuddyGetListResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuddyGetListResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuddyGetListResDefaultTypeInternal() {}
  union {
    BuddyGetListRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuddyGetListResDefaultTypeInternal _BuddyGetListRes_default_instance_;
PROTOBUF_CONSTEXPR BuddyGetALLReq::BuddyGetALLReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buddy_updated_time_)*/0u
  , /*decltype(_impl_.auth_uid_)*/0u} {}
struct BuddyGetALLReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuddyGetALLReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuddyGetALLReqDefaultTypeInternal() {}
  union {
    BuddyGetALLReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuddyGetALLReqDefaultTypeInternal _BuddyGetALLReq_default_instance_;
PROTOBUF_CONSTEXPR BuddyGetALLRes::BuddyGetALLRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.buddy_list_)*/{}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buddy_updated_time_)*/0u
  , /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_.auth_uid_)*/0u} {}
struct BuddyGetALLResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuddyGetALLResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuddyGetALLResDefaultTypeInternal() {}
  union {
    BuddyGetALLRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuddyGetALLResDefaultTypeInternal _BuddyGetALLRes_default_instance_;
PROTOBUF_CONSTEXPR BuddyGetStatReq::BuddyGetStatReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_ids_)*/{}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.auth_uid_)*/0u} {}
struct BuddyGetStatReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuddyGetStatReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuddyGetStatReqDefaultTypeInternal() {}
  union {
    BuddyGetStatReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuddyGetStatReqDefaultTypeInternal _BuddyGetStatReq_default_instance_;
PROTOBUF_CONSTEXPR BuddyGetStatRes::BuddyGetStatRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_stat_list_)*/{}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_.auth_uid_)*/0u} {}
struct BuddyGetStatResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuddyGetStatResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuddyGetStatResDefaultTypeInternal() {}
  union {
    BuddyGetStatRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuddyGetStatResDefaultTypeInternal _BuddyGetStatRes_default_instance_;
PROTOBUF_CONSTEXPR BuddyStatNotify::BuddyStatNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_stat_)*/1} {}
struct BuddyStatNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuddyStatNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuddyStatNotifyDefaultTypeInternal() {}
  union {
    BuddyStatNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuddyStatNotifyDefaultTypeInternal _BuddyStatNotify_default_instance_;
PROTOBUF_CONSTEXPR BuddyModifyReq::BuddyModifyReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.auth_uid_)*/0u
  , /*decltype(_impl_.buddy_modify_action_)*/1} {}
struct BuddyModifyReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuddyModifyReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuddyModifyReqDefaultTypeInternal() {}
  union {
    BuddyModifyReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuddyModifyReqDefaultTypeInternal _BuddyModifyReq_default_instance_;
PROTOBUF_CONSTEXPR BuddyModifyRes::BuddyModifyRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.notify_pairs_)*/{}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_.auth_uid_)*/0u
  , /*decltype(_impl_.buddy_modify_action_)*/1} {}
struct BuddyModifyResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuddyModifyResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuddyModifyResDefaultTypeInternal() {}
  union {
    BuddyModifyRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuddyModifyResDefaultTypeInternal _BuddyModifyRes_default_instance_;
PROTOBUF_CONSTEXPR BuddyModifyNotify::BuddyModifyNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uid_)*/0u
  , /*decltype(_impl_.buddy_modify_action_)*/1} {}
struct BuddyModifyNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuddyModifyNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuddyModifyNotifyDefaultTypeInternal() {}
  union {
    BuddyModifyNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuddyModifyNotifyDefaultTypeInternal _BuddyModifyNotify_default_instance_;
PROTOBUF_CONSTEXPR BuddyModifyUpdatePair::BuddyModifyUpdatePair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pair_uid_list_)*/{}
  , /*decltype(_impl_.auth_uid_)*/0u} {}
struct BuddyModifyUpdatePairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuddyModifyUpdatePairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuddyModifyUpdatePairDefaultTypeInternal() {}
  union {
    BuddyModifyUpdatePair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuddyModifyUpdatePairDefaultTypeInternal _BuddyModifyUpdatePair_default_instance_;
PROTOBUF_CONSTEXPR BuddyImportContactsReq::BuddyImportContactsReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.phone_contacts_)*/{}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.auth_uid_)*/0u} {}
struct BuddyImportContactsReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuddyImportContactsReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuddyImportContactsReqDefaultTypeInternal() {}
  union {
    BuddyImportContactsReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuddyImportContactsReqDefaultTypeInternal _BuddyImportContactsReq_default_instance_;
PROTOBUF_CONSTEXPR BuddyImportContactsRes::BuddyImportContactsRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_.auth_uid_)*/0u} {}
struct BuddyImportContactsResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuddyImportContactsResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuddyImportContactsResDefaultTypeInternal() {}
  union {
    BuddyImportContactsRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuddyImportContactsResDefaultTypeInternal _BuddyImportContactsRes_default_instance_;
PROTOBUF_CONSTEXPR BuddyQueryListReq::BuddyQueryListReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.params_)*/nullptr
  , /*decltype(_impl_.auth_uid_)*/0u} {}
struct BuddyQueryListReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuddyQueryListReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuddyQueryListReqDefaultTypeInternal() {}
  union {
    BuddyQueryListReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuddyQueryListReqDefaultTypeInternal _BuddyQueryListReq_default_instance_;
PROTOBUF_CONSTEXPR BuddyQueryListRes::BuddyQueryListRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.buddy_list_)*/{}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_.auth_uid_)*/0u} {}
struct BuddyQueryListResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuddyQueryListResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuddyQueryListResDefaultTypeInternal() {}
  union {
    BuddyQueryListRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuddyQueryListResDefaultTypeInternal _BuddyQueryListRes_default_instance_;
}  // namespace Buddy
}  // namespace PTP
namespace PTP {
namespace Buddy {

// ===================================================================

class BuddyGetListReq::_Internal {
 public:
  using HasBits = decltype(std::declval<BuddyGetListReq>()._impl_._has_bits_);
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_auth_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BuddyGetListReq::BuddyGetListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PTP.Buddy.BuddyGetListReq)
}
BuddyGetListReq::BuddyGetListReq(const BuddyGetListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BuddyGetListReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_ids_){from._impl_.user_ids_}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.auth_uid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.auth_uid_ = from._impl_.auth_uid_;
  // @@protoc_insertion_point(copy_constructor:PTP.Buddy.BuddyGetListReq)
}

inline void BuddyGetListReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_ids_){arena}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.auth_uid_){0u}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BuddyGetListReq::~BuddyGetListReq() {
  // @@protoc_insertion_point(destructor:PTP.Buddy.BuddyGetListReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuddyGetListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_ids_.~RepeatedField();
  _impl_.attach_data_.Destroy();
}

void BuddyGetListReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuddyGetListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.Buddy.BuddyGetListReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BuddyGetListReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 user_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_user_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_user_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 auth_uid = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_auth_uid(&has_bits);
          _impl_.auth_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuddyGetListReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PTP.Buddy.BuddyGetListReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 user_ids = 1;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_ids(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  // optional uint32 auth_uid = 21;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_auth_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PTP.Buddy.BuddyGetListReq)
  return target;
}

size_t BuddyGetListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.Buddy.BuddyGetListReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 user_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.user_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_user_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes attach_data = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_attach_data());
    }

    // optional uint32 auth_uid = 21;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_auth_uid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuddyGetListReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BuddyGetListReq*>(
      &from));
}

void BuddyGetListReq::MergeFrom(const BuddyGetListReq& from) {
  BuddyGetListReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:PTP.Buddy.BuddyGetListReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.user_ids_.MergeFrom(from._impl_.user_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_attach_data(from._internal_attach_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.auth_uid_ = from._impl_.auth_uid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BuddyGetListReq::CopyFrom(const BuddyGetListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.Buddy.BuddyGetListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddyGetListReq::IsInitialized() const {
  return true;
}

void BuddyGetListReq::InternalSwap(BuddyGetListReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.user_ids_.InternalSwap(&other->_impl_.user_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  swap(_impl_.auth_uid_, other->_impl_.auth_uid_);
}

std::string BuddyGetListReq::GetTypeName() const {
  return "PTP.Buddy.BuddyGetListReq";
}


// ===================================================================

class BuddyGetListRes::_Internal {
 public:
  using HasBits = decltype(std::declval<BuddyGetListRes>()._impl_._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_auth_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

void BuddyGetListRes::clear_buddy_list() {
  _impl_.buddy_list_.Clear();
}
BuddyGetListRes::BuddyGetListRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PTP.Buddy.BuddyGetListRes)
}
BuddyGetListRes::BuddyGetListRes(const BuddyGetListRes& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BuddyGetListRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buddy_list_){from._impl_.buddy_list_}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.error_){}
    , decltype(_impl_.auth_uid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.error_, &from._impl_.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.auth_uid_) -
    reinterpret_cast<char*>(&_impl_.error_)) + sizeof(_impl_.auth_uid_));
  // @@protoc_insertion_point(copy_constructor:PTP.Buddy.BuddyGetListRes)
}

inline void BuddyGetListRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buddy_list_){arena}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.error_){0}
    , decltype(_impl_.auth_uid_){0u}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BuddyGetListRes::~BuddyGetListRes() {
  // @@protoc_insertion_point(destructor:PTP.Buddy.BuddyGetListRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuddyGetListRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buddy_list_.~RepeatedPtrField();
  _impl_.attach_data_.Destroy();
}

void BuddyGetListRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuddyGetListRes::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.Buddy.BuddyGetListRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buddy_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.auth_uid_) -
        reinterpret_cast<char*>(&_impl_.error_)) + sizeof(_impl_.auth_uid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BuddyGetListRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .PTP.Common.ERR error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PTP::Common::ERR_IsValid(val))) {
            _internal_set_error(static_cast<::PTP::Common::ERR>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .PTP.Common.UserInfo buddy_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buddy_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 auth_uid = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_auth_uid(&has_bits);
          _impl_.auth_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuddyGetListRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PTP.Buddy.BuddyGetListRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .PTP.Common.ERR error = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error(), target);
  }

  // repeated .PTP.Common.UserInfo buddy_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buddy_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_buddy_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  // optional uint32 auth_uid = 21;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_auth_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PTP.Buddy.BuddyGetListRes)
  return target;
}

size_t BuddyGetListRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.Buddy.BuddyGetListRes)
  size_t total_size = 0;

  // required .PTP.Common.ERR error = 1;
  if (_internal_has_error()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PTP.Common.UserInfo buddy_list = 2;
  total_size += 1UL * this->_internal_buddy_list_size();
  for (const auto& msg : this->_impl_.buddy_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // optional uint32 auth_uid = 21;
  if (cached_has_bits & 0x00000004u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_auth_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuddyGetListRes::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BuddyGetListRes*>(
      &from));
}

void BuddyGetListRes::MergeFrom(const BuddyGetListRes& from) {
  BuddyGetListRes* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:PTP.Buddy.BuddyGetListRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buddy_list_.MergeFrom(from._impl_.buddy_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_attach_data(from._internal_attach_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.error_ = from._impl_.error_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.auth_uid_ = from._impl_.auth_uid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BuddyGetListRes::CopyFrom(const BuddyGetListRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.Buddy.BuddyGetListRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddyGetListRes::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.buddy_list_))
    return false;
  return true;
}

void BuddyGetListRes::InternalSwap(BuddyGetListRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.buddy_list_.InternalSwap(&other->_impl_.buddy_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuddyGetListRes, _impl_.auth_uid_)
      + sizeof(BuddyGetListRes::_impl_.auth_uid_)
      - PROTOBUF_FIELD_OFFSET(BuddyGetListRes, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
}

std::string BuddyGetListRes::GetTypeName() const {
  return "PTP.Buddy.BuddyGetListRes";
}


// ===================================================================

class BuddyGetALLReq::_Internal {
 public:
  using HasBits = decltype(std::declval<BuddyGetALLReq>()._impl_._has_bits_);
  static void set_has_buddy_updated_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_auth_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

BuddyGetALLReq::BuddyGetALLReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PTP.Buddy.BuddyGetALLReq)
}
BuddyGetALLReq::BuddyGetALLReq(const BuddyGetALLReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BuddyGetALLReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.buddy_updated_time_){}
    , decltype(_impl_.auth_uid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.buddy_updated_time_, &from._impl_.buddy_updated_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.auth_uid_) -
    reinterpret_cast<char*>(&_impl_.buddy_updated_time_)) + sizeof(_impl_.auth_uid_));
  // @@protoc_insertion_point(copy_constructor:PTP.Buddy.BuddyGetALLReq)
}

inline void BuddyGetALLReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.buddy_updated_time_){0u}
    , decltype(_impl_.auth_uid_){0u}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BuddyGetALLReq::~BuddyGetALLReq() {
  // @@protoc_insertion_point(destructor:PTP.Buddy.BuddyGetALLReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuddyGetALLReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attach_data_.Destroy();
}

void BuddyGetALLReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuddyGetALLReq::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.Buddy.BuddyGetALLReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.buddy_updated_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.auth_uid_) -
        reinterpret_cast<char*>(&_impl_.buddy_updated_time_)) + sizeof(_impl_.auth_uid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BuddyGetALLReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 buddy_updated_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_buddy_updated_time(&has_bits);
          _impl_.buddy_updated_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 auth_uid = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_auth_uid(&has_bits);
          _impl_.auth_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuddyGetALLReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PTP.Buddy.BuddyGetALLReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 buddy_updated_time = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_buddy_updated_time(), target);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  // optional uint32 auth_uid = 21;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_auth_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PTP.Buddy.BuddyGetALLReq)
  return target;
}

size_t BuddyGetALLReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.Buddy.BuddyGetALLReq)
  size_t total_size = 0;

  // required uint32 buddy_updated_time = 1;
  if (_internal_has_buddy_updated_time()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_buddy_updated_time());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // optional uint32 auth_uid = 21;
  if (cached_has_bits & 0x00000004u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_auth_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuddyGetALLReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BuddyGetALLReq*>(
      &from));
}

void BuddyGetALLReq::MergeFrom(const BuddyGetALLReq& from) {
  BuddyGetALLReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:PTP.Buddy.BuddyGetALLReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_attach_data(from._internal_attach_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.buddy_updated_time_ = from._impl_.buddy_updated_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.auth_uid_ = from._impl_.auth_uid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BuddyGetALLReq::CopyFrom(const BuddyGetALLReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.Buddy.BuddyGetALLReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddyGetALLReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void BuddyGetALLReq::InternalSwap(BuddyGetALLReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuddyGetALLReq, _impl_.auth_uid_)
      + sizeof(BuddyGetALLReq::_impl_.auth_uid_)
      - PROTOBUF_FIELD_OFFSET(BuddyGetALLReq, _impl_.buddy_updated_time_)>(
          reinterpret_cast<char*>(&_impl_.buddy_updated_time_),
          reinterpret_cast<char*>(&other->_impl_.buddy_updated_time_));
}

std::string BuddyGetALLReq::GetTypeName() const {
  return "PTP.Buddy.BuddyGetALLReq";
}


// ===================================================================

class BuddyGetALLRes::_Internal {
 public:
  using HasBits = decltype(std::declval<BuddyGetALLRes>()._impl_._has_bits_);
  static void set_has_buddy_updated_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_auth_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

void BuddyGetALLRes::clear_buddy_list() {
  _impl_.buddy_list_.Clear();
}
BuddyGetALLRes::BuddyGetALLRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PTP.Buddy.BuddyGetALLRes)
}
BuddyGetALLRes::BuddyGetALLRes(const BuddyGetALLRes& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BuddyGetALLRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buddy_list_){from._impl_.buddy_list_}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.buddy_updated_time_){}
    , decltype(_impl_.error_){}
    , decltype(_impl_.auth_uid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.buddy_updated_time_, &from._impl_.buddy_updated_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.auth_uid_) -
    reinterpret_cast<char*>(&_impl_.buddy_updated_time_)) + sizeof(_impl_.auth_uid_));
  // @@protoc_insertion_point(copy_constructor:PTP.Buddy.BuddyGetALLRes)
}

inline void BuddyGetALLRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buddy_list_){arena}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.buddy_updated_time_){0u}
    , decltype(_impl_.error_){0}
    , decltype(_impl_.auth_uid_){0u}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BuddyGetALLRes::~BuddyGetALLRes() {
  // @@protoc_insertion_point(destructor:PTP.Buddy.BuddyGetALLRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuddyGetALLRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buddy_list_.~RepeatedPtrField();
  _impl_.attach_data_.Destroy();
}

void BuddyGetALLRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuddyGetALLRes::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.Buddy.BuddyGetALLRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buddy_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.buddy_updated_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.auth_uid_) -
        reinterpret_cast<char*>(&_impl_.buddy_updated_time_)) + sizeof(_impl_.auth_uid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BuddyGetALLRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 buddy_updated_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_buddy_updated_time(&has_bits);
          _impl_.buddy_updated_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .PTP.Common.ERR error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PTP::Common::ERR_IsValid(val))) {
            _internal_set_error(static_cast<::PTP::Common::ERR>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .PTP.Common.UserInfo buddy_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buddy_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 auth_uid = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_auth_uid(&has_bits);
          _impl_.auth_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuddyGetALLRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PTP.Buddy.BuddyGetALLRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 buddy_updated_time = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_buddy_updated_time(), target);
  }

  // required .PTP.Common.ERR error = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error(), target);
  }

  // repeated .PTP.Common.UserInfo buddy_list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buddy_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_buddy_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  // optional uint32 auth_uid = 21;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_auth_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PTP.Buddy.BuddyGetALLRes)
  return target;
}

size_t BuddyGetALLRes::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PTP.Buddy.BuddyGetALLRes)
  size_t total_size = 0;

  if (_internal_has_buddy_updated_time()) {
    // required uint32 buddy_updated_time = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_buddy_updated_time());
  }

  if (_internal_has_error()) {
    // required .PTP.Common.ERR error = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }

  return total_size;
}
size_t BuddyGetALLRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.Buddy.BuddyGetALLRes)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 buddy_updated_time = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_buddy_updated_time());

    // required .PTP.Common.ERR error = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PTP.Common.UserInfo buddy_list = 3;
  total_size += 1UL * this->_internal_buddy_list_size();
  for (const auto& msg : this->_impl_.buddy_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // optional uint32 auth_uid = 21;
  if (cached_has_bits & 0x00000008u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_auth_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuddyGetALLRes::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BuddyGetALLRes*>(
      &from));
}

void BuddyGetALLRes::MergeFrom(const BuddyGetALLRes& from) {
  BuddyGetALLRes* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:PTP.Buddy.BuddyGetALLRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buddy_list_.MergeFrom(from._impl_.buddy_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_attach_data(from._internal_attach_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.buddy_updated_time_ = from._impl_.buddy_updated_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.error_ = from._impl_.error_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.auth_uid_ = from._impl_.auth_uid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BuddyGetALLRes::CopyFrom(const BuddyGetALLRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.Buddy.BuddyGetALLRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddyGetALLRes::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.buddy_list_))
    return false;
  return true;
}

void BuddyGetALLRes::InternalSwap(BuddyGetALLRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.buddy_list_.InternalSwap(&other->_impl_.buddy_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuddyGetALLRes, _impl_.auth_uid_)
      + sizeof(BuddyGetALLRes::_impl_.auth_uid_)
      - PROTOBUF_FIELD_OFFSET(BuddyGetALLRes, _impl_.buddy_updated_time_)>(
          reinterpret_cast<char*>(&_impl_.buddy_updated_time_),
          reinterpret_cast<char*>(&other->_impl_.buddy_updated_time_));
}

std::string BuddyGetALLRes::GetTypeName() const {
  return "PTP.Buddy.BuddyGetALLRes";
}


// ===================================================================

class BuddyGetStatReq::_Internal {
 public:
  using HasBits = decltype(std::declval<BuddyGetStatReq>()._impl_._has_bits_);
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_auth_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BuddyGetStatReq::BuddyGetStatReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PTP.Buddy.BuddyGetStatReq)
}
BuddyGetStatReq::BuddyGetStatReq(const BuddyGetStatReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BuddyGetStatReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_ids_){from._impl_.user_ids_}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.auth_uid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.auth_uid_ = from._impl_.auth_uid_;
  // @@protoc_insertion_point(copy_constructor:PTP.Buddy.BuddyGetStatReq)
}

inline void BuddyGetStatReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_ids_){arena}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.auth_uid_){0u}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BuddyGetStatReq::~BuddyGetStatReq() {
  // @@protoc_insertion_point(destructor:PTP.Buddy.BuddyGetStatReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuddyGetStatReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_ids_.~RepeatedField();
  _impl_.attach_data_.Destroy();
}

void BuddyGetStatReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuddyGetStatReq::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.Buddy.BuddyGetStatReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BuddyGetStatReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 user_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_user_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_user_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 auth_uid = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_auth_uid(&has_bits);
          _impl_.auth_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuddyGetStatReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PTP.Buddy.BuddyGetStatReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 user_ids = 1;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_ids(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  // optional uint32 auth_uid = 21;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_auth_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PTP.Buddy.BuddyGetStatReq)
  return target;
}

size_t BuddyGetStatReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.Buddy.BuddyGetStatReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 user_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.user_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_user_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes attach_data = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_attach_data());
    }

    // optional uint32 auth_uid = 21;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_auth_uid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuddyGetStatReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BuddyGetStatReq*>(
      &from));
}

void BuddyGetStatReq::MergeFrom(const BuddyGetStatReq& from) {
  BuddyGetStatReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:PTP.Buddy.BuddyGetStatReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.user_ids_.MergeFrom(from._impl_.user_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_attach_data(from._internal_attach_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.auth_uid_ = from._impl_.auth_uid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BuddyGetStatReq::CopyFrom(const BuddyGetStatReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.Buddy.BuddyGetStatReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddyGetStatReq::IsInitialized() const {
  return true;
}

void BuddyGetStatReq::InternalSwap(BuddyGetStatReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.user_ids_.InternalSwap(&other->_impl_.user_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  swap(_impl_.auth_uid_, other->_impl_.auth_uid_);
}

std::string BuddyGetStatReq::GetTypeName() const {
  return "PTP.Buddy.BuddyGetStatReq";
}


// ===================================================================

class BuddyGetStatRes::_Internal {
 public:
  using HasBits = decltype(std::declval<BuddyGetStatRes>()._impl_._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_auth_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

BuddyGetStatRes::BuddyGetStatRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PTP.Buddy.BuddyGetStatRes)
}
BuddyGetStatRes::BuddyGetStatRes(const BuddyGetStatRes& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BuddyGetStatRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_stat_list_){from._impl_.user_stat_list_}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.error_){}
    , decltype(_impl_.auth_uid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.error_, &from._impl_.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.auth_uid_) -
    reinterpret_cast<char*>(&_impl_.error_)) + sizeof(_impl_.auth_uid_));
  // @@protoc_insertion_point(copy_constructor:PTP.Buddy.BuddyGetStatRes)
}

inline void BuddyGetStatRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_stat_list_){arena}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.error_){0}
    , decltype(_impl_.auth_uid_){0u}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BuddyGetStatRes::~BuddyGetStatRes() {
  // @@protoc_insertion_point(destructor:PTP.Buddy.BuddyGetStatRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuddyGetStatRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_stat_list_.~RepeatedField();
  _impl_.attach_data_.Destroy();
}

void BuddyGetStatRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuddyGetStatRes::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.Buddy.BuddyGetStatRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_stat_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.auth_uid_) -
        reinterpret_cast<char*>(&_impl_.error_)) + sizeof(_impl_.auth_uid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BuddyGetStatRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .PTP.Common.ERR error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PTP::Common::ERR_IsValid(val))) {
            _internal_set_error(static_cast<::PTP::Common::ERR>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .PTP.Common.UserStat user_stat_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::PTP::Common::UserStat_IsValid(val))) {
              _internal_add_user_stat_list(static_cast<::PTP::Common::UserStat>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_user_stat_list(), ptr, ctx, ::PTP::Common::UserStat_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 auth_uid = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_auth_uid(&has_bits);
          _impl_.auth_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuddyGetStatRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PTP.Buddy.BuddyGetStatRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .PTP.Common.ERR error = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error(), target);
  }

  // repeated .PTP.Common.UserStat user_stat_list = 2;
  for (int i = 0, n = this->_internal_user_stat_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_user_stat_list(i), target);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  // optional uint32 auth_uid = 21;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_auth_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PTP.Buddy.BuddyGetStatRes)
  return target;
}

size_t BuddyGetStatRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.Buddy.BuddyGetStatRes)
  size_t total_size = 0;

  // required .PTP.Common.ERR error = 1;
  if (_internal_has_error()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PTP.Common.UserStat user_stat_list = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_user_stat_list_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_user_stat_list(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // optional uint32 auth_uid = 21;
  if (cached_has_bits & 0x00000004u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_auth_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuddyGetStatRes::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BuddyGetStatRes*>(
      &from));
}

void BuddyGetStatRes::MergeFrom(const BuddyGetStatRes& from) {
  BuddyGetStatRes* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:PTP.Buddy.BuddyGetStatRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.user_stat_list_.MergeFrom(from._impl_.user_stat_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_attach_data(from._internal_attach_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.error_ = from._impl_.error_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.auth_uid_ = from._impl_.auth_uid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BuddyGetStatRes::CopyFrom(const BuddyGetStatRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.Buddy.BuddyGetStatRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddyGetStatRes::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void BuddyGetStatRes::InternalSwap(BuddyGetStatRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.user_stat_list_.InternalSwap(&other->_impl_.user_stat_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuddyGetStatRes, _impl_.auth_uid_)
      + sizeof(BuddyGetStatRes::_impl_.auth_uid_)
      - PROTOBUF_FIELD_OFFSET(BuddyGetStatRes, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
}

std::string BuddyGetStatRes::GetTypeName() const {
  return "PTP.Buddy.BuddyGetStatRes";
}


// ===================================================================

class BuddyStatNotify::_Internal {
 public:
  using HasBits = decltype(std::declval<BuddyStatNotify>()._impl_._has_bits_);
  static void set_has_user_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

BuddyStatNotify::BuddyStatNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PTP.Buddy.BuddyStatNotify)
}
BuddyStatNotify::BuddyStatNotify(const BuddyStatNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BuddyStatNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_stat_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.user_stat_ = from._impl_.user_stat_;
  // @@protoc_insertion_point(copy_constructor:PTP.Buddy.BuddyStatNotify)
}

inline void BuddyStatNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_stat_){1}
  };
}

BuddyStatNotify::~BuddyStatNotify() {
  // @@protoc_insertion_point(destructor:PTP.Buddy.BuddyStatNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuddyStatNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BuddyStatNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuddyStatNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.Buddy.BuddyStatNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_stat_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BuddyStatNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .PTP.Common.UserStat user_stat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PTP::Common::UserStat_IsValid(val))) {
            _internal_set_user_stat(static_cast<::PTP::Common::UserStat>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuddyStatNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PTP.Buddy.BuddyStatNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .PTP.Common.UserStat user_stat = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_user_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PTP.Buddy.BuddyStatNotify)
  return target;
}

size_t BuddyStatNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.Buddy.BuddyStatNotify)
  size_t total_size = 0;

  // required .PTP.Common.UserStat user_stat = 1;
  if (_internal_has_user_stat()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_user_stat());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuddyStatNotify::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BuddyStatNotify*>(
      &from));
}

void BuddyStatNotify::MergeFrom(const BuddyStatNotify& from) {
  BuddyStatNotify* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:PTP.Buddy.BuddyStatNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_stat()) {
    _this->_internal_set_user_stat(from._internal_user_stat());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BuddyStatNotify::CopyFrom(const BuddyStatNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.Buddy.BuddyStatNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddyStatNotify::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void BuddyStatNotify::InternalSwap(BuddyStatNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.user_stat_, other->_impl_.user_stat_);
}

std::string BuddyStatNotify::GetTypeName() const {
  return "PTP.Buddy.BuddyStatNotify";
}


// ===================================================================

class BuddyModifyReq::_Internal {
 public:
  using HasBits = decltype(std::declval<BuddyModifyReq>()._impl_._has_bits_);
  static void set_has_buddy_modify_action(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_auth_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000009) ^ 0x00000009) != 0;
  }
};

BuddyModifyReq::BuddyModifyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PTP.Buddy.BuddyModifyReq)
}
BuddyModifyReq::BuddyModifyReq(const BuddyModifyReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BuddyModifyReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.auth_uid_){}
    , decltype(_impl_.buddy_modify_action_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.auth_uid_, &from._impl_.auth_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.buddy_modify_action_) -
    reinterpret_cast<char*>(&_impl_.auth_uid_)) + sizeof(_impl_.buddy_modify_action_));
  // @@protoc_insertion_point(copy_constructor:PTP.Buddy.BuddyModifyReq)
}

inline void BuddyModifyReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.auth_uid_){0u}
    , decltype(_impl_.buddy_modify_action_){1}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BuddyModifyReq::~BuddyModifyReq() {
  // @@protoc_insertion_point(destructor:PTP.Buddy.BuddyModifyReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuddyModifyReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
  _impl_.attach_data_.Destroy();
}

void BuddyModifyReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuddyModifyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.Buddy.BuddyModifyReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.attach_data_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    _impl_.auth_uid_ = 0u;
    _impl_.buddy_modify_action_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BuddyModifyReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .PTP.Common.BuddyModifyAction buddy_modify_action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PTP::Common::BuddyModifyAction_IsValid(val))) {
            _internal_set_buddy_modify_action(static_cast<::PTP::Common::BuddyModifyAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required string value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 auth_uid = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_auth_uid(&has_bits);
          _impl_.auth_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuddyModifyReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PTP.Buddy.BuddyModifyReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .PTP.Common.BuddyModifyAction buddy_modify_action = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_buddy_modify_action(), target);
  }

  // required string value = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_value(), target);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  // optional uint32 auth_uid = 21;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_auth_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PTP.Buddy.BuddyModifyReq)
  return target;
}

size_t BuddyModifyReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PTP.Buddy.BuddyModifyReq)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required string value = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (_internal_has_buddy_modify_action()) {
    // required .PTP.Common.BuddyModifyAction buddy_modify_action = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_buddy_modify_action());
  }

  return total_size;
}
size_t BuddyModifyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.Buddy.BuddyModifyReq)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required string value = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

    // required .PTP.Common.BuddyModifyAction buddy_modify_action = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_buddy_modify_action());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional bytes attach_data = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_attach_data());
    }

    // optional uint32 auth_uid = 21;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_auth_uid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuddyModifyReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BuddyModifyReq*>(
      &from));
}

void BuddyModifyReq::MergeFrom(const BuddyModifyReq& from) {
  BuddyModifyReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:PTP.Buddy.BuddyModifyReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_attach_data(from._internal_attach_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.auth_uid_ = from._impl_.auth_uid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.buddy_modify_action_ = from._impl_.buddy_modify_action_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BuddyModifyReq::CopyFrom(const BuddyModifyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.Buddy.BuddyModifyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddyModifyReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void BuddyModifyReq::InternalSwap(BuddyModifyReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  swap(_impl_.auth_uid_, other->_impl_.auth_uid_);
  swap(_impl_.buddy_modify_action_, other->_impl_.buddy_modify_action_);
}

std::string BuddyModifyReq::GetTypeName() const {
  return "PTP.Buddy.BuddyModifyReq";
}


// ===================================================================

class BuddyModifyRes::_Internal {
 public:
  using HasBits = decltype(std::declval<BuddyModifyRes>()._impl_._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_buddy_modify_action(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_auth_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000015) ^ 0x00000015) != 0;
  }
};

BuddyModifyRes::BuddyModifyRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PTP.Buddy.BuddyModifyRes)
}
BuddyModifyRes::BuddyModifyRes(const BuddyModifyRes& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BuddyModifyRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.notify_pairs_){from._impl_.notify_pairs_}
    , decltype(_impl_.value_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.error_){}
    , decltype(_impl_.auth_uid_){}
    , decltype(_impl_.buddy_modify_action_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.error_, &from._impl_.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.buddy_modify_action_) -
    reinterpret_cast<char*>(&_impl_.error_)) + sizeof(_impl_.buddy_modify_action_));
  // @@protoc_insertion_point(copy_constructor:PTP.Buddy.BuddyModifyRes)
}

inline void BuddyModifyRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.notify_pairs_){arena}
    , decltype(_impl_.value_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.error_){0}
    , decltype(_impl_.auth_uid_){0u}
    , decltype(_impl_.buddy_modify_action_){1}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BuddyModifyRes::~BuddyModifyRes() {
  // @@protoc_insertion_point(destructor:PTP.Buddy.BuddyModifyRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuddyModifyRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.notify_pairs_.~RepeatedField();
  _impl_.value_.Destroy();
  _impl_.attach_data_.Destroy();
}

void BuddyModifyRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuddyModifyRes::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.Buddy.BuddyModifyRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.notify_pairs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.attach_data_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.auth_uid_) -
        reinterpret_cast<char*>(&_impl_.error_)) + sizeof(_impl_.auth_uid_));
    _impl_.buddy_modify_action_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BuddyModifyRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .PTP.Common.ERR error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PTP::Common::ERR_IsValid(val))) {
            _internal_set_error(static_cast<::PTP::Common::ERR>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .PTP.Common.BuddyModifyAction buddy_modify_action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PTP::Common::BuddyModifyAction_IsValid(val))) {
            _internal_set_buddy_modify_action(static_cast<::PTP::Common::BuddyModifyAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 notify_pairs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_notify_pairs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_notify_pairs(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 auth_uid = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_auth_uid(&has_bits);
          _impl_.auth_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuddyModifyRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PTP.Buddy.BuddyModifyRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .PTP.Common.ERR error = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error(), target);
  }

  // required .PTP.Common.BuddyModifyAction buddy_modify_action = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_buddy_modify_action(), target);
  }

  // required string value = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  // repeated uint32 notify_pairs = 5;
  for (int i = 0, n = this->_internal_notify_pairs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_notify_pairs(i), target);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  // optional uint32 auth_uid = 21;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_auth_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PTP.Buddy.BuddyModifyRes)
  return target;
}

size_t BuddyModifyRes::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PTP.Buddy.BuddyModifyRes)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required string value = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (_internal_has_error()) {
    // required .PTP.Common.ERR error = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }

  if (_internal_has_buddy_modify_action()) {
    // required .PTP.Common.BuddyModifyAction buddy_modify_action = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_buddy_modify_action());
  }

  return total_size;
}
size_t BuddyModifyRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.Buddy.BuddyModifyRes)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000015) ^ 0x00000015) == 0) {  // All required fields are present.
    // required string value = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

    // required .PTP.Common.ERR error = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error());

    // required .PTP.Common.BuddyModifyAction buddy_modify_action = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_buddy_modify_action());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 notify_pairs = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.notify_pairs_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_notify_pairs_size());
    total_size += data_size;
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // optional uint32 auth_uid = 21;
  if (cached_has_bits & 0x00000008u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_auth_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuddyModifyRes::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BuddyModifyRes*>(
      &from));
}

void BuddyModifyRes::MergeFrom(const BuddyModifyRes& from) {
  BuddyModifyRes* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:PTP.Buddy.BuddyModifyRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.notify_pairs_.MergeFrom(from._impl_.notify_pairs_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_attach_data(from._internal_attach_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.error_ = from._impl_.error_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.auth_uid_ = from._impl_.auth_uid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.buddy_modify_action_ = from._impl_.buddy_modify_action_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BuddyModifyRes::CopyFrom(const BuddyModifyRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.Buddy.BuddyModifyRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddyModifyRes::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void BuddyModifyRes::InternalSwap(BuddyModifyRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.notify_pairs_.InternalSwap(&other->_impl_.notify_pairs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuddyModifyRes, _impl_.auth_uid_)
      + sizeof(BuddyModifyRes::_impl_.auth_uid_)
      - PROTOBUF_FIELD_OFFSET(BuddyModifyRes, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
  swap(_impl_.buddy_modify_action_, other->_impl_.buddy_modify_action_);
}

std::string BuddyModifyRes::GetTypeName() const {
  return "PTP.Buddy.BuddyModifyRes";
}


// ===================================================================

class BuddyModifyNotify::_Internal {
 public:
  using HasBits = decltype(std::declval<BuddyModifyNotify>()._impl_._has_bits_);
  static void set_has_buddy_modify_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

BuddyModifyNotify::BuddyModifyNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PTP.Buddy.BuddyModifyNotify)
}
BuddyModifyNotify::BuddyModifyNotify(const BuddyModifyNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BuddyModifyNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.buddy_modify_action_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.uid_, &from._impl_.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.buddy_modify_action_) -
    reinterpret_cast<char*>(&_impl_.uid_)) + sizeof(_impl_.buddy_modify_action_));
  // @@protoc_insertion_point(copy_constructor:PTP.Buddy.BuddyModifyNotify)
}

inline void BuddyModifyNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.uid_){0u}
    , decltype(_impl_.buddy_modify_action_){1}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BuddyModifyNotify::~BuddyModifyNotify() {
  // @@protoc_insertion_point(destructor:PTP.Buddy.BuddyModifyNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuddyModifyNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void BuddyModifyNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuddyModifyNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.Buddy.BuddyModifyNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.value_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    _impl_.uid_ = 0u;
    _impl_.buddy_modify_action_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BuddyModifyNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .PTP.Common.BuddyModifyAction buddy_modify_action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PTP::Common::BuddyModifyAction_IsValid(val))) {
            _internal_set_buddy_modify_action(static_cast<::PTP::Common::BuddyModifyAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint32 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_uid(&has_bits);
          _impl_.uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuddyModifyNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PTP.Buddy.BuddyModifyNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .PTP.Common.BuddyModifyAction buddy_modify_action = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_buddy_modify_action(), target);
  }

  // required uint32 uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  // required string value = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PTP.Buddy.BuddyModifyNotify)
  return target;
}

size_t BuddyModifyNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PTP.Buddy.BuddyModifyNotify)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required string value = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (_internal_has_uid()) {
    // required uint32 uid = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uid());
  }

  if (_internal_has_buddy_modify_action()) {
    // required .PTP.Common.BuddyModifyAction buddy_modify_action = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_buddy_modify_action());
  }

  return total_size;
}
size_t BuddyModifyNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.Buddy.BuddyModifyNotify)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string value = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

    // required uint32 uid = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uid());

    // required .PTP.Common.BuddyModifyAction buddy_modify_action = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_buddy_modify_action());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuddyModifyNotify::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BuddyModifyNotify*>(
      &from));
}

void BuddyModifyNotify::MergeFrom(const BuddyModifyNotify& from) {
  BuddyModifyNotify* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:PTP.Buddy.BuddyModifyNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.uid_ = from._impl_.uid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.buddy_modify_action_ = from._impl_.buddy_modify_action_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BuddyModifyNotify::CopyFrom(const BuddyModifyNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.Buddy.BuddyModifyNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddyModifyNotify::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void BuddyModifyNotify::InternalSwap(BuddyModifyNotify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.uid_, other->_impl_.uid_);
  swap(_impl_.buddy_modify_action_, other->_impl_.buddy_modify_action_);
}

std::string BuddyModifyNotify::GetTypeName() const {
  return "PTP.Buddy.BuddyModifyNotify";
}


// ===================================================================

class BuddyModifyUpdatePair::_Internal {
 public:
  using HasBits = decltype(std::declval<BuddyModifyUpdatePair>()._impl_._has_bits_);
  static void set_has_auth_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

BuddyModifyUpdatePair::BuddyModifyUpdatePair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PTP.Buddy.BuddyModifyUpdatePair)
}
BuddyModifyUpdatePair::BuddyModifyUpdatePair(const BuddyModifyUpdatePair& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BuddyModifyUpdatePair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pair_uid_list_){from._impl_.pair_uid_list_}
    , decltype(_impl_.auth_uid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.auth_uid_ = from._impl_.auth_uid_;
  // @@protoc_insertion_point(copy_constructor:PTP.Buddy.BuddyModifyUpdatePair)
}

inline void BuddyModifyUpdatePair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pair_uid_list_){arena}
    , decltype(_impl_.auth_uid_){0u}
  };
}

BuddyModifyUpdatePair::~BuddyModifyUpdatePair() {
  // @@protoc_insertion_point(destructor:PTP.Buddy.BuddyModifyUpdatePair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuddyModifyUpdatePair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pair_uid_list_.~RepeatedField();
}

void BuddyModifyUpdatePair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuddyModifyUpdatePair::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.Buddy.BuddyModifyUpdatePair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pair_uid_list_.Clear();
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BuddyModifyUpdatePair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 pair_uid_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_pair_uid_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_pair_uid_list(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 auth_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_auth_uid(&has_bits);
          _impl_.auth_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuddyModifyUpdatePair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PTP.Buddy.BuddyModifyUpdatePair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 pair_uid_list = 1;
  for (int i = 0, n = this->_internal_pair_uid_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pair_uid_list(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 auth_uid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_auth_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PTP.Buddy.BuddyModifyUpdatePair)
  return target;
}

size_t BuddyModifyUpdatePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.Buddy.BuddyModifyUpdatePair)
  size_t total_size = 0;

  // required uint32 auth_uid = 2;
  if (_internal_has_auth_uid()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_auth_uid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 pair_uid_list = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.pair_uid_list_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_pair_uid_list_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuddyModifyUpdatePair::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BuddyModifyUpdatePair*>(
      &from));
}

void BuddyModifyUpdatePair::MergeFrom(const BuddyModifyUpdatePair& from) {
  BuddyModifyUpdatePair* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:PTP.Buddy.BuddyModifyUpdatePair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pair_uid_list_.MergeFrom(from._impl_.pair_uid_list_);
  if (from._internal_has_auth_uid()) {
    _this->_internal_set_auth_uid(from._internal_auth_uid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BuddyModifyUpdatePair::CopyFrom(const BuddyModifyUpdatePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.Buddy.BuddyModifyUpdatePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddyModifyUpdatePair::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void BuddyModifyUpdatePair::InternalSwap(BuddyModifyUpdatePair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.pair_uid_list_.InternalSwap(&other->_impl_.pair_uid_list_);
  swap(_impl_.auth_uid_, other->_impl_.auth_uid_);
}

std::string BuddyModifyUpdatePair::GetTypeName() const {
  return "PTP.Buddy.BuddyModifyUpdatePair";
}


// ===================================================================

class BuddyImportContactsReq::_Internal {
 public:
  using HasBits = decltype(std::declval<BuddyImportContactsReq>()._impl_._has_bits_);
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_auth_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void BuddyImportContactsReq::clear_phone_contacts() {
  _impl_.phone_contacts_.Clear();
}
BuddyImportContactsReq::BuddyImportContactsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PTP.Buddy.BuddyImportContactsReq)
}
BuddyImportContactsReq::BuddyImportContactsReq(const BuddyImportContactsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BuddyImportContactsReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.phone_contacts_){from._impl_.phone_contacts_}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.auth_uid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.auth_uid_ = from._impl_.auth_uid_;
  // @@protoc_insertion_point(copy_constructor:PTP.Buddy.BuddyImportContactsReq)
}

inline void BuddyImportContactsReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.phone_contacts_){arena}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.auth_uid_){0u}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BuddyImportContactsReq::~BuddyImportContactsReq() {
  // @@protoc_insertion_point(destructor:PTP.Buddy.BuddyImportContactsReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuddyImportContactsReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.phone_contacts_.~RepeatedPtrField();
  _impl_.attach_data_.Destroy();
}

void BuddyImportContactsReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuddyImportContactsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.Buddy.BuddyImportContactsReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.phone_contacts_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BuddyImportContactsReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PTP.Common.InputPhoneContact phone_contacts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_phone_contacts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 auth_uid = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_auth_uid(&has_bits);
          _impl_.auth_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuddyImportContactsReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PTP.Buddy.BuddyImportContactsReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PTP.Common.InputPhoneContact phone_contacts = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_phone_contacts_size()); i < n; i++) {
    const auto& repfield = this->_internal_phone_contacts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  // optional uint32 auth_uid = 21;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_auth_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PTP.Buddy.BuddyImportContactsReq)
  return target;
}

size_t BuddyImportContactsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.Buddy.BuddyImportContactsReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PTP.Common.InputPhoneContact phone_contacts = 1;
  total_size += 1UL * this->_internal_phone_contacts_size();
  for (const auto& msg : this->_impl_.phone_contacts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes attach_data = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_attach_data());
    }

    // optional uint32 auth_uid = 21;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_auth_uid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuddyImportContactsReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BuddyImportContactsReq*>(
      &from));
}

void BuddyImportContactsReq::MergeFrom(const BuddyImportContactsReq& from) {
  BuddyImportContactsReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:PTP.Buddy.BuddyImportContactsReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.phone_contacts_.MergeFrom(from._impl_.phone_contacts_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_attach_data(from._internal_attach_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.auth_uid_ = from._impl_.auth_uid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BuddyImportContactsReq::CopyFrom(const BuddyImportContactsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.Buddy.BuddyImportContactsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddyImportContactsReq::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.phone_contacts_))
    return false;
  return true;
}

void BuddyImportContactsReq::InternalSwap(BuddyImportContactsReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.phone_contacts_.InternalSwap(&other->_impl_.phone_contacts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  swap(_impl_.auth_uid_, other->_impl_.auth_uid_);
}

std::string BuddyImportContactsReq::GetTypeName() const {
  return "PTP.Buddy.BuddyImportContactsReq";
}


// ===================================================================

class BuddyImportContactsRes::_Internal {
 public:
  using HasBits = decltype(std::declval<BuddyImportContactsRes>()._impl_._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_auth_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

BuddyImportContactsRes::BuddyImportContactsRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PTP.Buddy.BuddyImportContactsRes)
}
BuddyImportContactsRes::BuddyImportContactsRes(const BuddyImportContactsRes& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BuddyImportContactsRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.error_){}
    , decltype(_impl_.auth_uid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.error_, &from._impl_.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.auth_uid_) -
    reinterpret_cast<char*>(&_impl_.error_)) + sizeof(_impl_.auth_uid_));
  // @@protoc_insertion_point(copy_constructor:PTP.Buddy.BuddyImportContactsRes)
}

inline void BuddyImportContactsRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.error_){0}
    , decltype(_impl_.auth_uid_){0u}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BuddyImportContactsRes::~BuddyImportContactsRes() {
  // @@protoc_insertion_point(destructor:PTP.Buddy.BuddyImportContactsRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuddyImportContactsRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attach_data_.Destroy();
}

void BuddyImportContactsRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuddyImportContactsRes::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.Buddy.BuddyImportContactsRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.auth_uid_) -
        reinterpret_cast<char*>(&_impl_.error_)) + sizeof(_impl_.auth_uid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BuddyImportContactsRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .PTP.Common.ERR error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PTP::Common::ERR_IsValid(val))) {
            _internal_set_error(static_cast<::PTP::Common::ERR>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 auth_uid = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_auth_uid(&has_bits);
          _impl_.auth_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuddyImportContactsRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PTP.Buddy.BuddyImportContactsRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .PTP.Common.ERR error = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error(), target);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  // optional uint32 auth_uid = 21;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_auth_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PTP.Buddy.BuddyImportContactsRes)
  return target;
}

size_t BuddyImportContactsRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.Buddy.BuddyImportContactsRes)
  size_t total_size = 0;

  // required .PTP.Common.ERR error = 1;
  if (_internal_has_error()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // optional uint32 auth_uid = 21;
  if (cached_has_bits & 0x00000004u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_auth_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuddyImportContactsRes::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BuddyImportContactsRes*>(
      &from));
}

void BuddyImportContactsRes::MergeFrom(const BuddyImportContactsRes& from) {
  BuddyImportContactsRes* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:PTP.Buddy.BuddyImportContactsRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_attach_data(from._internal_attach_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.error_ = from._impl_.error_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.auth_uid_ = from._impl_.auth_uid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BuddyImportContactsRes::CopyFrom(const BuddyImportContactsRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.Buddy.BuddyImportContactsRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddyImportContactsRes::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void BuddyImportContactsRes::InternalSwap(BuddyImportContactsRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuddyImportContactsRes, _impl_.auth_uid_)
      + sizeof(BuddyImportContactsRes::_impl_.auth_uid_)
      - PROTOBUF_FIELD_OFFSET(BuddyImportContactsRes, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
}

std::string BuddyImportContactsRes::GetTypeName() const {
  return "PTP.Buddy.BuddyImportContactsRes";
}


// ===================================================================

class BuddyQueryListReq::_Internal {
 public:
  using HasBits = decltype(std::declval<BuddyQueryListReq>()._impl_._has_bits_);
  static const ::PTP::Common::BuddyQueryParam& params(const BuddyQueryListReq* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_auth_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::PTP::Common::BuddyQueryParam&
BuddyQueryListReq::_Internal::params(const BuddyQueryListReq* msg) {
  return *msg->_impl_.params_;
}
void BuddyQueryListReq::clear_params() {
  if (_impl_.params_ != nullptr) _impl_.params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
BuddyQueryListReq::BuddyQueryListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PTP.Buddy.BuddyQueryListReq)
}
BuddyQueryListReq::BuddyQueryListReq(const BuddyQueryListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BuddyQueryListReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.params_){nullptr}
    , decltype(_impl_.auth_uid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_params()) {
    _this->_impl_.params_ = new ::PTP::Common::BuddyQueryParam(*from._impl_.params_);
  }
  _this->_impl_.auth_uid_ = from._impl_.auth_uid_;
  // @@protoc_insertion_point(copy_constructor:PTP.Buddy.BuddyQueryListReq)
}

inline void BuddyQueryListReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.params_){nullptr}
    , decltype(_impl_.auth_uid_){0u}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BuddyQueryListReq::~BuddyQueryListReq() {
  // @@protoc_insertion_point(destructor:PTP.Buddy.BuddyQueryListReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuddyQueryListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attach_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.params_;
}

void BuddyQueryListReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuddyQueryListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.Buddy.BuddyQueryListReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.attach_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.params_ != nullptr);
      _impl_.params_->Clear();
    }
  }
  _impl_.auth_uid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BuddyQueryListReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .PTP.Common.BuddyQueryParam params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 auth_uid = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_auth_uid(&has_bits);
          _impl_.auth_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuddyQueryListReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PTP.Buddy.BuddyQueryListReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .PTP.Common.BuddyQueryParam params = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  // optional uint32 auth_uid = 21;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_auth_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PTP.Buddy.BuddyQueryListReq)
  return target;
}

size_t BuddyQueryListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.Buddy.BuddyQueryListReq)
  size_t total_size = 0;

  // required .PTP.Common.BuddyQueryParam params = 1;
  if (_internal_has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // optional uint32 auth_uid = 21;
  if (cached_has_bits & 0x00000004u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_auth_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuddyQueryListReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BuddyQueryListReq*>(
      &from));
}

void BuddyQueryListReq::MergeFrom(const BuddyQueryListReq& from) {
  BuddyQueryListReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:PTP.Buddy.BuddyQueryListReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_attach_data(from._internal_attach_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_params()->::PTP::Common::BuddyQueryParam::MergeFrom(
          from._internal_params());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.auth_uid_ = from._impl_.auth_uid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BuddyQueryListReq::CopyFrom(const BuddyQueryListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.Buddy.BuddyQueryListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddyQueryListReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void BuddyQueryListReq::InternalSwap(BuddyQueryListReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuddyQueryListReq, _impl_.auth_uid_)
      + sizeof(BuddyQueryListReq::_impl_.auth_uid_)
      - PROTOBUF_FIELD_OFFSET(BuddyQueryListReq, _impl_.params_)>(
          reinterpret_cast<char*>(&_impl_.params_),
          reinterpret_cast<char*>(&other->_impl_.params_));
}

std::string BuddyQueryListReq::GetTypeName() const {
  return "PTP.Buddy.BuddyQueryListReq";
}


// ===================================================================

class BuddyQueryListRes::_Internal {
 public:
  using HasBits = decltype(std::declval<BuddyQueryListRes>()._impl_._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_auth_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

void BuddyQueryListRes::clear_buddy_list() {
  _impl_.buddy_list_.Clear();
}
BuddyQueryListRes::BuddyQueryListRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PTP.Buddy.BuddyQueryListRes)
}
BuddyQueryListRes::BuddyQueryListRes(const BuddyQueryListRes& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BuddyQueryListRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buddy_list_){from._impl_.buddy_list_}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.error_){}
    , decltype(_impl_.auth_uid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.error_, &from._impl_.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.auth_uid_) -
    reinterpret_cast<char*>(&_impl_.error_)) + sizeof(_impl_.auth_uid_));
  // @@protoc_insertion_point(copy_constructor:PTP.Buddy.BuddyQueryListRes)
}

inline void BuddyQueryListRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buddy_list_){arena}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.error_){0}
    , decltype(_impl_.auth_uid_){0u}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BuddyQueryListRes::~BuddyQueryListRes() {
  // @@protoc_insertion_point(destructor:PTP.Buddy.BuddyQueryListRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuddyQueryListRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buddy_list_.~RepeatedPtrField();
  _impl_.attach_data_.Destroy();
}

void BuddyQueryListRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuddyQueryListRes::Clear() {
// @@protoc_insertion_point(message_clear_start:PTP.Buddy.BuddyQueryListRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buddy_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.auth_uid_) -
        reinterpret_cast<char*>(&_impl_.error_)) + sizeof(_impl_.auth_uid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BuddyQueryListRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .PTP.Common.ERR error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PTP::Common::ERR_IsValid(val))) {
            _internal_set_error(static_cast<::PTP::Common::ERR>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .PTP.Common.UserInfo buddy_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buddy_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 auth_uid = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_auth_uid(&has_bits);
          _impl_.auth_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuddyQueryListRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PTP.Buddy.BuddyQueryListRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .PTP.Common.ERR error = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error(), target);
  }

  // repeated .PTP.Common.UserInfo buddy_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buddy_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_buddy_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  // optional uint32 auth_uid = 21;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_auth_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PTP.Buddy.BuddyQueryListRes)
  return target;
}

size_t BuddyQueryListRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTP.Buddy.BuddyQueryListRes)
  size_t total_size = 0;

  // required .PTP.Common.ERR error = 1;
  if (_internal_has_error()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PTP.Common.UserInfo buddy_list = 2;
  total_size += 1UL * this->_internal_buddy_list_size();
  for (const auto& msg : this->_impl_.buddy_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // optional uint32 auth_uid = 21;
  if (cached_has_bits & 0x00000004u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_auth_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuddyQueryListRes::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BuddyQueryListRes*>(
      &from));
}

void BuddyQueryListRes::MergeFrom(const BuddyQueryListRes& from) {
  BuddyQueryListRes* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:PTP.Buddy.BuddyQueryListRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buddy_list_.MergeFrom(from._impl_.buddy_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_attach_data(from._internal_attach_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.error_ = from._impl_.error_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.auth_uid_ = from._impl_.auth_uid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BuddyQueryListRes::CopyFrom(const BuddyQueryListRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTP.Buddy.BuddyQueryListRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddyQueryListRes::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.buddy_list_))
    return false;
  return true;
}

void BuddyQueryListRes::InternalSwap(BuddyQueryListRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.buddy_list_.InternalSwap(&other->_impl_.buddy_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuddyQueryListRes, _impl_.auth_uid_)
      + sizeof(BuddyQueryListRes::_impl_.auth_uid_)
      - PROTOBUF_FIELD_OFFSET(BuddyQueryListRes, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
}

std::string BuddyQueryListRes::GetTypeName() const {
  return "PTP.Buddy.BuddyQueryListRes";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Buddy
}  // namespace PTP
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PTP::Buddy::BuddyGetListReq*
Arena::CreateMaybeMessage< ::PTP::Buddy::BuddyGetListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PTP::Buddy::BuddyGetListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::PTP::Buddy::BuddyGetListRes*
Arena::CreateMaybeMessage< ::PTP::Buddy::BuddyGetListRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PTP::Buddy::BuddyGetListRes >(arena);
}
template<> PROTOBUF_NOINLINE ::PTP::Buddy::BuddyGetALLReq*
Arena::CreateMaybeMessage< ::PTP::Buddy::BuddyGetALLReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PTP::Buddy::BuddyGetALLReq >(arena);
}
template<> PROTOBUF_NOINLINE ::PTP::Buddy::BuddyGetALLRes*
Arena::CreateMaybeMessage< ::PTP::Buddy::BuddyGetALLRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PTP::Buddy::BuddyGetALLRes >(arena);
}
template<> PROTOBUF_NOINLINE ::PTP::Buddy::BuddyGetStatReq*
Arena::CreateMaybeMessage< ::PTP::Buddy::BuddyGetStatReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PTP::Buddy::BuddyGetStatReq >(arena);
}
template<> PROTOBUF_NOINLINE ::PTP::Buddy::BuddyGetStatRes*
Arena::CreateMaybeMessage< ::PTP::Buddy::BuddyGetStatRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PTP::Buddy::BuddyGetStatRes >(arena);
}
template<> PROTOBUF_NOINLINE ::PTP::Buddy::BuddyStatNotify*
Arena::CreateMaybeMessage< ::PTP::Buddy::BuddyStatNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PTP::Buddy::BuddyStatNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::PTP::Buddy::BuddyModifyReq*
Arena::CreateMaybeMessage< ::PTP::Buddy::BuddyModifyReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PTP::Buddy::BuddyModifyReq >(arena);
}
template<> PROTOBUF_NOINLINE ::PTP::Buddy::BuddyModifyRes*
Arena::CreateMaybeMessage< ::PTP::Buddy::BuddyModifyRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PTP::Buddy::BuddyModifyRes >(arena);
}
template<> PROTOBUF_NOINLINE ::PTP::Buddy::BuddyModifyNotify*
Arena::CreateMaybeMessage< ::PTP::Buddy::BuddyModifyNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PTP::Buddy::BuddyModifyNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::PTP::Buddy::BuddyModifyUpdatePair*
Arena::CreateMaybeMessage< ::PTP::Buddy::BuddyModifyUpdatePair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PTP::Buddy::BuddyModifyUpdatePair >(arena);
}
template<> PROTOBUF_NOINLINE ::PTP::Buddy::BuddyImportContactsReq*
Arena::CreateMaybeMessage< ::PTP::Buddy::BuddyImportContactsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PTP::Buddy::BuddyImportContactsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::PTP::Buddy::BuddyImportContactsRes*
Arena::CreateMaybeMessage< ::PTP::Buddy::BuddyImportContactsRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PTP::Buddy::BuddyImportContactsRes >(arena);
}
template<> PROTOBUF_NOINLINE ::PTP::Buddy::BuddyQueryListReq*
Arena::CreateMaybeMessage< ::PTP::Buddy::BuddyQueryListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PTP::Buddy::BuddyQueryListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::PTP::Buddy::BuddyQueryListRes*
Arena::CreateMaybeMessage< ::PTP::Buddy::BuddyQueryListRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PTP::Buddy::BuddyQueryListRes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
