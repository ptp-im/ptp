// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PTP.Auth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PTP_2eAuth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PTP_2eAuth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "PTP.Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PTP_2eAuth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PTP_2eAuth_2eproto {
  static const uint32_t offsets[];
};
namespace PTP {
namespace Auth {
class AuthCaptchaReq;
struct AuthCaptchaReqDefaultTypeInternal;
extern AuthCaptchaReqDefaultTypeInternal _AuthCaptchaReq_default_instance_;
class AuthCaptchaRes;
struct AuthCaptchaResDefaultTypeInternal;
extern AuthCaptchaResDefaultTypeInternal _AuthCaptchaRes_default_instance_;
class AuthLoginReq;
struct AuthLoginReqDefaultTypeInternal;
extern AuthLoginReqDefaultTypeInternal _AuthLoginReq_default_instance_;
class AuthLoginRes;
struct AuthLoginResDefaultTypeInternal;
extern AuthLoginResDefaultTypeInternal _AuthLoginRes_default_instance_;
class AuthLogoutReq;
struct AuthLogoutReqDefaultTypeInternal;
extern AuthLogoutReqDefaultTypeInternal _AuthLogoutReq_default_instance_;
class AuthLogoutRes;
struct AuthLogoutResDefaultTypeInternal;
extern AuthLogoutResDefaultTypeInternal _AuthLogoutRes_default_instance_;
}  // namespace Auth
}  // namespace PTP
PROTOBUF_NAMESPACE_OPEN
template<> ::PTP::Auth::AuthCaptchaReq* Arena::CreateMaybeMessage<::PTP::Auth::AuthCaptchaReq>(Arena*);
template<> ::PTP::Auth::AuthCaptchaRes* Arena::CreateMaybeMessage<::PTP::Auth::AuthCaptchaRes>(Arena*);
template<> ::PTP::Auth::AuthLoginReq* Arena::CreateMaybeMessage<::PTP::Auth::AuthLoginReq>(Arena*);
template<> ::PTP::Auth::AuthLoginRes* Arena::CreateMaybeMessage<::PTP::Auth::AuthLoginRes>(Arena*);
template<> ::PTP::Auth::AuthLogoutReq* Arena::CreateMaybeMessage<::PTP::Auth::AuthLogoutReq>(Arena*);
template<> ::PTP::Auth::AuthLogoutRes* Arena::CreateMaybeMessage<::PTP::Auth::AuthLogoutRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PTP {
namespace Auth {

// ===================================================================

class AuthCaptchaReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Auth.AuthCaptchaReq) */ {
 public:
  inline AuthCaptchaReq() : AuthCaptchaReq(nullptr) {}
  ~AuthCaptchaReq() override;
  explicit PROTOBUF_CONSTEXPR AuthCaptchaReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthCaptchaReq(const AuthCaptchaReq& from);
  AuthCaptchaReq(AuthCaptchaReq&& from) noexcept
    : AuthCaptchaReq() {
    *this = ::std::move(from);
  }

  inline AuthCaptchaReq& operator=(const AuthCaptchaReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthCaptchaReq& operator=(AuthCaptchaReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AuthCaptchaReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthCaptchaReq* internal_default_instance() {
    return reinterpret_cast<const AuthCaptchaReq*>(
               &_AuthCaptchaReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AuthCaptchaReq& a, AuthCaptchaReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthCaptchaReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthCaptchaReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthCaptchaReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthCaptchaReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AuthCaptchaReq& from);
  void MergeFrom(const AuthCaptchaReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthCaptchaReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Auth.AuthCaptchaReq";
  }
  protected:
  explicit AuthCaptchaReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PTP.Auth.AuthCaptchaReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eAuth_2eproto;
};
// -------------------------------------------------------------------

class AuthCaptchaRes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Auth.AuthCaptchaRes) */ {
 public:
  inline AuthCaptchaRes() : AuthCaptchaRes(nullptr) {}
  ~AuthCaptchaRes() override;
  explicit PROTOBUF_CONSTEXPR AuthCaptchaRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthCaptchaRes(const AuthCaptchaRes& from);
  AuthCaptchaRes(AuthCaptchaRes&& from) noexcept
    : AuthCaptchaRes() {
    *this = ::std::move(from);
  }

  inline AuthCaptchaRes& operator=(const AuthCaptchaRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthCaptchaRes& operator=(AuthCaptchaRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AuthCaptchaRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthCaptchaRes* internal_default_instance() {
    return reinterpret_cast<const AuthCaptchaRes*>(
               &_AuthCaptchaRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AuthCaptchaRes& a, AuthCaptchaRes& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthCaptchaRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthCaptchaRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthCaptchaRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthCaptchaRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AuthCaptchaRes& from);
  void MergeFrom(const AuthCaptchaRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthCaptchaRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Auth.AuthCaptchaRes";
  }
  protected:
  explicit AuthCaptchaRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaptchaFieldNumber = 1,
    kAddressFieldNumber = 2,
    kIvFieldNumber = 3,
    kAadFieldNumber = 4,
    kSignFieldNumber = 5,
    kErrorFieldNumber = 6,
  };
  // required string captcha = 1;
  bool has_captcha() const;
  private:
  bool _internal_has_captcha() const;
  public:
  void clear_captcha();
  const std::string& captcha() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_captcha(ArgT0&& arg0, ArgT... args);
  std::string* mutable_captcha();
  PROTOBUF_NODISCARD std::string* release_captcha();
  void set_allocated_captcha(std::string* captcha);
  private:
  const std::string& _internal_captcha() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_captcha(const std::string& value);
  std::string* _internal_mutable_captcha();
  public:

  // required bytes address = 2;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // required bytes iv = 3;
  bool has_iv() const;
  private:
  bool _internal_has_iv() const;
  public:
  void clear_iv();
  const std::string& iv() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_iv(ArgT0&& arg0, ArgT... args);
  std::string* mutable_iv();
  PROTOBUF_NODISCARD std::string* release_iv();
  void set_allocated_iv(std::string* iv);
  private:
  const std::string& _internal_iv() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_iv(const std::string& value);
  std::string* _internal_mutable_iv();
  public:

  // required bytes aad = 4;
  bool has_aad() const;
  private:
  bool _internal_has_aad() const;
  public:
  void clear_aad();
  const std::string& aad() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_aad(ArgT0&& arg0, ArgT... args);
  std::string* mutable_aad();
  PROTOBUF_NODISCARD std::string* release_aad();
  void set_allocated_aad(std::string* aad);
  private:
  const std::string& _internal_aad() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_aad(const std::string& value);
  std::string* _internal_mutable_aad();
  public:

  // required bytes sign = 5;
  bool has_sign() const;
  private:
  bool _internal_has_sign() const;
  public:
  void clear_sign();
  const std::string& sign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sign();
  PROTOBUF_NODISCARD std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // required .PTP.Common.ERR error = 6;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);
  private:
  ::PTP::Common::ERR _internal_error() const;
  void _internal_set_error(::PTP::Common::ERR value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Auth.AuthCaptchaRes)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr captcha_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iv_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aad_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
    int error_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eAuth_2eproto;
};
// -------------------------------------------------------------------

class AuthLoginReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Auth.AuthLoginReq) */ {
 public:
  inline AuthLoginReq() : AuthLoginReq(nullptr) {}
  ~AuthLoginReq() override;
  explicit PROTOBUF_CONSTEXPR AuthLoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthLoginReq(const AuthLoginReq& from);
  AuthLoginReq(AuthLoginReq&& from) noexcept
    : AuthLoginReq() {
    *this = ::std::move(from);
  }

  inline AuthLoginReq& operator=(const AuthLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthLoginReq& operator=(AuthLoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AuthLoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthLoginReq* internal_default_instance() {
    return reinterpret_cast<const AuthLoginReq*>(
               &_AuthLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AuthLoginReq& a, AuthLoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthLoginReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthLoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthLoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthLoginReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AuthLoginReq& from);
  void MergeFrom(const AuthLoginReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthLoginReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Auth.AuthLoginReq";
  }
  protected:
  explicit AuthLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kCaptchaFieldNumber = 2,
    kClientVersionFieldNumber = 5,
    kSignFieldNumber = 6,
    kClientTypeFieldNumber = 3,
  };
  // required string address = 1;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // required string captcha = 2;
  bool has_captcha() const;
  private:
  bool _internal_has_captcha() const;
  public:
  void clear_captcha();
  const std::string& captcha() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_captcha(ArgT0&& arg0, ArgT... args);
  std::string* mutable_captcha();
  PROTOBUF_NODISCARD std::string* release_captcha();
  void set_allocated_captcha(std::string* captcha);
  private:
  const std::string& _internal_captcha() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_captcha(const std::string& value);
  std::string* _internal_mutable_captcha();
  public:

  // optional string client_version = 5;
  bool has_client_version() const;
  private:
  bool _internal_has_client_version() const;
  public:
  void clear_client_version();
  const std::string& client_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_version();
  PROTOBUF_NODISCARD std::string* release_client_version();
  void set_allocated_client_version(std::string* client_version);
  private:
  const std::string& _internal_client_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_version(const std::string& value);
  std::string* _internal_mutable_client_version();
  public:

  // required bytes sign = 6;
  bool has_sign() const;
  private:
  bool _internal_has_sign() const;
  public:
  void clear_sign();
  const std::string& sign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sign();
  PROTOBUF_NODISCARD std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // required .PTP.Common.ClientType client_type = 3;
  bool has_client_type() const;
  private:
  bool _internal_has_client_type() const;
  public:
  void clear_client_type();
  ::PTP::Common::ClientType client_type() const;
  void set_client_type(::PTP::Common::ClientType value);
  private:
  ::PTP::Common::ClientType _internal_client_type() const;
  void _internal_set_client_type(::PTP::Common::ClientType value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Auth.AuthLoginReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr captcha_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
    int client_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eAuth_2eproto;
};
// -------------------------------------------------------------------

class AuthLoginRes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Auth.AuthLoginRes) */ {
 public:
  inline AuthLoginRes() : AuthLoginRes(nullptr) {}
  ~AuthLoginRes() override;
  explicit PROTOBUF_CONSTEXPR AuthLoginRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthLoginRes(const AuthLoginRes& from);
  AuthLoginRes(AuthLoginRes&& from) noexcept
    : AuthLoginRes() {
    *this = ::std::move(from);
  }

  inline AuthLoginRes& operator=(const AuthLoginRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthLoginRes& operator=(AuthLoginRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AuthLoginRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthLoginRes* internal_default_instance() {
    return reinterpret_cast<const AuthLoginRes*>(
               &_AuthLoginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AuthLoginRes& a, AuthLoginRes& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthLoginRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthLoginRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthLoginRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthLoginRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AuthLoginRes& from);
  void MergeFrom(const AuthLoginRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthLoginRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Auth.AuthLoginRes";
  }
  protected:
  explicit AuthLoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 5,
    kErrorFieldNumber = 2,
  };
  // optional .PTP.Common.UserInfo user_info = 5;
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::PTP::Common::UserInfo& user_info() const;
  PROTOBUF_NODISCARD ::PTP::Common::UserInfo* release_user_info();
  ::PTP::Common::UserInfo* mutable_user_info();
  void set_allocated_user_info(::PTP::Common::UserInfo* user_info);
  private:
  const ::PTP::Common::UserInfo& _internal_user_info() const;
  ::PTP::Common::UserInfo* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::PTP::Common::UserInfo* user_info);
  ::PTP::Common::UserInfo* unsafe_arena_release_user_info();

  // required .PTP.Common.ERR error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);
  private:
  ::PTP::Common::ERR _internal_error() const;
  void _internal_set_error(::PTP::Common::ERR value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Auth.AuthLoginRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PTP::Common::UserInfo* user_info_;
    int error_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eAuth_2eproto;
};
// -------------------------------------------------------------------

class AuthLogoutReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Auth.AuthLogoutReq) */ {
 public:
  inline AuthLogoutReq() : AuthLogoutReq(nullptr) {}
  ~AuthLogoutReq() override;
  explicit PROTOBUF_CONSTEXPR AuthLogoutReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthLogoutReq(const AuthLogoutReq& from);
  AuthLogoutReq(AuthLogoutReq&& from) noexcept
    : AuthLogoutReq() {
    *this = ::std::move(from);
  }

  inline AuthLogoutReq& operator=(const AuthLogoutReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthLogoutReq& operator=(AuthLogoutReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AuthLogoutReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthLogoutReq* internal_default_instance() {
    return reinterpret_cast<const AuthLogoutReq*>(
               &_AuthLogoutReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AuthLogoutReq& a, AuthLogoutReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthLogoutReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthLogoutReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthLogoutReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthLogoutReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AuthLogoutReq& from);
  void MergeFrom(const AuthLogoutReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthLogoutReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Auth.AuthLogoutReq";
  }
  protected:
  explicit AuthLogoutReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PTP.Auth.AuthLogoutReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eAuth_2eproto;
};
// -------------------------------------------------------------------

class AuthLogoutRes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PTP.Auth.AuthLogoutRes) */ {
 public:
  inline AuthLogoutRes() : AuthLogoutRes(nullptr) {}
  ~AuthLogoutRes() override;
  explicit PROTOBUF_CONSTEXPR AuthLogoutRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthLogoutRes(const AuthLogoutRes& from);
  AuthLogoutRes(AuthLogoutRes&& from) noexcept
    : AuthLogoutRes() {
    *this = ::std::move(from);
  }

  inline AuthLogoutRes& operator=(const AuthLogoutRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthLogoutRes& operator=(AuthLogoutRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AuthLogoutRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthLogoutRes* internal_default_instance() {
    return reinterpret_cast<const AuthLogoutRes*>(
               &_AuthLogoutRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AuthLogoutRes& a, AuthLogoutRes& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthLogoutRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthLogoutRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthLogoutRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthLogoutRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AuthLogoutRes& from);
  void MergeFrom(const AuthLogoutRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthLogoutRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTP.Auth.AuthLogoutRes";
  }
  protected:
  explicit AuthLogoutRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 3,
  };
  // required .PTP.Common.ERR error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::PTP::Common::ERR error() const;
  void set_error(::PTP::Common::ERR value);
  private:
  ::PTP::Common::ERR _internal_error() const;
  void _internal_set_error(::PTP::Common::ERR value);
  public:

  // @@protoc_insertion_point(class_scope:PTP.Auth.AuthLogoutRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int error_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PTP_2eAuth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuthCaptchaReq

// -------------------------------------------------------------------

// AuthCaptchaRes

// required string captcha = 1;
inline bool AuthCaptchaRes::_internal_has_captcha() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthCaptchaRes::has_captcha() const {
  return _internal_has_captcha();
}
inline void AuthCaptchaRes::clear_captcha() {
  _impl_.captcha_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthCaptchaRes::captcha() const {
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthCaptchaRes.captcha)
  return _internal_captcha();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthCaptchaRes::set_captcha(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.captcha_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Auth.AuthCaptchaRes.captcha)
}
inline std::string* AuthCaptchaRes::mutable_captcha() {
  std::string* _s = _internal_mutable_captcha();
  // @@protoc_insertion_point(field_mutable:PTP.Auth.AuthCaptchaRes.captcha)
  return _s;
}
inline const std::string& AuthCaptchaRes::_internal_captcha() const {
  return _impl_.captcha_.Get();
}
inline void AuthCaptchaRes::_internal_set_captcha(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.captcha_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthCaptchaRes::_internal_mutable_captcha() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.captcha_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthCaptchaRes::release_captcha() {
  // @@protoc_insertion_point(field_release:PTP.Auth.AuthCaptchaRes.captcha)
  if (!_internal_has_captcha()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.captcha_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.captcha_.IsDefault()) {
    _impl_.captcha_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AuthCaptchaRes::set_allocated_captcha(std::string* captcha) {
  if (captcha != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.captcha_.SetAllocated(captcha, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.captcha_.IsDefault()) {
    _impl_.captcha_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Auth.AuthCaptchaRes.captcha)
}

// required bytes address = 2;
inline bool AuthCaptchaRes::_internal_has_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthCaptchaRes::has_address() const {
  return _internal_has_address();
}
inline void AuthCaptchaRes::clear_address() {
  _impl_.address_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AuthCaptchaRes::address() const {
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthCaptchaRes.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthCaptchaRes::set_address(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.address_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Auth.AuthCaptchaRes.address)
}
inline std::string* AuthCaptchaRes::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:PTP.Auth.AuthCaptchaRes.address)
  return _s;
}
inline const std::string& AuthCaptchaRes::_internal_address() const {
  return _impl_.address_.Get();
}
inline void AuthCaptchaRes::_internal_set_address(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthCaptchaRes::_internal_mutable_address() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthCaptchaRes::release_address() {
  // @@protoc_insertion_point(field_release:PTP.Auth.AuthCaptchaRes.address)
  if (!_internal_has_address()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.address_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AuthCaptchaRes::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Auth.AuthCaptchaRes.address)
}

// required bytes iv = 3;
inline bool AuthCaptchaRes::_internal_has_iv() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AuthCaptchaRes::has_iv() const {
  return _internal_has_iv();
}
inline void AuthCaptchaRes::clear_iv() {
  _impl_.iv_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AuthCaptchaRes::iv() const {
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthCaptchaRes.iv)
  return _internal_iv();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthCaptchaRes::set_iv(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.iv_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Auth.AuthCaptchaRes.iv)
}
inline std::string* AuthCaptchaRes::mutable_iv() {
  std::string* _s = _internal_mutable_iv();
  // @@protoc_insertion_point(field_mutable:PTP.Auth.AuthCaptchaRes.iv)
  return _s;
}
inline const std::string& AuthCaptchaRes::_internal_iv() const {
  return _impl_.iv_.Get();
}
inline void AuthCaptchaRes::_internal_set_iv(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.iv_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthCaptchaRes::_internal_mutable_iv() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.iv_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthCaptchaRes::release_iv() {
  // @@protoc_insertion_point(field_release:PTP.Auth.AuthCaptchaRes.iv)
  if (!_internal_has_iv()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.iv_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.iv_.IsDefault()) {
    _impl_.iv_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AuthCaptchaRes::set_allocated_iv(std::string* iv) {
  if (iv != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.iv_.SetAllocated(iv, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.iv_.IsDefault()) {
    _impl_.iv_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Auth.AuthCaptchaRes.iv)
}

// required bytes aad = 4;
inline bool AuthCaptchaRes::_internal_has_aad() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AuthCaptchaRes::has_aad() const {
  return _internal_has_aad();
}
inline void AuthCaptchaRes::clear_aad() {
  _impl_.aad_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AuthCaptchaRes::aad() const {
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthCaptchaRes.aad)
  return _internal_aad();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthCaptchaRes::set_aad(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.aad_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Auth.AuthCaptchaRes.aad)
}
inline std::string* AuthCaptchaRes::mutable_aad() {
  std::string* _s = _internal_mutable_aad();
  // @@protoc_insertion_point(field_mutable:PTP.Auth.AuthCaptchaRes.aad)
  return _s;
}
inline const std::string& AuthCaptchaRes::_internal_aad() const {
  return _impl_.aad_.Get();
}
inline void AuthCaptchaRes::_internal_set_aad(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.aad_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthCaptchaRes::_internal_mutable_aad() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.aad_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthCaptchaRes::release_aad() {
  // @@protoc_insertion_point(field_release:PTP.Auth.AuthCaptchaRes.aad)
  if (!_internal_has_aad()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.aad_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.aad_.IsDefault()) {
    _impl_.aad_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AuthCaptchaRes::set_allocated_aad(std::string* aad) {
  if (aad != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.aad_.SetAllocated(aad, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.aad_.IsDefault()) {
    _impl_.aad_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Auth.AuthCaptchaRes.aad)
}

// required bytes sign = 5;
inline bool AuthCaptchaRes::_internal_has_sign() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AuthCaptchaRes::has_sign() const {
  return _internal_has_sign();
}
inline void AuthCaptchaRes::clear_sign() {
  _impl_.sign_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AuthCaptchaRes::sign() const {
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthCaptchaRes.sign)
  return _internal_sign();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthCaptchaRes::set_sign(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.sign_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Auth.AuthCaptchaRes.sign)
}
inline std::string* AuthCaptchaRes::mutable_sign() {
  std::string* _s = _internal_mutable_sign();
  // @@protoc_insertion_point(field_mutable:PTP.Auth.AuthCaptchaRes.sign)
  return _s;
}
inline const std::string& AuthCaptchaRes::_internal_sign() const {
  return _impl_.sign_.Get();
}
inline void AuthCaptchaRes::_internal_set_sign(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.sign_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthCaptchaRes::_internal_mutable_sign() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.sign_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthCaptchaRes::release_sign() {
  // @@protoc_insertion_point(field_release:PTP.Auth.AuthCaptchaRes.sign)
  if (!_internal_has_sign()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.sign_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sign_.IsDefault()) {
    _impl_.sign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AuthCaptchaRes::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.sign_.SetAllocated(sign, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sign_.IsDefault()) {
    _impl_.sign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Auth.AuthCaptchaRes.sign)
}

// required .PTP.Common.ERR error = 6;
inline bool AuthCaptchaRes::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AuthCaptchaRes::has_error() const {
  return _internal_has_error();
}
inline void AuthCaptchaRes::clear_error() {
  _impl_.error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::PTP::Common::ERR AuthCaptchaRes::_internal_error() const {
  return static_cast< ::PTP::Common::ERR >(_impl_.error_);
}
inline ::PTP::Common::ERR AuthCaptchaRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthCaptchaRes.error)
  return _internal_error();
}
inline void AuthCaptchaRes::_internal_set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.error_ = value;
}
inline void AuthCaptchaRes::set_error(::PTP::Common::ERR value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:PTP.Auth.AuthCaptchaRes.error)
}

// -------------------------------------------------------------------

// AuthLoginReq

// required string address = 1;
inline bool AuthLoginReq::_internal_has_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthLoginReq::has_address() const {
  return _internal_has_address();
}
inline void AuthLoginReq::clear_address() {
  _impl_.address_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthLoginReq::address() const {
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthLoginReq.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthLoginReq::set_address(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Auth.AuthLoginReq.address)
}
inline std::string* AuthLoginReq::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:PTP.Auth.AuthLoginReq.address)
  return _s;
}
inline const std::string& AuthLoginReq::_internal_address() const {
  return _impl_.address_.Get();
}
inline void AuthLoginReq::_internal_set_address(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthLoginReq::_internal_mutable_address() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthLoginReq::release_address() {
  // @@protoc_insertion_point(field_release:PTP.Auth.AuthLoginReq.address)
  if (!_internal_has_address()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.address_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AuthLoginReq::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Auth.AuthLoginReq.address)
}

// required string captcha = 2;
inline bool AuthLoginReq::_internal_has_captcha() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthLoginReq::has_captcha() const {
  return _internal_has_captcha();
}
inline void AuthLoginReq::clear_captcha() {
  _impl_.captcha_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AuthLoginReq::captcha() const {
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthLoginReq.captcha)
  return _internal_captcha();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthLoginReq::set_captcha(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.captcha_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Auth.AuthLoginReq.captcha)
}
inline std::string* AuthLoginReq::mutable_captcha() {
  std::string* _s = _internal_mutable_captcha();
  // @@protoc_insertion_point(field_mutable:PTP.Auth.AuthLoginReq.captcha)
  return _s;
}
inline const std::string& AuthLoginReq::_internal_captcha() const {
  return _impl_.captcha_.Get();
}
inline void AuthLoginReq::_internal_set_captcha(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.captcha_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthLoginReq::_internal_mutable_captcha() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.captcha_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthLoginReq::release_captcha() {
  // @@protoc_insertion_point(field_release:PTP.Auth.AuthLoginReq.captcha)
  if (!_internal_has_captcha()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.captcha_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.captcha_.IsDefault()) {
    _impl_.captcha_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AuthLoginReq::set_allocated_captcha(std::string* captcha) {
  if (captcha != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.captcha_.SetAllocated(captcha, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.captcha_.IsDefault()) {
    _impl_.captcha_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Auth.AuthLoginReq.captcha)
}

// required .PTP.Common.ClientType client_type = 3;
inline bool AuthLoginReq::_internal_has_client_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AuthLoginReq::has_client_type() const {
  return _internal_has_client_type();
}
inline void AuthLoginReq::clear_client_type() {
  _impl_.client_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::PTP::Common::ClientType AuthLoginReq::_internal_client_type() const {
  return static_cast< ::PTP::Common::ClientType >(_impl_.client_type_);
}
inline ::PTP::Common::ClientType AuthLoginReq::client_type() const {
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthLoginReq.client_type)
  return _internal_client_type();
}
inline void AuthLoginReq::_internal_set_client_type(::PTP::Common::ClientType value) {
  assert(::PTP::Common::ClientType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.client_type_ = value;
}
inline void AuthLoginReq::set_client_type(::PTP::Common::ClientType value) {
  _internal_set_client_type(value);
  // @@protoc_insertion_point(field_set:PTP.Auth.AuthLoginReq.client_type)
}

// optional string client_version = 5;
inline bool AuthLoginReq::_internal_has_client_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AuthLoginReq::has_client_version() const {
  return _internal_has_client_version();
}
inline void AuthLoginReq::clear_client_version() {
  _impl_.client_version_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AuthLoginReq::client_version() const {
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthLoginReq.client_version)
  return _internal_client_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthLoginReq::set_client_version(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.client_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Auth.AuthLoginReq.client_version)
}
inline std::string* AuthLoginReq::mutable_client_version() {
  std::string* _s = _internal_mutable_client_version();
  // @@protoc_insertion_point(field_mutable:PTP.Auth.AuthLoginReq.client_version)
  return _s;
}
inline const std::string& AuthLoginReq::_internal_client_version() const {
  return _impl_.client_version_.Get();
}
inline void AuthLoginReq::_internal_set_client_version(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.client_version_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthLoginReq::_internal_mutable_client_version() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.client_version_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthLoginReq::release_client_version() {
  // @@protoc_insertion_point(field_release:PTP.Auth.AuthLoginReq.client_version)
  if (!_internal_has_client_version()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.client_version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_version_.IsDefault()) {
    _impl_.client_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AuthLoginReq::set_allocated_client_version(std::string* client_version) {
  if (client_version != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.client_version_.SetAllocated(client_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_version_.IsDefault()) {
    _impl_.client_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Auth.AuthLoginReq.client_version)
}

// required bytes sign = 6;
inline bool AuthLoginReq::_internal_has_sign() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AuthLoginReq::has_sign() const {
  return _internal_has_sign();
}
inline void AuthLoginReq::clear_sign() {
  _impl_.sign_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AuthLoginReq::sign() const {
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthLoginReq.sign)
  return _internal_sign();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthLoginReq::set_sign(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.sign_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PTP.Auth.AuthLoginReq.sign)
}
inline std::string* AuthLoginReq::mutable_sign() {
  std::string* _s = _internal_mutable_sign();
  // @@protoc_insertion_point(field_mutable:PTP.Auth.AuthLoginReq.sign)
  return _s;
}
inline const std::string& AuthLoginReq::_internal_sign() const {
  return _impl_.sign_.Get();
}
inline void AuthLoginReq::_internal_set_sign(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.sign_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthLoginReq::_internal_mutable_sign() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.sign_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthLoginReq::release_sign() {
  // @@protoc_insertion_point(field_release:PTP.Auth.AuthLoginReq.sign)
  if (!_internal_has_sign()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.sign_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sign_.IsDefault()) {
    _impl_.sign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AuthLoginReq::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.sign_.SetAllocated(sign, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sign_.IsDefault()) {
    _impl_.sign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PTP.Auth.AuthLoginReq.sign)
}

// -------------------------------------------------------------------

// AuthLoginRes

// required .PTP.Common.ERR error = 2;
inline bool AuthLoginRes::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthLoginRes::has_error() const {
  return _internal_has_error();
}
inline void AuthLoginRes::clear_error() {
  _impl_.error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::PTP::Common::ERR AuthLoginRes::_internal_error() const {
  return static_cast< ::PTP::Common::ERR >(_impl_.error_);
}
inline ::PTP::Common::ERR AuthLoginRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthLoginRes.error)
  return _internal_error();
}
inline void AuthLoginRes::_internal_set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_ = value;
}
inline void AuthLoginRes::set_error(::PTP::Common::ERR value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:PTP.Auth.AuthLoginRes.error)
}

// optional .PTP.Common.UserInfo user_info = 5;
inline bool AuthLoginRes::_internal_has_user_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_info_ != nullptr);
  return value;
}
inline bool AuthLoginRes::has_user_info() const {
  return _internal_has_user_info();
}
inline const ::PTP::Common::UserInfo& AuthLoginRes::_internal_user_info() const {
  const ::PTP::Common::UserInfo* p = _impl_.user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::PTP::Common::UserInfo&>(
      ::PTP::Common::_UserInfo_default_instance_);
}
inline const ::PTP::Common::UserInfo& AuthLoginRes::user_info() const {
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthLoginRes.user_info)
  return _internal_user_info();
}
inline void AuthLoginRes::unsafe_arena_set_allocated_user_info(
    ::PTP::Common::UserInfo* user_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_info_);
  }
  _impl_.user_info_ = user_info;
  if (user_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PTP.Auth.AuthLoginRes.user_info)
}
inline ::PTP::Common::UserInfo* AuthLoginRes::release_user_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PTP::Common::UserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PTP::Common::UserInfo* AuthLoginRes::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_release:PTP.Auth.AuthLoginRes.user_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PTP::Common::UserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
  return temp;
}
inline ::PTP::Common::UserInfo* AuthLoginRes::_internal_mutable_user_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::PTP::Common::UserInfo>(GetArenaForAllocation());
    _impl_.user_info_ = p;
  }
  return _impl_.user_info_;
}
inline ::PTP::Common::UserInfo* AuthLoginRes::mutable_user_info() {
  ::PTP::Common::UserInfo* _msg = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:PTP.Auth.AuthLoginRes.user_info)
  return _msg;
}
inline void AuthLoginRes::set_allocated_user_info(::PTP::Common::UserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_info_);
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info));
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:PTP.Auth.AuthLoginRes.user_info)
}

// -------------------------------------------------------------------

// AuthLogoutReq

// -------------------------------------------------------------------

// AuthLogoutRes

// required .PTP.Common.ERR error = 3;
inline bool AuthLogoutRes::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthLogoutRes::has_error() const {
  return _internal_has_error();
}
inline void AuthLogoutRes::clear_error() {
  _impl_.error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::PTP::Common::ERR AuthLogoutRes::_internal_error() const {
  return static_cast< ::PTP::Common::ERR >(_impl_.error_);
}
inline ::PTP::Common::ERR AuthLogoutRes::error() const {
  // @@protoc_insertion_point(field_get:PTP.Auth.AuthLogoutRes.error)
  return _internal_error();
}
inline void AuthLogoutRes::_internal_set_error(::PTP::Common::ERR value) {
  assert(::PTP::Common::ERR_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_ = value;
}
inline void AuthLogoutRes::set_error(::PTP::Common::ERR value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:PTP.Auth.AuthLogoutRes.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Auth
}  // namespace PTP

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PTP_2eAuth_2eproto
